package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/notification/graph/model"
)

// CreateRecipient is the resolver for the createRecipient field.
func (r *mutationResolver) CreateRecipient(ctx context.Context, input model.RecipientInput) (*model.Recipient, error) {
	panic(fmt.Errorf("not implemented: CreateRecipient - createRecipient"))
}

// UpdateRecipient is the resolver for the updateRecipient field.
func (r *mutationResolver) UpdateRecipient(ctx context.Context, args map[string]interface{}) (*model.Recipient, error) {
	panic(fmt.Errorf("not implemented: UpdateRecipient - updateRecipient"))
}

// DeleteRecipient is the resolver for the deleteRecipient field.
func (r *mutationResolver) DeleteRecipient(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteRecipient - deleteRecipient"))
}

// DeleteRecipients is the resolver for the deleteRecipients field.
func (r *mutationResolver) DeleteRecipients(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteRecipients - deleteRecipients"))
}

// Recipient is the resolver for the recipient field.
func (r *queryResolver) Recipient(ctx context.Context, id string) (*model.Recipient, error) {
	panic(fmt.Errorf("not implemented: Recipient - recipient"))
}

// Recipients is the resolver for the recipients field.
func (r *queryResolver) Recipients(ctx context.Context, args map[string]interface{}) (*model.Recipients, error) {
	panic(fmt.Errorf("not implemented: Recipients - recipients"))
}

// ID is the resolver for the id field.
func (r *recipientResolver) ID(ctx context.Context, obj *model.Recipient) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *recipientResolver) User(ctx context.Context, obj *model.Recipient) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Message is the resolver for the message field.
func (r *recipientResolver) Message(ctx context.Context, obj *model.Recipient) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: Message - message"))
}

// ReadAt is the resolver for the read_at field.
func (r *recipientResolver) ReadAt(ctx context.Context, obj *model.Recipient) (*int, error) {
	panic(fmt.Errorf("not implemented: ReadAt - read_at"))
}

// CreatedAt is the resolver for the created_at field.
func (r *recipientResolver) CreatedAt(ctx context.Context, obj *model.Recipient) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *recipientResolver) UpdatedAt(ctx context.Context, obj *model.Recipient) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Recipient returns RecipientResolver implementation.
func (r *Resolver) Recipient() RecipientResolver { return &recipientResolver{r} }

type recipientResolver struct{ *Resolver }
