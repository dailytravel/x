// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID string `json:"id"`
}

func (Comment) IsEntity() {}

type Conversations struct {
	Data  []*Conversation `json:"data,omitempty"`
	Count int             `json:"count"`
}

type File struct {
	ID          string                 `json:"id"`
	Locale      string                 `json:"locale"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Size        int                    `json:"size"`
	Provider    string                 `json:"provider"`
	URL         string                 `json:"url"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     bool                   `json:"starred"`
	Status      string                 `json:"status"`
	CreatedAt   string                 `json:"created_at"`
	UpdatedAt   string                 `json:"updated_at"`
	CreatedBy   *User                  `json:"created_by,omitempty"`
	UpdatedBy   *User                  `json:"updated_by,omitempty"`
	Owner       *User                  `json:"owner,omitempty"`
	Followers   []*Follow              `json:"followers,omitempty"`
}

func (File) IsEntity() {}

type Files struct {
	Count int     `json:"count"`
	Data  []*File `json:"data,omitempty"`
}

type Follow struct {
	ID string `json:"id"`
}

func (Follow) IsEntity() {}

type Messages struct {
	Data  []*Message `json:"data,omitempty"`
	Count int        `json:"count"`
}

type NewConversation struct {
	Type        string                 `json:"type"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type NewFile struct {
	Locale      string                 `json:"locale"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Size        int                    `json:"size"`
	Provider    string                 `json:"provider"`
	URL         string                 `json:"url"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Owner       *string                `json:"owner,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type NewMessage struct {
	Conversation string                 `json:"conversation"`
	Recipients   []string               `json:"recipients"`
	Subject      string                 `json:"subject"`
	Body         map[string]interface{} `json:"body"`
	Categories   []string               `json:"categories,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
}

type Notifications struct {
	Data  []*Notification `json:"data,omitempty"`
	Count int             `json:"count"`
}

type Reaction struct {
	ID string `json:"id"`
}

func (Reaction) IsEntity() {}

type RecipientInput struct {
	Recipient string `json:"recipient"`
	Message   string `json:"message"`
	ReadAt    *int   `json:"read_at,omitempty"`
}

type Recipients struct {
	Count int          `json:"count"`
	Data  []*Recipient `json:"data,omitempty"`
}

type UpdateConversation struct {
	Type        *string                `json:"type,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateFile struct {
	Locale      *string                `json:"locale,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Type        *string                `json:"type,omitempty"`
	Size        *int                   `json:"size,omitempty"`
	Provider    *string                `json:"provider,omitempty"`
	URL         *string                `json:"url,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Owner       *string                `json:"owner,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type UpdateMessage struct {
	Conversation *string                `json:"conversation,omitempty"`
	Recipients   []string               `json:"recipients,omitempty"`
	Subject      *string                `json:"subject,omitempty"`
	Body         map[string]interface{} `json:"body,omitempty"`
	Categories   []string               `json:"categories,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
}

type ConversationStatus string

const (
	ConversationStatusActive   ConversationStatus = "ACTIVE"
	ConversationStatusArchived ConversationStatus = "ARCHIVED"
	ConversationStatusDeleted  ConversationStatus = "DELETED"
)

var AllConversationStatus = []ConversationStatus{
	ConversationStatusActive,
	ConversationStatusArchived,
	ConversationStatusDeleted,
}

func (e ConversationStatus) IsValid() bool {
	switch e {
	case ConversationStatusActive, ConversationStatusArchived, ConversationStatusDeleted:
		return true
	}
	return false
}

func (e ConversationStatus) String() string {
	return string(e)
}

func (e *ConversationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConversationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConversationStatus", str)
	}
	return nil
}

func (e ConversationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageStatus string

const (
	MessageStatusDraft     MessageStatus = "DRAFT"
	MessageStatusSent      MessageStatus = "SENT"
	MessageStatusArchived  MessageStatus = "ARCHIVED"
	MessageStatusSpam      MessageStatus = "SPAM"
	MessageStatusScheduled MessageStatus = "SCHEDULED"
	MessageStatusDelivered MessageStatus = "DELIVERED"
	MessageStatusRead      MessageStatus = "READ"
	MessageStatusFailed    MessageStatus = "FAILED"
)

var AllMessageStatus = []MessageStatus{
	MessageStatusDraft,
	MessageStatusSent,
	MessageStatusArchived,
	MessageStatusSpam,
	MessageStatusScheduled,
	MessageStatusDelivered,
	MessageStatusRead,
	MessageStatusFailed,
}

func (e MessageStatus) IsValid() bool {
	switch e {
	case MessageStatusDraft, MessageStatusSent, MessageStatusArchived, MessageStatusSpam, MessageStatusScheduled, MessageStatusDelivered, MessageStatusRead, MessageStatusFailed:
		return true
	}
	return false
}

func (e MessageStatus) String() string {
	return string(e)
}

func (e *MessageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageStatus", str)
	}
	return nil
}

func (e MessageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
