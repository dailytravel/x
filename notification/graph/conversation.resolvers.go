package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/notification/graph/model"
)

// ID is the resolver for the id field.
func (r *conversationResolver) ID(ctx context.Context, obj *model.Conversation) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *conversationResolver) Metadata(ctx context.Context, obj *model.Conversation) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Message is the resolver for the message field.
func (r *conversationResolver) Message(ctx context.Context, obj *model.Conversation) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: Message - message"))
}

// CreatedAt is the resolver for the created_at field.
func (r *conversationResolver) CreatedAt(ctx context.Context, obj *model.Conversation) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *conversationResolver) UpdatedAt(ctx context.Context, obj *model.Conversation) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Followers is the resolver for the followers field.
func (r *conversationResolver) Followers(ctx context.Context, obj *model.Conversation) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Messages is the resolver for the messages field.
func (r *conversationResolver) Messages(ctx context.Context, obj *model.Conversation) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// CreateConversation is the resolver for the createConversation field.
func (r *mutationResolver) CreateConversation(ctx context.Context, input model.NewConversation) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: CreateConversation - createConversation"))
}

// UpdateConversation is the resolver for the updateConversation field.
func (r *mutationResolver) UpdateConversation(ctx context.Context, id string, input model.UpdateConversation) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: UpdateConversation - updateConversation"))
}

// LeaveConversation is the resolver for the leaveConversation field.
func (r *mutationResolver) LeaveConversation(ctx context.Context, id string) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: LeaveConversation - leaveConversation"))
}

// DeleteConversation is the resolver for the deleteConversation field.
func (r *mutationResolver) DeleteConversation(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteConversation - deleteConversation"))
}

// DeleteConversations is the resolver for the deleteConversations field.
func (r *mutationResolver) DeleteConversations(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteConversations - deleteConversations"))
}

// Conversation is the resolver for the conversation field.
func (r *queryResolver) Conversation(ctx context.Context, id string) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: Conversation - conversation"))
}

// Conversations is the resolver for the conversations field.
func (r *queryResolver) Conversations(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Conversations - conversations"))
}

// Conversation returns ConversationResolver implementation.
func (r *Resolver) Conversation() ConversationResolver { return &conversationResolver{r} }

type conversationResolver struct{ *Resolver }
