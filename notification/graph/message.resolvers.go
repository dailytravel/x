package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/notification/graph/model"
)

// ID is the resolver for the id field.
func (r *messageResolver) ID(ctx context.Context, obj *model.Message) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Conversation is the resolver for the conversation field.
func (r *messageResolver) Conversation(ctx context.Context, obj *model.Message) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: Conversation - conversation"))
}

// Owner is the resolver for the owner field.
func (r *messageResolver) Owner(ctx context.Context, obj *model.Message) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// CreatedAt is the resolver for the created_at field.
func (r *messageResolver) CreatedAt(ctx context.Context, obj *model.Message) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *messageResolver) UpdatedAt(ctx context.Context, obj *model.Message) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// Recipients is the resolver for the recipients field.
func (r *messageResolver) Recipients(ctx context.Context, obj *model.Message) ([]*model.Recipient, error) {
	panic(fmt.Errorf("not implemented: Recipients - recipients"))
}

// Attachments is the resolver for the attachments field.
func (r *messageResolver) Attachments(ctx context.Context, obj *model.Message) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: Attachments - attachments"))
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.NewMessage) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: CreateMessage - createMessage"))
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, id string, input model.UpdateMessage) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: UpdateMessage - updateMessage"))
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteMessage - deleteMessage"))
}

// DeleteMessages is the resolver for the deleteMessages field.
func (r *mutationResolver) DeleteMessages(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteMessages - deleteMessages"))
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, id string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: Message - message"))
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

type messageResolver struct{ *Resolver }
