package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/service/graph/model"
)

// ID is the resolver for the id field.
func (r *listResolver) ID(ctx context.Context, obj *model.List) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Board is the resolver for the board field.
func (r *listResolver) Board(ctx context.Context, obj *model.List) (*model.Board, error) {
	panic(fmt.Errorf("not implemented: Board - board"))
}

// Metadata is the resolver for the metadata field.
func (r *listResolver) Metadata(ctx context.Context, obj *model.List) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the created_at field.
func (r *listResolver) CreatedAt(ctx context.Context, obj *model.List) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *listResolver) UpdatedAt(ctx context.Context, obj *model.List) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// CreatedBy is the resolver for the created_by field.
func (r *listResolver) CreatedBy(ctx context.Context, obj *model.List) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *listResolver) UpdatedBy(ctx context.Context, obj *model.List) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Tasks is the resolver for the tasks field.
func (r *listResolver) Tasks(ctx context.Context, obj *model.List) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// CreateList is the resolver for the createList field.
func (r *mutationResolver) CreateList(ctx context.Context, input model.NewList) (*model.List, error) {
	panic(fmt.Errorf("not implemented: CreateList - createList"))
}

// UpdateList is the resolver for the updateList field.
func (r *mutationResolver) UpdateList(ctx context.Context, id string, input model.UpdateList) (*model.List, error) {
	panic(fmt.Errorf("not implemented: UpdateList - updateList"))
}

// DeleteList is the resolver for the deleteList field.
func (r *mutationResolver) DeleteList(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteList - deleteList"))
}

// DeleteLists is the resolver for the deleteLists field.
func (r *mutationResolver) DeleteLists(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteLists - deleteLists"))
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context, id string) (*model.List, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// Lists is the resolver for the lists field.
func (r *queryResolver) Lists(ctx context.Context, board string) (*model.Lists, error) {
	panic(fmt.Errorf("not implemented: Lists - lists"))
}

// List returns ListResolver implementation.
func (r *Resolver) List() ListResolver { return &listResolver{r} }

type listResolver struct{ *Resolver }
