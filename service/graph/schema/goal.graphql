type Goal {
  id: ID!
  name: String!
  notes: String
  start_date: String!
  due_date: String!
  is_company: Boolean!
  metadata: Map
  status: String
  created_at: String!
  updated_at: String!
  created_by: User
  updated_by: User
  owner: User!
  parent: Goal
  organization: Organization
  time: Time!
  followers: [Follower]
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}

type Goals {
  count: Int!
  data: [Goal]
}

type Metric {
  initial: Float!
  target: Float!
  actual: Float!
  unit: String!
}

input NewMetric {
  initial: Float!
  target: Float!
  actual: Float!
  unit: String!
}

input UpdateMetric {
  actual: Float!
}

input NewGoal {
  name: String!
  notes: String
  time: String!
  start_date: String!
  due_date: String!
  is_company: Boolean
  metadata: Map
  status: String
  owner: ID!
  parent: ID
  organization: ID
}

input UpdateGoal {
  name: String
  notes: String
  time: String
  start_on: Int
  due_on: Int
  is_company: Boolean
  metadata: Map
  status: String
  owner: ID
  parent: ID
  organization: ID
}

extend type Query {
  goal(id: ID!): Goal @auth
  goals(args: Map): Goals @auth
}

extend type Mutation {
  createGoal(input: NewGoal!): Goal @auth
  updateGoal(id: ID!, input: UpdateGoal!): Goal @auth
  deleteGoal(id: ID!): Map @auth
  deleteGoals(ids: [ID!]!): Map @auth
  createGoalMetric(id: ID!, input: NewMetric!): Goal @auth
  updateGoalMetric(id: ID!, input: UpdateMetric!): Goal @auth
}
