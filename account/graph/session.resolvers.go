package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/account/graph/model"
)

// ID is the resolver for the id field.
func (r *sessionResolver) ID(ctx context.Context, obj *model.Session) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// User is the resolver for the user field.
func (r *sessionResolver) User(ctx context.Context, obj *model.Session) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Expires is the resolver for the expires field.
func (r *sessionResolver) Expires(ctx context.Context, obj *model.Session) (string, error) {
	panic(fmt.Errorf("not implemented: Expires - expires"))
}

// Metadata is the resolver for the metadata field.
func (r *sessionResolver) Metadata(ctx context.Context, obj *model.Session) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Created is the resolver for the created field.
func (r *sessionResolver) Created(ctx context.Context, obj *model.Session) (string, error) {
	panic(fmt.Errorf("not implemented: Created - created"))
}

// Session returns SessionResolver implementation.
func (r *Resolver) Session() SessionResolver { return &sessionResolver{r} }

type sessionResolver struct{ *Resolver }
