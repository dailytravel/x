package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dailytravel/x/account/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// ID is the resolver for the id field.
func (r *tokenResolver) ID(ctx context.Context, obj *model.Token) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *tokenResolver) User(ctx context.Context, obj *model.Token) (*model.User, error) {
	var user *model.User
	if err := r.db.Collection("users").FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&user); err != nil {
		return nil, err
	}

	return user, nil
}

// Client is the resolver for the client field.
func (r *tokenResolver) Client(ctx context.Context, obj *model.Token) (*model.Client, error) {
	var client *model.Client
	if err := r.db.Collection("clients").FindOne(ctx, bson.M{"_id": obj.Client}).Decode(&client); err != nil {
		return nil, err
	}

	return client, nil
}

// Expires is the resolver for the expires field.
func (r *tokenResolver) Expires(ctx context.Context, obj *model.Token) (string, error) {
	return time.Unix(int64(obj.Expires.T), 0).Format(time.RFC3339), nil
}

// LastUsed is the resolver for the last_used field.
func (r *tokenResolver) LastUsed(ctx context.Context, obj *model.Token) (string, error) {
	return time.Unix(int64(obj.LastUsed.T), 0).Format(time.RFC3339), nil
}

// Created is the resolver for the created field.
func (r *tokenResolver) Created(ctx context.Context, obj *model.Token) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *tokenResolver) Metadata(ctx context.Context, obj *model.Token) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Token returns TokenResolver implementation.
func (r *Resolver) Token() TokenResolver { return &tokenResolver{r} }

type tokenResolver struct{ *Resolver }
