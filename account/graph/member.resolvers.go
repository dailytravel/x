package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dailytravel/x/account/graph/model"
)

// ID is the resolver for the id field.
func (r *memberResolver) ID(ctx context.Context, obj *model.Member) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *memberResolver) UID(ctx context.Context, obj *model.Member) (string, error) {
	return obj.UID.Hex(), nil
}

// Workspace is the resolver for the workspace field.
func (r *memberResolver) Workspace(ctx context.Context, obj *model.Member) (string, error) {
	return obj.Workspace.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *memberResolver) Metadata(ctx context.Context, obj *model.Member) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *memberResolver) Created(ctx context.Context, obj *model.Member) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *memberResolver) Updated(ctx context.Context, obj *model.Member) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Member returns MemberResolver implementation.
func (r *Resolver) Member() MemberResolver { return &memberResolver{r} }

type memberResolver struct{ *Resolver }
