package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/account/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *connectionResolver) ID(ctx context.Context, obj *model.Connection) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *connectionResolver) Metadata(ctx context.Context, obj *model.Connection) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *connectionResolver) Created(ctx context.Context, obj *model.Connection) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *connectionResolver) Updated(ctx context.Context, obj *model.Connection) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Client is the resolver for the client field.
func (r *connectionResolver) Client(ctx context.Context, obj *model.Connection) (*model.Client, error) {
	var item *model.Client

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": obj.Client}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// CreateConnection is the resolver for the createConnection field.
func (r *mutationResolver) CreateConnection(ctx context.Context, input model.NewConnection) (*model.Connection, error) {
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	item := &model.Connection{}

	_, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateConnection is the resolver for the updateConnection field.
func (r *mutationResolver) UpdateConnection(ctx context.Context, id string, input model.UpdateConnection) (*model.Connection, error) {
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the item by ID
	item := &model.Connection{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if err := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, item).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteConnection is the resolver for the deleteConnection field.
func (r *mutationResolver) DeleteConnection(ctx context.Context, id string) (map[string]interface{}, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	res, err := r.db.Collection("connections").DeleteOne(ctx, bson.M{"_id": _id})
	if err != nil {
		return nil, fmt.Errorf("error deleting role: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("role not found")
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// DeleteConnections is the resolver for the deleteConnections field.
func (r *mutationResolver) DeleteConnections(ctx context.Context, ids []string) (map[string]interface{}, error) {
	_ids := make([]primitive.ObjectID, len(ids))
	for i, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids[i] = _id
	}
	filter := bson.M{"_id": bson.M{"$in": _ids}}

	res, err := r.db.Collection("connections").DeleteMany(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error deleting connections: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("connections not found")
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// Connections is the resolver for the connections field.
func (r *queryResolver) Connections(ctx context.Context, stages map[string]interface{}) (*model.Connections, error) {
	pipeline := bson.A{}

	// Add additional stages to the pipeline
	for key, value := range stages {
		stage := bson.D{{Key: key, Value: value}}
		pipeline = append(pipeline, stage)
	}

	cursor, err := r.db.Collection("connections").Aggregate(ctx, pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var items []*model.Connection

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return &model.Connections{
		Count: int(cursor.RemainingBatchLength()),
		Data:  items,
	}, nil
}

// Connection is the resolver for the connection field.
func (r *queryResolver) Connection(ctx context.Context, id string) (*model.Connection, error) {
	item := &model.Connection{}
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// Connection returns ConnectionResolver implementation.
func (r *Resolver) Connection() ConnectionResolver { return &connectionResolver{r} }

type connectionResolver struct{ *Resolver }
