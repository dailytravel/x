type Invitation {
  id: ID!
  user: User!
  email: String!
  roles: [String!]!
  status: String!
  metadata: Map
  expiresAt: String!
  createdAt: String!
  updatedAt: String!
  createdBy: String
  updatedBy: String
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

type Invitations {
  data: [Invitation]
  count: Int!
}

input NewInvitation {
  email: String!
  roles: [String!]!
  metadata: Map
}

input UpdateInvitation {
  roles: [String!]!
  status: String
}

extend type Query {
  invitations(filter: Map, limit: Int, offset: Int): Invitations @auth
  invitation(id: ID!): Invitation
}

extend type Mutation {
  invite(input: NewInvitation!): Invitation @auth
  accept(token: ID!): Invitation @auth
  deleteInvitation(id: ID!): Boolean @auth
  deleteInvitations(ids: [ID!]!): Boolean @auth
}
