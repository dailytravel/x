type Client {
  id: ID!
  type: String!
  name: String!
  description: String
  domain: String
  secret: String!
  provider: String!
  redirect: String
  metadata: Map
  status: String!
  created: String!
  updated: String!
  user: User
}

type Clients {
  data: [Client]
  count: Int!
}

input NewClient {
  name: String!
  description: String
  domain: String
  redirect: String
  metadata: Map
}

input UpdateClient {
  name: String
  description: String
  domain: String
  redirect: String
  metadata: Map
}

extend type Query {
  client(id: ID!): Client @auth(roles: [ADMIN])
  clients(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Clients @auth(roles: [ADMIN])
}

extend type Mutation {
  createClient(input: NewClient!): Client @auth(roles: [ADMIN])
  updateClient(id: ID!, input: UpdateClient!): Client @auth(roles: [ADMIN])
  deleteClient(id: ID!): Map @auth(roles: [ADMIN])
  deleteClients(ids: [ID!]!): Map @auth(roles: [ADMIN])
}
