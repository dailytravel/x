type User @key(fields: "id") {
  id: ID!
  name: String!
  email: String!
  phone: String
  roles: [String]
  mfa: MFA
  timezone: String
  locale: String
  picture: String
  profile: Profile
  address: Address
  security: Security
  emailVerifiedAt: String
  phoneVerifiedAt: String
  createdAt: String!
  updatedAt: String!
  metadata: Map
  status: String
}

type Address {
  street: String
  city: String!
  state: String!
  zip: String!
  country: String!
}

type Profile {
  firstName: String
  lastName: String
  birthday: String
  jobTitle: String
  gender: String
  bio: String
  company: String
  website: String
}

type Security {
  lastLogin: String!
  lastPasswordChange: String!
  has2FA: Boolean!
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SocialProvider {
  FACEBOOK
  GOOGLE
  TWITTER
  GITHUB
}

type Users {
  count: Int!
  data: [User]
}

type MFA {
  enabled: Boolean!
  code: String!
}

type Payload {
  accessToken: String!
  refreshToken: String!
  tokenType: String!
  expiresIn: Int!
}

# Input Types
input MFAInput {
  enabled: Boolean!
  code: String!
}

input UserInput {
  name: String!
  email: String!
  phone: String
  password: String!
  roles: [String]
  timezone: String
  locale: String
  picture: String
  profile: ProfileInput
  address: AddressInput
  status: String
}

input AddressInput {
  street: String
  city: String!
  state: String!
  zip: String!
  country: String!
}

input ProfileInput {
  firstName: String
  lastName: String
  jobTitle: String
  birthday: String
  gender: String
  bio: String
  company: String
  website: String
}

input PasswordInput {
  currentPassword: String!
  newPassword: String!
  passwordConfirmation: String!
}

extend type Query {
  users(args: Map): Map @auth(roles: [ADMIN]) #for search users on typesense
  user(id: ID!): User @auth(roles: [ADMIN])
  owners(ids: [String!]!, limit: Int, offset: Int): Users @auth
  me: User @auth
}

extend type Mutation {
  updateUser(id: ID!, input: UserInput!): User
  deleteUser(id: ID!): Boolean
  register(input: UserInput!): User
  login(email: String!, password: String!): Payload
  socialLogin(provider: SocialProvider!, accessToken: String!): Payload
  updatePassword(input: PasswordInput!): User
  forgotPassword(email: String!): Map
  resetPassword(
    token: String!
    password: String!
    passwordConfirmation: String!
  ): Map
}
