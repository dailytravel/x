type User @key(fields: "id") {
  id: ID!
  name: String!
  email: String!
  phone: String
  roles: [String]
  mfa: MFA
  timezone: String
  locale: String
  picture: String
  lastLogin: String
  emailVerified: Boolean
  phoneVerified: Boolean
  createdAt: String!
  updatedAt: String!
  metadata: Map
  status: String
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SocialProvider {
  FACEBOOK
  GOOGLE
  TWITTER
  GITHUB
}

type Users {
  count: Int!
  data: [User]
}

type MFA {
  enabled: Boolean!
  code: String!
}

type Payload {
  accessToken: String!
  refreshToken: String!
  tokenType: String!
  expiresIn: Int!
}

# Input Types
input MFAInput {
  enabled: Boolean!
  code: String!
}

input NewUser {
  name: String!
  email: String!
  phone: String
  password: String!
  roles: [String]
  timezone: String
  locale: String
  picture: String
  status: String
}

input UpdateUser {
  name: String
  password: String
  roles: [String]
  timezone: String
  locale: String
  picture: String
  status: String
  metadata: Map
}

extend type Query {
  users(args: Map): Map @auth(roles: [ADMIN]) #for search users on typesense
  user(id: ID!): User @auth(roles: [ADMIN])
  owners(ids: [String!]!, limit: Int, offset: Int): Users @auth
  me: User @auth
}

extend type Mutation {
  createUser(input: NewUser!): User @auth(roles: [ADMIN])
  updateUser(id: ID!, input: UpdateUser!): User
  register(input: NewUser!): User
  verifyEmail(token: String!): Map
  verifyPhone(token: String!): Map
  login(email: String!, password: String!): Payload
  socialLogin(provider: SocialProvider!, accessToken: String!): Payload
  forgotPassword(email: String!): Map
  resetPassword(token: String!, password: String!): Map
  deactivate: User @auth
  deleteUser(id: ID!): Boolean
  deleteUsers(ids: [ID!]!): Boolean
}
