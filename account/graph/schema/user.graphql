type User @key(fields: "id") {
  id: ID!
  name: String!
  email: String!
  roles: [String]
  mfa: MFA
  created_at: String!
  updated_at: String!
  status: String
  comments: [Comment]
}

type Users {
  count: Int!
  data: [User]
}

type MFA {
  enabled: Boolean!
  code: String!
}

input MFAInput {
  enabled: Boolean!
  code: String!
}

enum SocialProvider {
  FACEBOOK
  GOOGLE
  TWITTER
  GITHUB
}

type Payload {
  access_token: String!
  refresh_token: String!
  token_type: String!
  expires_in: Int!
}

input NewUser {
  name: String!
  email: String!
  password: String!
  roles: [String]
  mfa: MFAInput
}

input RegisterInput {
  locale: String!
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUser {
  name: String
  email: String
  password: String
  roles: [String]
  mfa: MFAInput
}

input PasswordInput {
  current_password: String!
  password: String!
  password_confirmation: String!
}

input VerifyEmailInput {
  token: String!
}

extend type Query {
  users(args: Map): Map @auth(requires: [ADMIN])
  user(id: ID!): User @auth(requires: [ADMIN])
  me: User @auth
}

extend type Mutation {
  createUser(input: NewUser!): User
  register(input: RegisterInput!): Payload
  login(input: LoginInput!): Payload
  socialLogin(provider: SocialProvider!, access_token: String!): Payload
  updateUser(id: ID!, input: UpdateUser!): User @auth(requires: [ADMIN])
  updateAccount(input: UpdateUser!): User @auth
  deleteUser(id: ID!): Map @auth(requires: [ADMIN])
  deleteUsers(ids: [ID!]!): Map @auth(requires: [ADMIN])
  deleteAccount: Map @auth
  restoreUser(id: ID!): Map @auth
  forgotPassword(email: String!): Map
  resetPassword(
    token: String!
    password: String!
    password_confirmation: String!
  ): Map
  updatePassword(input: PasswordInput!): User @auth
  verify(token: String!): Map
}
