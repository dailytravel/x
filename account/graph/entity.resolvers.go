package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/dailytravel/x/account/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// FindAttendanceByUID is the resolver for the findAttendanceByUID field.
func (r *entityResolver) FindAttendanceByUID(ctx context.Context, uid string) (*model.Attendance, error) {
	return &model.Attendance{
		UID: uid,
	}, nil
}

// FindBoardByUID is the resolver for the findBoardByUID field.
func (r *entityResolver) FindBoardByUID(ctx context.Context, uid string) (*model.Board, error) {
	return &model.Board{
		UID: uid,
	}, nil
}

// FindCampaignByUID is the resolver for the findCampaignByUID field.
func (r *entityResolver) FindCampaignByUID(ctx context.Context, uid string) (*model.Campaign, error) {
	return &model.Campaign{
		UID: uid,
	}, nil
}

// FindCollaboratorByUID is the resolver for the findCollaboratorByUID field.
func (r *entityResolver) FindCollaboratorByUID(ctx context.Context, uid string) (*model.Collaborator, error) {
	return &model.Collaborator{
		UID: uid,
	}, nil
}

// FindCommentByUID is the resolver for the findCommentByUID field.
func (r *entityResolver) FindCommentByUID(ctx context.Context, uid string) (*model.Comment, error) {
	return &model.Comment{
		UID: uid,
	}, nil
}

// FindCompanyByUID is the resolver for the findCompanyByUID field.
func (r *entityResolver) FindCompanyByUID(ctx context.Context, uid string) (*model.Company, error) {
	return &model.Company{
		UID: uid,
	}, nil
}

// FindContactByUID is the resolver for the findContactByUID field.
func (r *entityResolver) FindContactByUID(ctx context.Context, uid string) (*model.Contact, error) {
	return &model.Contact{
		UID: uid,
	}, nil
}

// FindCouponByUID is the resolver for the findCouponByUID field.
func (r *entityResolver) FindCouponByUID(ctx context.Context, uid string) (*model.Coupon, error) {
	return &model.Coupon{
		UID: uid,
	}, nil
}

// FindExpenseByUID is the resolver for the findExpenseByUID field.
func (r *entityResolver) FindExpenseByUID(ctx context.Context, uid string) (*model.Expense, error) {
	return &model.Expense{
		UID: uid,
	}, nil
}

// FindFileByUID is the resolver for the findFileByUID field.
func (r *entityResolver) FindFileByUID(ctx context.Context, uid string) (*model.File, error) {
	return &model.File{
		UID: uid,
	}, nil
}

// FindGoalByUID is the resolver for the findGoalByUID field.
func (r *entityResolver) FindGoalByUID(ctx context.Context, uid string) (*model.Goal, error) {
	return &model.Goal{
		UID: uid,
	}, nil
}

// FindInvoiceByUID is the resolver for the findInvoiceByUID field.
func (r *entityResolver) FindInvoiceByUID(ctx context.Context, uid string) (*model.Invoice, error) {
	return &model.Invoice{
		UID: uid,
	}, nil
}

// FindLinkByUID is the resolver for the findLinkByUID field.
func (r *entityResolver) FindLinkByUID(ctx context.Context, uid string) (*model.Link, error) {
	return &model.Link{
		UID: uid,
	}, nil
}

// FindListByUID is the resolver for the findListByUID field.
func (r *entityResolver) FindListByUID(ctx context.Context, uid string) (*model.List, error) {
	return &model.List{
		UID: uid,
	}, nil
}

// FindMemberByID is the resolver for the findMemberByID field.
func (r *entityResolver) FindMemberByID(ctx context.Context, id string) (*model.Member, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var item *model.Member

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// FindMembershipByUID is the resolver for the findMembershipByUID field.
func (r *entityResolver) FindMembershipByUID(ctx context.Context, uid string) (*model.Membership, error) {
	return &model.Membership{
		UID: uid,
	}, nil
}

// FindOrderByUID is the resolver for the findOrderByUID field.
func (r *entityResolver) FindOrderByUID(ctx context.Context, uid string) (*model.Order, error) {
	return &model.Order{
		UID: uid,
	}, nil
}

// FindOrganizationByUID is the resolver for the findOrganizationByUID field.
func (r *entityResolver) FindOrganizationByUID(ctx context.Context, uid string) (*model.Organization, error) {
	return &model.Organization{
		UID: uid,
	}, nil
}

// FindPortfolioByUID is the resolver for the findPortfolioByUID field.
func (r *entityResolver) FindPortfolioByUID(ctx context.Context, uid string) (*model.Portfolio, error) {
	return &model.Portfolio{
		UID: uid,
	}, nil
}

// FindPostByUID is the resolver for the findPostByUID field.
func (r *entityResolver) FindPostByUID(ctx context.Context, uid string) (*model.Post, error) {
	return &model.Post{
		UID: uid,
	}, nil
}

// FindQuoteByUID is the resolver for the findQuoteByUID field.
func (r *entityResolver) FindQuoteByUID(ctx context.Context, uid string) (*model.Quote, error) {
	return &model.Quote{
		UID: uid,
	}, nil
}

// FindReactionByUID is the resolver for the findReactionByUID field.
func (r *entityResolver) FindReactionByUID(ctx context.Context, uid string) (*model.Reaction, error) {
	return &model.Reaction{
		UID: uid,
	}, nil
}

// FindShareByUID is the resolver for the findShareByUID field.
func (r *entityResolver) FindShareByUID(ctx context.Context, uid string) (*model.Share, error) {
	return &model.Share{
		UID: uid,
	}, nil
}

// FindTaskByUID is the resolver for the findTaskByUID field.
func (r *entityResolver) FindTaskByUID(ctx context.Context, uid string) (*model.Task, error) {
	return &model.Task{
		UID: uid,
	}, nil
}

// FindTaskByMembers is the resolver for the findTaskByMembers field.
func (r *entityResolver) FindTaskByMembers(ctx context.Context, members []string) (*model.Task, error) {
	return &model.Task{
		Members: members,
	}, nil
}

// FindTaskByAssignee is the resolver for the findTaskByAssignee field.
func (r *entityResolver) FindTaskByAssignee(ctx context.Context, assignee string) (*model.Task, error) {
	return &model.Task{
		Assignee: assignee,
	}, nil
}

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id string) (*model.User, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var item *model.User

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// FindWishlistByUID is the resolver for the findWishlistByUID field.
func (r *entityResolver) FindWishlistByUID(ctx context.Context, uid string) (*model.Wishlist, error) {
	return &model.Wishlist{
		UID: uid,
	}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
