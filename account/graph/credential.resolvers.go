package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dailytravel/x/account/graph/model"
	"github.com/dailytravel/x/account/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *credentialResolver) ID(ctx context.Context, obj *model.Credential) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *credentialResolver) User(ctx context.Context, obj *model.Credential) (*model.User, error) {
	var item *model.User
	err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Expires is the resolver for the expires field.
func (r *credentialResolver) Expires(ctx context.Context, obj *model.Credential) (string, error) {
	return time.Unix(int64(obj.Expires.T), 0).Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *credentialResolver) Metadata(ctx context.Context, obj *model.Credential) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *credentialResolver) Created(ctx context.Context, obj *model.Credential) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *credentialResolver) Updated(ctx context.Context, obj *model.Credential) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// CreateCredential is the resolver for the createCredential field.
func (r *mutationResolver) CreateCredential(ctx context.Context, input model.NewCredential) (*model.Credential, error) {
	var item *model.Credential

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	expiresTime, err := time.Parse(time.RFC3339, input.Expires)
	if err != nil {
		return nil, err
	}

	item = &model.Credential{
		UID:     *uid,
		Type:    input.Type,
		Secret:  input.Secret,
		Expires: primitive.Timestamp{T: uint32(expiresTime.Unix())},
		Status:  input.Status,
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item, nil)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateCredential is the resolver for the updateCredential field.
func (r *mutationResolver) UpdateCredential(ctx context.Context, id string, input model.UpdateCredential) (*model.Credential, error) {
	var item *model.Credential

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	//find the item
	err = r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id, "uid": uid}).Decode(&item)
	if err != nil {
		return nil, err
	}

	//update the item
	if input.Secret != nil {
		item.Secret = *input.Secret
	}

	if input.Expires != nil {
		expiresTime, err := time.Parse(time.RFC3339, *input.Expires)
		if err != nil {
			return nil, err
		}
		item.Expires = primitive.Timestamp{T: uint32(expiresTime.Unix())}
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	//update the item
	_, err = r.db.Collection(item.Collection()).UpdateOne(ctx, bson.M{"_id": _id, "uid": uid}, bson.M{"$set": item})
	if err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteCredential is the resolver for the deleteCredential field.
func (r *mutationResolver) DeleteCredential(ctx context.Context, id string) (*model.Credential, error) {
	var item *model.Credential

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	err = r.db.Collection(item.Collection()).FindOneAndDelete(ctx, bson.M{"_id": _id, "uid": uid}).Decode(&item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Credential is the resolver for the credential field.
func (r *queryResolver) Credential(ctx context.Context, id string) (*model.Credential, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	var item *model.Credential
	err = r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id, "uid": uid}).Decode(&item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Credentials is the resolver for the credentials field.
func (r *queryResolver) Credentials(ctx context.Context) ([]*model.Credential, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	var items []*model.Credential
	cursor, err := r.db.Collection("credentials").Find(ctx, bson.M{"uid": uid})
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &items)
	if err != nil {
		return nil, err
	}

	return items, nil
}

// Credential returns CredentialResolver implementation.
func (r *Resolver) Credential() CredentialResolver { return &credentialResolver{r} }

type credentialResolver struct{ *Resolver }
