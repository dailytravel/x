package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/account/graph/model"
	"github.com/dailytravel/x/account/internal/utils"
	"github.com/typesense/typesense-go/typesense/api/pointer"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"golang.org/x/crypto/bcrypt"
)

// ID is the resolver for the id field.
func (r *invitationResolver) ID(ctx context.Context, obj *model.Invitation) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *invitationResolver) User(ctx context.Context, obj *model.Invitation) (*model.User, error) {
	var item *model.User

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Metadata is the resolver for the metadata field.
func (r *invitationResolver) Metadata(ctx context.Context, obj *model.Invitation) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// ExpiresAt is the resolver for the expiresAt field.
func (r *invitationResolver) ExpiresAt(ctx context.Context, obj *model.Invitation) (string, error) {
	return time.Unix(int64(obj.ExpiresAt.T), 0).Format(time.RFC3339), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *invitationResolver) CreatedAt(ctx context.Context, obj *model.Invitation) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *invitationResolver) UpdatedAt(ctx context.Context, obj *model.Invitation) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *invitationResolver) CreatedBy(ctx context.Context, obj *model.Invitation) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.CreatedBy.Hex()), nil
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *invitationResolver) UpdatedBy(ctx context.Context, obj *model.Invitation) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.UpdatedBy.Hex()), nil
}

// Invite is the resolver for the invite field.
func (r *mutationResolver) Invite(ctx context.Context, input model.NewInvitation) (*model.Invitation, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Create a new Invitation object using the input data
	item := &model.Invitation{
		UID:       *uid,
		Email:     input.Email,
		Roles:     input.Roles,
		Status:    "PENDING",
		ExpiresAt: primitive.Timestamp{T: uint32(time.Now().Add(time.Hour * 24 * 7).Unix())},
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	// Save the new Invitation to the database
	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	// Set the ID of the new Invitation from the inserted document
	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// Accept is the resolver for the accept field.
func (r *mutationResolver) Accept(ctx context.Context, id string) (*model.Invitation, error) {
	// Convert string ID to ObjectID
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format")
	}

	// Fetch the invitation from the database
	filter := bson.M{"_id": objectID}
	var invitation *model.Invitation
	err = r.db.Collection(invitation.Collection()).FindOne(ctx, filter).Decode(&invitation)
	if err != nil {
		return nil, fmt.Errorf("invitation not found")
	}

	// Check if the invitation has expired
	now := time.Now()
	if now.After(time.Unix(int64(invitation.ExpiresAt.T), 0)) {
		return nil, fmt.Errorf("invitation has expired")
	}

	// Check if the invitation has already been accepted or declined
	if invitation.Status != "PENDING" {
		return nil, fmt.Errorf("invitation has already been %s", invitation.Status)
	}

	// Check if the user already exists
	var existingUser model.User
	if err := r.db.Collection("users").FindOne(ctx, bson.M{"email": invitation.Email}).Decode(&existingUser); err != nil && err != mongo.ErrNoDocuments {
		return nil, fmt.Errorf("error checking for existing user: %v", err)
	}

	// Random password for the new user
	password, err := utils.Base64(16, false)
	if err != nil {
		return nil, err
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %v", err)
	}

	// Create a new user
	newUser := &model.User{
		Email:           invitation.Email,
		Roles:           invitation.Roles,
		Password:        string(hashedPassword),
		Status:          pointer.String("ACTIVE"),
		EmailVerifiedAt: &primitive.Timestamp{T: uint32(time.Now().Unix())},
	}

	res, err := r.db.Collection(newUser.Collection()).InsertOne(ctx, newUser)
	if err != nil {
		return nil, err
	}

	newUser.ID = res.InsertedID.(primitive.ObjectID)

	// Update the invitation's status to ACCEPTED
	update := bson.M{"$set": bson.M{"status": "ACCEPTED"}}
	_, err = r.db.Collection(invitation.Collection()).UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Refresh the invitation object before returning (optional, based on use-case)
	err = r.db.Collection(invitation.Collection()).FindOne(ctx, filter).Decode(&invitation)
	if err != nil {
		return nil, err
	}

	return invitation, nil
}

// Decline is the resolver for the decline field.
func (r *mutationResolver) Decline(ctx context.Context, id string) (*model.Invitation, error) {
	// Convert string ID to ObjectID
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format")
	}

	// Fetch the invitation from the database
	filter := bson.M{"_id": objectID}
	var invitation model.Invitation
	err = r.db.Collection(invitation.Collection()).FindOne(ctx, filter).Decode(&invitation)
	if err != nil {
		return nil, fmt.Errorf("invitation not found")
	}

	// Check if the invitation has expired
	expiresAtTime := time.Unix(int64(invitation.ExpiresAt.T), 0) // Convert from Timestamp to time.Time
	now := time.Now()
	if now.After(expiresAtTime) {
		return nil, fmt.Errorf("invitation has expired")
	}

	// Check if the invitation has already been accepted or declined
	if invitation.Status != "PENDING" {
		return nil, fmt.Errorf("invitation has already been %s", invitation.Status)
	}

	// Update the invitation's status to DECLINED
	update := bson.M{"$set": bson.M{"status": "DECLINED"}}
	_, err = r.db.Collection(invitation.Collection()).UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Refresh the invitation object before returning (optional, based on use-case)
	err = r.db.Collection(invitation.Collection()).FindOne(ctx, filter).Decode(&invitation)
	if err != nil {
		return nil, err
	}

	return &invitation, nil
}

// DeleteInvitation is the resolver for the deleteInvitation field.
func (r *mutationResolver) DeleteInvitation(ctx context.Context, id string) (*bool, error) {
	var item *model.Invitation

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Find the appointment by _id and delete it
	result, err := r.db.Collection(item.Collection()).DeleteOne(ctx, bson.M{"_id": uid})
	if err != nil {
		return nil, err
	}

	if result.DeletedCount == 0 {
		return nil, nil
	}

	return pointer.True(), nil
}

// DeleteInvitations is the resolver for the deleteInvitations field.
func (r *mutationResolver) DeleteInvitations(ctx context.Context, ids []string) (*bool, error) {
	var itemsToDelete []primitive.ObjectID

	// Convert the list of IDs to ObjectIDs
	for _, id := range ids {
		objID, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		itemsToDelete = append(itemsToDelete, objID)
	}

	// Delete the invitations with the specified IDs
	result, err := r.db.Collection("invitations").DeleteMany(ctx, bson.M{"_id": bson.M{"$in": itemsToDelete}})
	if err != nil {
		return nil, err
	}

	if result.DeletedCount == 0 {
		return nil, nil
	}

	return pointer.True(), nil
}

// Invitations is the resolver for the invitations field.
func (r *queryResolver) Invitations(ctx context.Context, filter map[string]interface{}, limit *int, offset *int) (*model.Invitations, error) {
	var items []*model.Invitation

	opts := options.Find()
	if limit != nil {
		opts.SetLimit(int64(*limit))
	}

	if offset != nil {
		opts.SetSkip(int64(*offset))
	}

	//find all items
	cur, err := r.db.Collection(model.RoleCollection).Find(ctx, r.model.Query(filter), opts)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Invitation
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection(model.RoleCollection).CountDocuments(ctx, r.model.Query(filter), nil)
	if err != nil {
		return nil, err
	}

	return &model.Invitations{
		Count: int(count),
		Data:  items,
	}, nil
}

// Invitation is the resolver for the invitation field.
func (r *queryResolver) Invitation(ctx context.Context, id string) (*model.Invitation, error) {
	item := &model.Invitation{}
	col := r.db.Collection(model.InvitationCollection)
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := col.FindOne(ctx, bson.M{"_id": _id}).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// Invitation returns InvitationResolver implementation.
func (r *Resolver) Invitation() InvitationResolver { return &invitationResolver{r} }

type invitationResolver struct{ *Resolver }
