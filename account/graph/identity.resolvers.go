package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/dailytravel/x/account/graph/model"
	"github.com/dailytravel/x/account/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *identityResolver) ID(ctx context.Context, obj *model.Identity) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *identityResolver) User(ctx context.Context, obj *model.Identity) (*model.User, error) {
	var item *model.User
	err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Metadata is the resolver for the metadata field.
func (r *identityResolver) Metadata(ctx context.Context, obj *model.Identity) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// LinkIdentity is the resolver for the linkIdentity field.
func (r *mutationResolver) LinkIdentity(ctx context.Context, input model.NewIdentity) (*model.Identity, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Identity{
		UID:        *uid,
		Provider:   input.Provider,
		UserID:     input.UserID,
		Connection: input.Connection,
		IsSocial:   input.IsSocial,
		Status:     input.Status,
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item, nil)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UnlinkIdentity is the resolver for the unlinkIdentity field.
func (r *mutationResolver) UnlinkIdentity(ctx context.Context, id string) (*model.Identity, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var item *model.Identity
	err = r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id, "uid": uid}).Decode(&item)
	if err != nil {
		return nil, err
	}

	res, err := r.db.Collection(item.Collection()).DeleteOne(ctx, bson.M{"_id": _id, "uid": uid})
	if err != nil {
		return nil, err
	}

	if res.DeletedCount == 0 {
		return nil, err
	}

	return item, nil
}

// Identity is the resolver for the identity field.
func (r *queryResolver) Identity(ctx context.Context, id string) (*model.Identity, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	var item *model.Identity
	err = r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id, "uid": uid}).Decode(&item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Identities is the resolver for the identities field.
func (r *queryResolver) Identities(ctx context.Context) ([]*model.Identity, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	var items []*model.Identity
	cursor, err := r.db.Collection("identities").Find(ctx, bson.M{"uid": uid})
	if err != nil {
		return nil, err
	}

	err = cursor.All(ctx, &items)
	if err != nil {
		return nil, err
	}

	return items, nil
}

// Identity returns IdentityResolver implementation.
func (r *Resolver) Identity() IdentityResolver { return &identityResolver{r} }

type identityResolver struct{ *Resolver }
