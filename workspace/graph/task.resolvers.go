package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/workspace/graph/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: CreateTask - createTask"))
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTask) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// DeleteTasks is the resolver for the deleteTasks field.
func (r *mutationResolver) DeleteTasks(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTasks - deleteTasks"))
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, list string) (*model.Tasks, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// ID is the resolver for the id field.
func (r *taskResolver) ID(ctx context.Context, obj *model.Task) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Parent is the resolver for the parent field.
func (r *taskResolver) Parent(ctx context.Context, obj *model.Task) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Subtasks is the resolver for the subtasks field.
func (r *taskResolver) Subtasks(ctx context.Context, obj *model.Task) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Subtasks - subtasks"))
}

// List is the resolver for the list field.
func (r *taskResolver) List(ctx context.Context, obj *model.Task) (*model.List, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// StartDate is the resolver for the start_date field.
func (r *taskResolver) StartDate(ctx context.Context, obj *model.Task) (*string, error) {
	panic(fmt.Errorf("not implemented: StartDate - start_date"))
}

// DueDate is the resolver for the due_date field.
func (r *taskResolver) DueDate(ctx context.Context, obj *model.Task) (*string, error) {
	panic(fmt.Errorf("not implemented: DueDate - due_date"))
}

// Metadata is the resolver for the metadata field.
func (r *taskResolver) Metadata(ctx context.Context, obj *model.Task) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *taskResolver) CreatedAt(ctx context.Context, obj *model.Task) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *taskResolver) UpdatedAt(ctx context.Context, obj *model.Task) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// UID is the resolver for the uid field.
func (r *taskResolver) UID(ctx context.Context, obj *model.Task) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *taskResolver) CreatedBy(ctx context.Context, obj *model.Task) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *taskResolver) UpdatedBy(ctx context.Context, obj *model.Task) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Task returns TaskResolver implementation.
func (r *Resolver) Task() TaskResolver { return &taskResolver{r} }

type taskResolver struct{ *Resolver }
