package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/workspace/graph/model"
)

// CreateTime is the resolver for the createTime field.
func (r *mutationResolver) CreateTime(ctx context.Context, args model.TimeInput) (*model.Time, error) {
	panic(fmt.Errorf("not implemented: CreateTime - createTime"))
}

// UpdateTime is the resolver for the updateTime field.
func (r *mutationResolver) UpdateTime(ctx context.Context, args map[string]interface{}) (*model.Time, error) {
	panic(fmt.Errorf("not implemented: UpdateTime - updateTime"))
}

// DeleteTime is the resolver for the deleteTime field.
func (r *mutationResolver) DeleteTime(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTime - deleteTime"))
}

// DeleteTimes is the resolver for the deleteTimes field.
func (r *mutationResolver) DeleteTimes(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTimes - deleteTimes"))
}

// Time is the resolver for the time field.
func (r *queryResolver) Time(ctx context.Context, id string) (*model.Time, error) {
	panic(fmt.Errorf("not implemented: Time - time"))
}

// Times is the resolver for the times field.
func (r *queryResolver) Times(ctx context.Context, args map[string]interface{}) (*model.Times, error) {
	panic(fmt.Errorf("not implemented: Times - times"))
}

// ID is the resolver for the id field.
func (r *timeResolver) ID(ctx context.Context, obj *model.Time) (string, error) {
	return obj.ID.Hex(), nil
}

// Parent is the resolver for the parent field.
func (r *timeResolver) Parent(ctx context.Context, obj *model.Time) (*string, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// StartDate is the resolver for the start_date field.
func (r *timeResolver) StartDate(ctx context.Context, obj *model.Time) (string, error) {
	panic(fmt.Errorf("not implemented: StartDate - start_date"))
}

// EndDate is the resolver for the end_date field.
func (r *timeResolver) EndDate(ctx context.Context, obj *model.Time) (int, error) {
	panic(fmt.Errorf("not implemented: EndDate - end_date"))
}

// Metadata is the resolver for the metadata field.
func (r *timeResolver) Metadata(ctx context.Context, obj *model.Time) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *timeResolver) CreatedAt(ctx context.Context, obj *model.Time) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *timeResolver) UpdatedAt(ctx context.Context, obj *model.Time) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *timeResolver) CreatedBy(ctx context.Context, obj *model.Time) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *timeResolver) UpdatedBy(ctx context.Context, obj *model.Time) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Time returns TimeResolver implementation.
func (r *Resolver) Time() TimeResolver { return &timeResolver{r} }

type timeResolver struct{ *Resolver }
