// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Activities struct {
	Data  []*Activity `json:"data,omitempty"`
	Count int         `json:"count"`
}

type Logs struct {
	Data  []*Log `json:"data,omitempty"`
	Count int    `json:"count"`
}

type NewLog struct {
	UID       *string                `json:"uid,omitempty"`
	URL       string                 `json:"url"`
	Referrer  *string                `json:"referrer,omitempty"`
	Title     *string                `json:"title,omitempty"`
	Utm       map[string]interface{} `json:"utm,omitempty"`
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
	Status    string                 `json:"status"`
	ClientIP  *string                `json:"client_ip,omitempty"`
	UserAgent *string                `json:"user_agent,omitempty"`
}

type SearchInput struct {
	Locale    string                 `json:"locale"`
	Keyword   string                 `json:"keyword"`
	UserAgent *string                `json:"user_agent,omitempty"`
	ClientIP  *string                `json:"client_ip,omitempty"`
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
}

type Searches struct {
	Count int       `json:"count"`
	Data  []*Search `json:"data,omitempty"`
}

type UpdateLog struct {
	URL       *string                `json:"url,omitempty"`
	Referrer  *string                `json:"referrer,omitempty"`
	Title     *string                `json:"title,omitempty"`
	Utm       map[string]interface{} `json:"utm,omitempty"`
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
	Status    *string                `json:"status,omitempty"`
	ClientIP  *string                `json:"client_ip,omitempty"`
	UserAgent *string                `json:"user_agent,omitempty"`
}

type MailStatus string

const (
	MailStatusSent      MailStatus = "SENT"
	MailStatusFailed    MailStatus = "FAILED"
	MailStatusDelivered MailStatus = "DELIVERED"
	MailStatusOpened    MailStatus = "OPENED"
	MailStatusClicked   MailStatus = "CLICKED"
)

var AllMailStatus = []MailStatus{
	MailStatusSent,
	MailStatusFailed,
	MailStatusDelivered,
	MailStatusOpened,
	MailStatusClicked,
}

func (e MailStatus) IsValid() bool {
	switch e {
	case MailStatusSent, MailStatusFailed, MailStatusDelivered, MailStatusOpened, MailStatusClicked:
		return true
	}
	return false
}

func (e MailStatus) String() string {
	return string(e)
}

func (e *MailStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MailStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MailStatus", str)
	}
	return nil
}

func (e MailStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
