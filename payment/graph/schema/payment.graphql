type Payment {
  id: ID!
  amount: Float!
  currency: String!
  date: String!
  status: String!
  metadata: Map
  created_at: String!
  updated_at: String!
  invoice: ID!
  uid: ID!
  created_by: ID
  updated_by: ID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

input PaymentInput {
  amount: Float!
  currency: String!
  date: String!
  status: String!
  user: ID!
  invoice: ID!
  metadata: Map
}

input UpdatePayment {
  amount: Float
  currency: String
  date: String
  status: String
  user: ID
  invoice: ID
  metadata: Map
}

extend type Query {
  payment(id: ID!): Payment
  payments: [Payment]
}

extend type Mutation {
  createPayment(input: PaymentInput!): Payment
  updatePayment(id: ID!, input: UpdatePayment!): Payment
  deletePayment(id: ID!): Boolean
}
