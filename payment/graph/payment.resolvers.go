package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/payment/graph/model"
)

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input model.PaymentInput) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: CreatePayment - createPayment"))
}

// UpdatePayment is the resolver for the updatePayment field.
func (r *mutationResolver) UpdatePayment(ctx context.Context, id string, input model.UpdatePayment) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: UpdatePayment - updatePayment"))
}

// DeletePayment is the resolver for the deletePayment field.
func (r *mutationResolver) DeletePayment(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeletePayment - deletePayment"))
}

// ID is the resolver for the id field.
func (r *paymentResolver) ID(ctx context.Context, obj *model.Payment) (string, error) {
	return obj.ID.Hex(), nil
}

// Date is the resolver for the date field.
func (r *paymentResolver) Date(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// User is the resolver for the user field.
func (r *paymentResolver) User(ctx context.Context, obj *model.Payment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Invoice is the resolver for the invoice field.
func (r *paymentResolver) Invoice(ctx context.Context, obj *model.Payment) (*model.Invoice, error) {
	panic(fmt.Errorf("not implemented: Invoice - invoice"))
}

// Metadata is the resolver for the metadata field.
func (r *paymentResolver) Metadata(ctx context.Context, obj *model.Payment) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the created_at field.
func (r *paymentResolver) CreatedAt(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *paymentResolver) UpdatedAt(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// CreatedBy is the resolver for the created_by field.
func (r *paymentResolver) CreatedBy(ctx context.Context, obj *model.Payment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *paymentResolver) UpdatedBy(ctx context.Context, obj *model.Payment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Payment is the resolver for the payment field.
func (r *queryResolver) Payment(ctx context.Context, id string) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payment - payment"))
}

// Payments is the resolver for the payments field.
func (r *queryResolver) Payments(ctx context.Context) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// Payment returns PaymentResolver implementation.
func (r *Resolver) Payment() PaymentResolver { return &paymentResolver{r} }

type paymentResolver struct{ *Resolver }
