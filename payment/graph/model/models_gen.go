// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID string `json:"id"`
}

func (Comment) IsEntity() {}

type Follow struct {
	ID string `json:"id"`
}

func (Follow) IsEntity() {}

type Invoice struct {
	ID string `json:"id"`
}

func (Invoice) IsEntity() {}

type PaymentInput struct {
	Amount   float64                `json:"amount"`
	Currency string                 `json:"currency"`
	Date     string                 `json:"date"`
	Status   string                 `json:"status"`
	User     string                 `json:"user"`
	Invoice  string                 `json:"invoice"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type Reaction struct {
	ID string `json:"id"`
}

func (Reaction) IsEntity() {}

type UpdatePayment struct {
	Amount   *float64               `json:"amount,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Date     *string                `json:"date,omitempty"`
	Status   *string                `json:"status,omitempty"`
	User     *string                `json:"user,omitempty"`
	Invoice  *string                `json:"invoice,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type User struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (User) IsEntity() {}

type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "PENDING"
	PaymentStatusCompleted PaymentStatus = "COMPLETED"
	PaymentStatusCancelled PaymentStatus = "CANCELLED"
	PaymentStatusRefunded  PaymentStatus = "REFUNDED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusPending,
	PaymentStatusCompleted,
	PaymentStatusCancelled,
	PaymentStatusRefunded,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusPending, PaymentStatusCompleted, PaymentStatusCancelled, PaymentStatusRefunded:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
