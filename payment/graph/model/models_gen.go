// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	Street  string `json:"street"`
	City    string `json:"city"`
	State   string `json:"state"`
	Zip     string `json:"zip"`
	Country string `json:"country"`
}

type AddressInput struct {
	Street  string `json:"street"`
	City    string `json:"city"`
	State   string `json:"state"`
	Zip     string `json:"zip"`
	Country string `json:"country"`
}

type Cards struct {
	Count int     `json:"count"`
	Data  []*Card `json:"data,omitempty"`
}

type NewCardInput struct {
	Name     string                 `json:"name"`
	Number   string                 `json:"number"`
	ExpMonth int                    `json:"expMonth"`
	ExpYear  int                    `json:"expYear"`
	Cvv      string                 `json:"cvv"`
	Billing  map[string]interface{} `json:"billing"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type NewTransaction struct {
	Type        string                 `json:"type"`
	Status      string                 `json:"status"`
	Amount      float64                `json:"amount"`
	Currency    string                 `json:"currency"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Date        string                 `json:"date"`
	Description string                 `json:"description"`
	Card        string                 `json:"card"`
	UID         string                 `json:"uid"`
	Wallet      string                 `json:"wallet"`
}

type NewWallet struct {
	Balance  float64                `json:"balance"`
	Currency string                 `json:"currency"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type Transactions struct {
	Data  []*Transaction `json:"data,omitempty"`
	Count int            `json:"count"`
}

type UpdateCardInput struct {
	Name     *string                `json:"name,omitempty"`
	ExpMonth *int                   `json:"expMonth,omitempty"`
	ExpYear  *int                   `json:"expYear,omitempty"`
	Cvv      *string                `json:"cvv,omitempty"`
	Billing  map[string]interface{} `json:"billing,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateTransaction struct {
	Description *string                `json:"description,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateWallet struct {
	Balance  *float64               `json:"balance,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type User struct {
	ID      string    `json:"id"`
	Wallets []*Wallet `json:"wallets,omitempty"`
}

func (User) IsEntity() {}

type Wallets struct {
	Data  []*Wallet `json:"data,omitempty"`
	Count int       `json:"count"`
}

type TransactionMethod string

const (
	TransactionMethodCreditCard TransactionMethod = "CREDIT_CARD"
	TransactionMethodDebitCard  TransactionMethod = "DEBIT_CARD"
	TransactionMethodPaypal     TransactionMethod = "PAYPAL"
	TransactionMethodStripe     TransactionMethod = "STRIPE"
)

var AllTransactionMethod = []TransactionMethod{
	TransactionMethodCreditCard,
	TransactionMethodDebitCard,
	TransactionMethodPaypal,
	TransactionMethodStripe,
}

func (e TransactionMethod) IsValid() bool {
	switch e {
	case TransactionMethodCreditCard, TransactionMethodDebitCard, TransactionMethodPaypal, TransactionMethodStripe:
		return true
	}
	return false
}

func (e TransactionMethod) String() string {
	return string(e)
}

func (e *TransactionMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionMethod", str)
	}
	return nil
}

func (e TransactionMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionStatus string

const (
	TransactionStatusPending   TransactionStatus = "PENDING"
	TransactionStatusCompleted TransactionStatus = "COMPLETED"
	TransactionStatusFailed    TransactionStatus = "FAILED"
	TransactionStatusRefunded  TransactionStatus = "REFUNDED"
)

var AllTransactionStatus = []TransactionStatus{
	TransactionStatusPending,
	TransactionStatusCompleted,
	TransactionStatusFailed,
	TransactionStatusRefunded,
}

func (e TransactionStatus) IsValid() bool {
	switch e {
	case TransactionStatusPending, TransactionStatusCompleted, TransactionStatusFailed, TransactionStatusRefunded:
		return true
	}
	return false
}

func (e TransactionStatus) String() string {
	return string(e)
}

func (e *TransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStatus", str)
	}
	return nil
}

func (e TransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
