package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/payment/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateWallet is the resolver for the createWallet field.
func (r *mutationResolver) CreateWallet(ctx context.Context, input model.NewWallet) (*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: CreateWallet - createWallet"))
}

// UpdateWallet is the resolver for the updateWallet field.
func (r *mutationResolver) UpdateWallet(ctx context.Context, id string, input model.UpdateWallet) (*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: UpdateWallet - updateWallet"))
}

// DeleteWallet is the resolver for the deleteWallet field.
func (r *mutationResolver) DeleteWallet(ctx context.Context, id string) (*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: DeleteWallet - deleteWallet"))
}

// Wallet is the resolver for the wallet field.
func (r *queryResolver) Wallet(ctx context.Context, id string) (*model.Wallet, error) {
	var item *model.Wallet
	if err := r.db.Collection("wallets").FindOne(ctx, bson.M{"_id": id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Wallets is the resolver for the wallets field.
func (r *queryResolver) Wallets(ctx context.Context, stages map[string]interface{}) (*model.Wallets, error) {
	pipeline := bson.A{}

	// Add additional stages to the pipeline
	for key, value := range stages {
		stage := bson.D{{Key: key, Value: value}}
		pipeline = append(pipeline, stage)
	}

	cursor, err := r.db.Collection("wallets").Aggregate(ctx, pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var items []*model.Wallet

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return &model.Wallets{
		Count: int(cursor.RemainingBatchLength()),
		Data:  items,
	}, nil
}

// ID is the resolver for the id field.
func (r *walletResolver) ID(ctx context.Context, obj *model.Wallet) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *walletResolver) UID(ctx context.Context, obj *model.Wallet) (string, error) {
	return obj.UID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *walletResolver) Metadata(ctx context.Context, obj *model.Wallet) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *walletResolver) Created(ctx context.Context, obj *model.Wallet) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *walletResolver) Updated(ctx context.Context, obj *model.Wallet) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Cards is the resolver for the cards field.
func (r *walletResolver) Cards(ctx context.Context, obj *model.Wallet) ([]*model.Card, error) {
	var items []*model.Card

	cursor, err := r.db.Collection("cards").Find(ctx, bson.M{"wallet": obj.ID})
	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Transactions is the resolver for the transactions field.
func (r *walletResolver) Transactions(ctx context.Context, obj *model.Wallet) ([]*model.Transaction, error) {
	var items []*model.Transaction

	cursor, err := r.db.Collection("transactions").Find(ctx, bson.M{"wallet": obj.ID})
	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	for cursor.Next(context.TODO()) {
		var result model.Transaction
		if err := cursor.Decode(&result); err != nil {
			return nil, err
		}
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return items, nil
}

// Wallet returns WalletResolver implementation.
func (r *Resolver) Wallet() WalletResolver { return &walletResolver{r} }

type walletResolver struct{ *Resolver }
