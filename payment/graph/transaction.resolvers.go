package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/payment/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input *model.NewTransaction) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: CreateTransaction - createTransaction"))
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id string, input *model.UpdateTransaction) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: UpdateTransaction - updateTransaction"))
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTransaction - deleteTransaction"))
}

// DeleteTransactions is the resolver for the deleteTransactions field.
func (r *mutationResolver) DeleteTransactions(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTransactions - deleteTransactions"))
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, stages map[string]interface{}) (*model.Transactions, error) {
	pipeline := bson.A{}

	// Add additional stages to the pipeline
	for key, value := range stages {
		stage := bson.D{{Key: key, Value: value}}
		pipeline = append(pipeline, stage)
	}

	cursor, err := r.db.Collection("transactions").Aggregate(ctx, pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var items []*model.Transaction

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return &model.Transactions{
		Count: int(cursor.RemainingBatchLength()),
		Data:  items,
	}, nil
}

// Transaction is the resolver for the transaction field.
func (r *queryResolver) Transaction(ctx context.Context, id string) (*model.Transaction, error) {
	var item *model.Transaction
	if err := r.db.Collection("transactions").FindOne(ctx, bson.M{"_id": id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// ID is the resolver for the id field.
func (r *transactionResolver) ID(ctx context.Context, obj *model.Transaction) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *transactionResolver) Metadata(ctx context.Context, obj *model.Transaction) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Date is the resolver for the date field.
func (r *transactionResolver) Date(ctx context.Context, obj *model.Transaction) (string, error) {
	return obj.Date.Time().Format(time.RFC3339), nil
}

// Created is the resolver for the created field.
func (r *transactionResolver) Created(ctx context.Context, obj *model.Transaction) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *transactionResolver) Updated(ctx context.Context, obj *model.Transaction) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Card is the resolver for the card field.
func (r *transactionResolver) Card(ctx context.Context, obj *model.Transaction) (*model.Card, error) {
	var item *model.Card
	if err := r.db.Collection("cards").FindOne(ctx, bson.M{"card": obj.Card}).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// UID is the resolver for the uid field.
func (r *transactionResolver) UID(ctx context.Context, obj *model.Transaction) (string, error) {
	return obj.UID.Hex(), nil
}

// Wallet is the resolver for the wallet field.
func (r *transactionResolver) Wallet(ctx context.Context, obj *model.Transaction) (*model.Wallet, error) {
	var item *model.Wallet
	if err := r.db.Collection("wallets").FindOne(ctx, bson.M{"wallet": obj.Wallet}).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

type transactionResolver struct{ *Resolver }
