package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"

	"github.com/dailytravel/x/community/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// FindCommentByID is the resolver for the findCommentByID field.
func (r *entityResolver) FindCommentByID(ctx context.Context, id string) (*model.Comment, error) {
	var item *model.Comment

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// FindContactByID is the resolver for the findContactByID field.
func (r *entityResolver) FindContactByID(ctx context.Context, id string) (*model.Contact, error) {
	return &model.Contact{
		ID: id,
	}, nil
}

// FindContentByID is the resolver for the findContentByID field.
func (r *entityResolver) FindContentByID(ctx context.Context, id string) (*model.Content, error) {
	return &model.Content{
		ID: id,
	}, nil
}

// FindExpenseByID is the resolver for the findExpenseByID field.
func (r *entityResolver) FindExpenseByID(ctx context.Context, id string) (*model.Expense, error) {
	return &model.Expense{
		ID: id,
	}, nil
}

// FindFileByID is the resolver for the findFileByID field.
func (r *entityResolver) FindFileByID(ctx context.Context, id string) (*model.File, error) {
	return &model.File{
		ID: id,
	}, nil
}

// FindQuoteByID is the resolver for the findQuoteByID field.
func (r *entityResolver) FindQuoteByID(ctx context.Context, id string) (*model.Quote, error) {
	return &model.Quote{
		ID: id,
	}, nil
}

// FindReactionByID is the resolver for the findReactionByID field.
func (r *entityResolver) FindReactionByID(ctx context.Context, id string) (*model.Reaction, error) {
	var item *model.Reaction

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// FindShareByID is the resolver for the findShareByID field.
func (r *entityResolver) FindShareByID(ctx context.Context, id string) (*model.Share, error) {
	var item *model.Share

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// FindTaskByID is the resolver for the findTaskByID field.
func (r *entityResolver) FindTaskByID(ctx context.Context, id string) (*model.Task, error) {
	return &model.Task{
		ID: id}, nil
}

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id string) (*model.User, error) {
	return &model.User{
		ID: id,
	}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
