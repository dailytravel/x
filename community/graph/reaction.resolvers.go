package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/community/graph/model"
	"github.com/dailytravel/x/community/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateReaction is the resolver for the createReaction field.
func (r *mutationResolver) CreateReaction(ctx context.Context, input model.NewReaction) (*model.Reaction, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert object ID to primitive.ObjectID
	objectID, ok := input.Object["id"].(string)
	if !ok {
		return nil, fmt.Errorf("invalid object ID")
	}
	_id, err := primitive.ObjectIDFromHex(objectID)
	if err != nil {
		return nil, err
	}

	reaction := &model.Reaction{
		UID:    *uid,
		Action: input.Action,
		Object: model.Object{ID: _id, Collection: input.Object["collection"].(string)},
	}

	// Perform the insertion into the database
	_, err = r.db.Collection("reactions").InsertOne(ctx, reaction)
	if err != nil {
		return nil, err
	}

	return reaction, nil
}

// UpdateReaction is the resolver for the updateReaction field.
func (r *mutationResolver) UpdateReaction(ctx context.Context, id string, input model.UpdateReaction) (*model.Reaction, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Fetch the existing reaction entry
	filter := bson.M{"_id": _id, "uid": uid}
	item := &model.Reaction{
		Action: input.Action,
	}
	err = r.db.Collection("reactions").FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Perform the update in the database
	update := bson.M{
		"$set": item,
	}
	_, err = r.db.Collection("reactions").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// Reaction is the resolver for the reaction field.
func (r *queryResolver) Reaction(ctx context.Context, object map[string]interface{}) (*model.Reaction, error) {
	var item *model.Reaction
	col := r.db.Collection(item.Collection())

	// Convert object to primitive.ObjectID and set it to object.ID
	objectID, err := primitive.ObjectIDFromHex(object["id"].(string))
	if err != nil {
		return nil, err
	}

	objectType, ok := object["type"].(string)
	if !ok {
		return nil, fmt.Errorf("object type assertion failed")
	}

	filter := bson.M{"object": bson.M{
		"_id":  objectID,
		"type": objectType,
	}}

	err = col.FindOne(ctx, filter).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no reaction document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Reactions is the resolver for the reactions field.
func (r *queryResolver) Reactions(ctx context.Context, args map[string]interface{}) (*model.Reactions, error) {
	col := r.db.Collection("reactions")
	var items []*model.Reaction

	// Build the filter based on the provided arguments
	filter := bson.M{}

	if objectID, ok := args["objectID"].(string); ok {
		objectObjID, err := primitive.ObjectIDFromHex(objectID)
		if err != nil {
			return nil, fmt.Errorf("invalid objectID: %v", err)
		}
		filter["object._id"] = objectObjID
	}

	if objectType, ok := args["objectType"].(string); ok {
		filter["object.collection"] = objectType
	}

	cursor, err := col.Find(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error querying reactions: %v", err)
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var reaction model.Reaction
		if err := cursor.Decode(&reaction); err != nil {
			return nil, fmt.Errorf("error decoding reaction: %v", err)
		}
		items = append(items, &reaction)
	}

	if err := cursor.Err(); err != nil {
		return nil, fmt.Errorf("cursor error: %v", err)
	}

	// Get total count
	count, err := col.CountDocuments(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error getting count: %v", err)
	}

	return &model.Reactions{Data: items, Count: int(count)}, nil
}

// ID is the resolver for the id field.
func (r *reactionResolver) ID(ctx context.Context, obj *model.Reaction) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *reactionResolver) UID(ctx context.Context, obj *model.Reaction) (string, error) {
	return obj.UID.Hex(), nil
}

// Object is the resolver for the object field.
func (r *reactionResolver) Object(ctx context.Context, obj *model.Reaction) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Object - object"))
}

// Created is the resolver for the created field.
func (r *reactionResolver) Created(ctx context.Context, obj *model.Reaction) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *reactionResolver) Updated(ctx context.Context, obj *model.Reaction) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Reaction returns ReactionResolver implementation.
func (r *Resolver) Reaction() ReactionResolver { return &reactionResolver{r} }

type reactionResolver struct{ *Resolver }
