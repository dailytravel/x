type Share @key(fields: "id") {
  id: ID!
  uid: ID!
  object: Map!
  permission: String!
  metadata: Map
  status: String!
  created: String!
  updated: String!
}

enum ShareStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}

type Shares {
  data: [Share]
  count: Int!
}

input ShareInput {
  uid: ID!
  object: Map!
  permission: String!
  metadata: Map
  status: String!
  created: String!
  updated: String!
}

input ShareUpdateInput {
  uid: ID
  object: Map
  permission: String
  metadata: Map
  status: String
  created: String!
  updated: String!
}

extend type Query {
  share(id: ID!): Share
  shares(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Shares
}

extend type Mutation {
  createShare(input: ShareInput!): Share
  updateShare(id: ID!, input: ShareUpdateInput!): Share
  deleteShare(id: ID!): Boolean!
  deleteShares(ids: [ID!]!): Boolean!
}
