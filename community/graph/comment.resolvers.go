package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/community/auth"
	"github.com/dailytravel/x/community/graph/model"
	"github.com/dailytravel/x/community/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *model.Comment) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *commentResolver) UID(ctx context.Context, obj *model.Comment) (string, error) {
	return obj.UID.Hex(), nil
}

// Body is the resolver for the body field.
func (r *commentResolver) Body(ctx context.Context, obj *model.Comment) (string, error) {
	locale := auth.Locale(ctx)
	if body, ok := obj.Body[*locale].(string); ok {
		return body, nil
	}

	return obj.Body[obj.Locale].(string), nil
}

// Metadata is the resolver for the metadata field.
func (r *commentResolver) Metadata(ctx context.Context, obj *model.Comment) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *commentResolver) CreatedAt(ctx context.Context, obj *model.Comment) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *commentResolver) UpdatedAt(ctx context.Context, obj *model.Comment) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Parent is the resolver for the parent field.
func (r *commentResolver) Parent(ctx context.Context, obj *model.Comment) (*model.Comment, error) {
	var item *model.Comment

	filter := bson.M{"parent": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment) ([]*model.Comment, error) {
	var items []*model.Comment
	filter := bson.M{"parent": obj.ID}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	cursor, err := r.db.Collection(obj.Collection()).Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Commentable is the resolver for the commentable field.
func (r *commentResolver) Commentable(ctx context.Context, obj *model.Comment) (map[string]interface{}, error) {
	var item map[string]interface{}

	err := r.db.Collection(obj.Commentable.Type).FindOne(ctx, bson.M{"_id": obj.Commentable.ID}).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Reactions is the resolver for the reactions field.
func (r *commentResolver) Reactions(ctx context.Context, obj *model.Comment) ([]*model.Reaction, error) {
	var items []*model.Reaction

	filter := bson.M{"reactable._id": obj.ID, "reactable.type": obj.Collection()}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	cursor, err := r.db.Collection("reactions").Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// CreatedBy is the resolver for the created_by field.
func (r *commentResolver) CreatedBy(ctx context.Context, obj *model.Comment) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *commentResolver) UpdatedBy(ctx context.Context, obj *model.Comment) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(input.Commentable["id"].(string))
	if err != nil {
		return nil, err
	}

	item := &model.Comment{
		UID:    *uid,
		Locale: input.Locale,
		Commentable: model.Commentable{
			ID:   _id,
			Type: input.Commentable["type"].(string),
		},
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	if input.Parent != nil {
		parent, err := primitive.ObjectIDFromHex(*input.Parent)
		if err != nil {
			return nil, err
		}

		item.Parent = parent
	}

	if input.Body != nil {
		item.Body[input.Locale] = input.Body
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item, nil)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, input model.UpdateComment) (*model.Comment, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	item := &model.Comment{}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item)
	if err != nil {
		return nil, err
	}

	if input.Body != nil {
		item.Body[input.Locale] = input.Body
	}

	item.UpdatedBy = uid

	// Update the contact
	if _, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, bson.M{"$set": item}, nil); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (map[string]interface{}, error) {
	var item *model.Comment
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the comment by _id and delete it
	update := bson.M{
		"$set": bson.M{
			"deleted_at": time.Now(),
			"updated_by": uid,
		},
	}
	result := r.db.Collection("comments").FindOneAndUpdate(
		ctx,
		bson.M{"_id": _id},
		update,
	)
	err = result.Decode(&item)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// DeleteComments is the resolver for the deleteComments field.
func (r *mutationResolver) DeleteComments(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	var deletedCount int64

	// Convert string IDs to ObjectIDs
	objectIDs := make([]primitive.ObjectID, len(ids))
	for i, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs[i] = _id
	}

	// Update all comments with the given IDs
	update := bson.M{
		"$set": bson.M{
			"deleted_at": time.Now(),
			"updated_by": uid,
		},
	}
	result, err := r.db.Collection("comments").UpdateMany(
		ctx,
		bson.M{"_id": bson.M{"$in": objectIDs}},
		update,
	)
	if err != nil {
		return nil, err
	}

	if result.MatchedCount > 0 {
		deletedCount = result.ModifiedCount
	}

	return map[string]interface{}{
		"deletedCount": deletedCount,
	}, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, args map[string]interface{}) (*model.Comments, error) {
	var items []*model.Comment
	//find all items
	cur, err := r.db.Collection("comments").Find(ctx, utils.Query(args), utils.Options(args))
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Comment
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("comments").CountDocuments(ctx, utils.Query(args), nil)
	if err != nil {
		return nil, err
	}

	return &model.Comments{
		Count: int(count),
		Data:  items,
	}, nil
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	var item *model.Comment
	col := r.db.Collection(item.Collection())

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	err = col.FindOne(ctx, filter).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
