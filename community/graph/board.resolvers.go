package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"log"

	"github.com/dailytravel/x/community/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Shares is the resolver for the shares field.
func (r *boardResolver) Shares(ctx context.Context, obj *model.Board) ([]*model.Share, error) {
	var items []*model.Share

	_id, err := primitive.ObjectIDFromHex(obj.ID)
	if err != nil {
		return nil, err
	}

	cursor, err := r.db.Collection("shares").Find(ctx, bson.M{"object._id": _id, "object.type": "boards"})
	if err != nil {
		return nil, fmt.Errorf("error finding shares: %v", err)
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var item *model.Share
		if err := cursor.Decode(&item); err != nil {
			return nil, fmt.Errorf("error decoding share: %v", err)
		}
		items = append(items, item)
	}

	if err := cursor.Err(); err != nil {
		return nil, fmt.Errorf("error iterating through shares: %v", err)
	}

	log.Println("Shares", items)

	return items, nil
}

// Board returns BoardResolver implementation.
func (r *Resolver) Board() BoardResolver { return &boardResolver{r} }

type boardResolver struct{ *Resolver }
