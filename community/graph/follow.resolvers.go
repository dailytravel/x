package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"time"

	"github.com/dailytravel/x/community/graph/model"
	"github.com/dailytravel/x/community/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the id field.
func (r *followResolver) ID(ctx context.Context, obj *model.Follow) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *followResolver) UID(ctx context.Context, obj *model.Follow) (string, error) {
	return obj.UID.Hex(), nil
}

// Followable is the resolver for the followable field.
func (r *followResolver) Followable(ctx context.Context, obj *model.Follow) (map[string]interface{}, error) {
	var item map[string]interface{}

	err := r.db.Collection(obj.Followable.Type).FindOne(ctx, bson.M{"_id": obj.Followable.ID}).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *followResolver) CreatedAt(ctx context.Context, obj *model.Follow) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *followResolver) UpdatedAt(ctx context.Context, obj *model.Follow) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *followResolver) CreatedBy(ctx context.Context, obj *model.Follow) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *followResolver) UpdatedBy(ctx context.Context, obj *model.Follow) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// CreateFollow is the resolver for the createFollow field.
func (r *mutationResolver) CreateFollow(ctx context.Context, input model.NewFollow) (*model.Follow, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(input.Followable["id"].(string))
	if err != nil {
		return nil, err
	}

	follow := &model.Follow{
		UID:    *uid,
		Role:   input.Role,
		Status: input.Status,
		Followable: model.Followable{
			ID:   _id,
			Type: input.Followable["type"].(string),
		},
	}

	// Perform the insertion into the database
	_, err = r.db.Collection("follows").InsertOne(ctx, follow)
	if err != nil {
		return nil, err
	}

	return follow, nil
}

// UpdateFollow is the resolver for the updateFollow field.
func (r *mutationResolver) UpdateFollow(ctx context.Context, id string, input model.UpdateFollow) (*model.Follow, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Fetch the existing follow entry
	filter := bson.M{"_id": _id, "uid": uid}
	existingFollow := &model.Follow{}
	err = r.db.Collection("follows").FindOne(ctx, filter).Decode(existingFollow)
	if err != nil {
		return nil, err
	}

	// Update fields based on input
	if input.Role != nil {
		existingFollow.Role = *input.Role
	}
	if input.Status != nil {
		existingFollow.Status = *input.Status
	}

	// Perform the update in the database
	update := bson.M{
		"$set": existingFollow,
	}
	_, err = r.db.Collection("follows").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return existingFollow, nil
}

// DeleteFollow is the resolver for the deleteFollow field.
func (r *mutationResolver) DeleteFollow(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Delete the follow entry
	filter := bson.M{"_id": _id, "uid": uid}
	result, err := r.db.Collection("follows").DeleteOne(ctx, filter)
	if err != nil {
		return nil, err
	}

	if result.DeletedCount == 0 {
		return map[string]interface{}{
			"deleted": false,
			"error":   "follow not found",
		}, nil
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// Follows is the resolver for the follows field.
func (r *queryResolver) Follows(ctx context.Context, ids []string) ([]*model.Follow, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert string IDs to ObjectIDs
	objectIDs := make([]primitive.ObjectID, len(ids))
	for i, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs[i] = _id
	}

	// Query for follows based on the provided IDs and the user's UID
	filter := bson.M{"_id": bson.M{"$in": objectIDs}, "uid": uid}
	cursor, err := r.db.Collection("follows").Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var follows []*model.Follow
	for cursor.Next(ctx) {
		var follow model.Follow
		if err := cursor.Decode(&follow); err != nil {
			return nil, err
		}
		follows = append(follows, &follow)
	}
	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return follows, nil
}

// Follow is the resolver for the follow field.
func (r *queryResolver) Follow(ctx context.Context, id string) (*model.Follow, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Query for a single follow entry based on the provided ID and the user's UID
	filter := bson.M{"_id": _id, "uid": uid}
	result := r.db.Collection("follows").FindOne(ctx, filter)
	if result.Err() != nil {
		if result.Err() == mongo.ErrNoDocuments {
			return nil, nil // Follow not found, return nil without an error
		}
		return nil, result.Err()
	}

	var follow model.Follow
	if err := result.Decode(&follow); err != nil {
		return nil, err
	}

	return &follow, nil
}

// Follow returns FollowResolver implementation.
func (r *Resolver) Follow() FollowResolver { return &followResolver{r} }

type followResolver struct{ *Resolver }
