package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/base/graph/model"
	"github.com/dailytravel/x/base/internal/utils"
	"github.com/typesense/typesense-go/typesense/api/pointer"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *boardResolver) ID(ctx context.Context, obj *model.Board) (string, error) {
	return obj.ID.Hex(), nil
}

// Portfolio is the resolver for the portfolio field.
func (r *boardResolver) Portfolio(ctx context.Context, obj *model.Board) (*model.Portfolio, error) {
	var item *model.Portfolio

	filter := bson.M{"_id": obj.Portfolio}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// End is the resolver for the end field.
func (r *boardResolver) End(ctx context.Context, obj *model.Board) (*string, error) {
	if obj.End == nil {
		return nil, nil
	}

	return pointer.String(obj.End.Time().Format(time.RFC3339)), nil
}

// Metadata is the resolver for the metadata field.
func (r *boardResolver) Metadata(ctx context.Context, obj *model.Board) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Lists is the resolver for the lists field.
func (r *boardResolver) Lists(ctx context.Context, obj *model.Board) ([]*model.List, error) {
	var items []*model.List

	opts := options.Find().SetSort(bson.M{"order": 1})

	cursor, err := r.db.Collection("lists").Find(ctx, bson.M{"board": obj.ID}, opts)
	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	if err = cursor.All(context.Background(), &items); err != nil {
		return nil, err
	}

	return items, nil
}

// UID is the resolver for the uid field.
func (r *boardResolver) UID(ctx context.Context, obj *model.Board) (string, error) {
	return obj.UID.Hex(), nil
}

// Created is the resolver for the created field.
func (r *boardResolver) Created(ctx context.Context, obj *model.Board) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *boardResolver) Updated(ctx context.Context, obj *model.Board) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Collaborators is the resolver for the collaborators field.
func (r *boardResolver) Collaborators(ctx context.Context, obj *model.Board) ([]*model.Collaborator, error) {
	panic(fmt.Errorf("not implemented: Collaborators - collaborators"))
}

// CreateBoard is the resolver for the createBoard field.
func (r *mutationResolver) CreateBoard(ctx context.Context, input model.NewBoard) (*model.Board, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Board{
		UID:   *uid,
		Title: input.Title,
	}

	if input.Description != nil {
		item.Description = input.Description
	}

	if input.Order != nil {
		item.Order = input.Order
	}

	if input.Starred != nil {
		item.Starred = *input.Starred
	}

	if input.IsTemplate != nil {
		item.IsTemplate = *input.IsTemplate
	}

	if input.Portfolio != nil {
		portfolioID, err := primitive.ObjectIDFromHex(*input.Portfolio)
		if err != nil {
			return nil, err
		}
		item.Portfolio = &portfolioID
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if input.Metadata != nil {
		if item.Metadata == nil {
			item.Metadata = make(map[string]interface{})
		}

		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateBoard is the resolver for the updateBoard field.
func (r *mutationResolver) UpdateBoard(ctx context.Context, id string, input model.UpdateBoard) (*model.Board, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var item *model.Board
	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	if input.Title != nil {
		item.Title = *input.Title
	}

	if input.Description != nil {
		item.Description = input.Description
	}

	if input.Starred != nil {
		item.Starred = *input.Starred
	}

	if input.IsTemplate != nil {
		item.IsTemplate = *input.IsTemplate
	}

	if input.Portfolio != nil {
		portfolioID, err := primitive.ObjectIDFromHex(*input.Portfolio)
		if err != nil {
			return nil, err
		}
		item.Portfolio = &portfolioID
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if input.Metadata != nil {
		if item.Metadata == nil {
			item.Metadata = make(map[string]interface{})
		}

		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}
	// Execute the update in a single database call
	result, err := r.db.Collection(item.Collection()).UpdateOne(ctx, bson.M{"_id": _id}, bson.M{"$set": item})
	if err != nil {
		return nil, err
	}

	if result.ModifiedCount == 0 {
		// Handle the case when no document was updated
		return nil, errors.New("no board document was updated")
	}

	// Return the updated board
	return item, nil
}

// DeleteBoard is the resolver for the deleteBoard field.
func (r *mutationResolver) DeleteBoard(ctx context.Context, id string) (map[string]interface{}, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	result, err := r.db.Collection("boards").DeleteOne(ctx, filter)
	if err != nil {
		return nil, err
	}

	if result.DeletedCount == 0 {
		return map[string]interface{}{
			"deleted": false,
			"error":   "board not found",
		}, nil
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// DeleteBoards is the resolver for the deleteBoards field.
func (r *mutationResolver) DeleteBoards(ctx context.Context, ids []string) (map[string]interface{}, error) {
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	result, err := r.db.Collection("boards").DeleteMany(ctx, filter)
	if err != nil {
		return nil, err
	}

	if result.DeletedCount == 0 {
		return map[string]interface{}{
			"deleted": false,
			"error":   "no boards were deleted",
		}, nil
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// Board is the resolver for the board field.
func (r *queryResolver) Board(ctx context.Context, id string) (*model.Board, error) {
	var item *model.Board

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Boards is the resolver for the boards field.
func (r *queryResolver) Boards(ctx context.Context, stages map[string]interface{}) (*model.Boards, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	pipeline := bson.A{
		bson.D{{Key: "$match", Value: bson.D{
			{Key: "shares.object._id", Value: bson.D{{Key: "$in", Value: bson.A{"$_id"}}}},
			{Key: "shares.object.type", Value: "boards"},
			{Key: "shares.uid", Value: uid},
		}}},
	}

	for key, value := range stages {
		stage := bson.D{{Key: key, Value: value}}
		pipeline = append(pipeline, stage)
	}

	cursor, err := r.db.Collection("boards").Aggregate(ctx, pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var items []*model.Board

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return &model.Boards{
		Count: int(cursor.RemainingBatchLength()),
		Data:  items,
	}, nil
}

// Board returns BoardResolver implementation.
func (r *Resolver) Board() BoardResolver { return &boardResolver{r} }

type boardResolver struct{ *Resolver }
