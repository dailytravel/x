package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/base/graph/model"
	"github.com/dailytravel/x/base/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreatePortfolio is the resolver for the createPortfolio field.
func (r *mutationResolver) CreatePortfolio(ctx context.Context, input model.NewPortfolio) (*model.Portfolio, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Portfolio{
		UID: *uid,
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdatePortfolio is the resolver for the updatePortfolio field.
func (r *mutationResolver) UpdatePortfolio(ctx context.Context, id string, input model.UpdatePortfolio) (*model.Portfolio, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Fetch the existing board
	item := &model.Portfolio{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Perform the update in the database
	update := bson.M{
		"$set": item,
	}
	_, err = r.db.Collection(item.Collection()).UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// DeletePortfolio is the resolver for the deletePortfolio field.
func (r *mutationResolver) DeletePortfolio(ctx context.Context, id string) (map[string]interface{}, error) {
	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create a filter based on the ID
	filter := bson.M{"_id": _id}

	// Perform the delete operation
	result, err := r.db.Collection("portfolios").DeleteOne(ctx, filter)
	if err != nil {
		return nil, err
	}

	// Create and return the response
	response := map[string]interface{}{
		"status":       "success",
		"deletedCount": result.DeletedCount,
	}
	return response, nil
}

// DeletePortfolios is the resolver for the deletePortfolios field.
func (r *mutationResolver) DeletePortfolios(ctx context.Context, ids []string) (map[string]interface{}, error) {
	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Perform the delete operation
	result, err := r.db.Collection("portfolios").DeleteMany(ctx, filter)
	if err != nil {
		return nil, err
	}

	// Create and return the response
	response := map[string]interface{}{
		"status":       "success",
		"deletedCount": result.DeletedCount,
	}
	return response, nil
}

// ID is the resolver for the id field.
func (r *portfolioResolver) ID(ctx context.Context, obj *model.Portfolio) (string, error) {
	return obj.ID.Hex(), nil
}

// Boards is the resolver for the boards field.
func (r *portfolioResolver) Boards(ctx context.Context, obj *model.Portfolio) ([]*model.Board, error) {
	var items []*model.Board

	// Create a cursor for the query
	cursor, err := r.db.Collection("boards").Find(ctx, bson.M{"portfolio": obj.ID.Hex()})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	// Iterate over the cursor and decode documents
	for cursor.Next(ctx) {
		var item model.Board
		if err := cursor.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, &item)
	}

	// Check for cursor errors
	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return items, nil
}

// Metadata is the resolver for the metadata field.
func (r *portfolioResolver) Metadata(ctx context.Context, obj *model.Portfolio) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// UID is the resolver for the uid field.
func (r *portfolioResolver) UID(ctx context.Context, obj *model.Portfolio) (string, error) {
	return obj.UID.Hex(), nil
}

// Created is the resolver for the created field.
func (r *portfolioResolver) Created(ctx context.Context, obj *model.Portfolio) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *portfolioResolver) Updated(ctx context.Context, obj *model.Portfolio) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Portfolio is the resolver for the portfolio field.
func (r *queryResolver) Portfolio(ctx context.Context, id string) (*model.Portfolio, error) {
	var item *model.Portfolio

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Portfolios is the resolver for the portfolios field.
func (r *queryResolver) Portfolios(ctx context.Context, filter map[string]interface{}, project map[string]interface{}, sort map[string]interface{}, collation map[string]interface{}, limit *int, skip *int) (*model.Portfolios, error) {
	var items []*model.Portfolio

	// Convert map to bson.M which is a type alias for map[string]interface{}
	_filter := utils.Filter(filter)
	opts := utils.Sort(sort)

	if project != nil {
		opts.SetProjection(project)
	}
	if limit != nil {
		opts.SetLimit(int64(*limit))
	}
	if skip != nil {
		opts.SetSkip(int64(*skip))
	}

	cursor, err := r.db.Collection("portfolios").Find(ctx, _filter, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		var item model.Portfolio
		if err := cursor.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, &item)
	}

	//get total count
	count, err := r.db.Collection("portfolios").CountDocuments(ctx, _filter, nil)
	if err != nil {
		return nil, err
	}

	return &model.Portfolios{
		Count: int(count),
		Data:  items,
	}, nil
}

// Portfolio returns PortfolioResolver implementation.
func (r *Resolver) Portfolio() PortfolioResolver { return &portfolioResolver{r} }

type portfolioResolver struct{ *Resolver }
