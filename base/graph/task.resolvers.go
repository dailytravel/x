package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/base/graph/model"
	"github.com/dailytravel/x/base/internal/utils"
	"github.com/typesense/typesense-go/typesense/api/pointer"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	// Create a new task
	item := &model.Task{
		Name:     input.Name,
		Priority: input.Priority,
		Notes:    input.Notes,
		Status:   *input.Status,
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	for _, label := range input.Labels {
		item.Labels = append(item.Labels, *label)
	}

	if input.Parent != nil {
		_id, err := primitive.ObjectIDFromHex(*input.Parent)
		if err != nil {
			return nil, err
		}
		item.Parent = &_id
	}

	if input.Start != nil {
		startAt, err := time.Parse(time.RFC3339, *input.Start)
		if err != nil {
			return nil, fmt.Errorf("invalid Start format: %v", err)
		}
		dt := primitive.NewDateTimeFromTime(startAt)
		item.Start = &dt
	}

	if input.End != nil {
		endAt, err := time.Parse(time.RFC3339, *input.End)
		if err != nil {
			return nil, fmt.Errorf("invalid End format: %v", err)
		}
		dt := primitive.NewDateTimeFromTime(endAt)
		item.End = &dt
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTask) (*model.Task, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Retrieve the existing task using its ID
	item := &model.Task{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Update the task fields based on the input
	if input.Name != nil {
		item.Name = *input.Name
	}

	if input.Priority != nil {
		item.Priority = input.Priority
	}

	if input.Notes != nil {
		item.Notes = input.Notes
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	for _, label := range input.Labels {
		item.Labels = append(item.Labels, *label)
	}

	if input.Parent != nil {
		_id, err := primitive.ObjectIDFromHex(*input.Parent)
		if err != nil {
			return nil, err
		}
		item.Parent = &_id
	}

	if input.Start != nil {
		startAt, err := time.Parse(time.RFC3339, *input.Start)
		if err != nil {
			return nil, fmt.Errorf("invalid Start format: %v", err)
		}
		dt := primitive.NewDateTimeFromTime(startAt)
		item.Start = &dt
	}

	if input.End != nil {
		endAt, err := time.Parse(time.RFC3339, *input.End)
		if err != nil {
			return nil, fmt.Errorf("invalid End format: %v", err)
		}
		dt := primitive.NewDateTimeFromTime(endAt)
		item.End = &dt
	}

	// Update the task in the database
	update := bson.M{"$set": item}
	opts := options.FindOneAndUpdate().SetReturnDocument(options.After)

	var updatedTask model.Task
	err = r.db.Collection("tasks").FindOneAndUpdate(ctx, filter, update, opts).Decode(&updatedTask)
	if err != nil {
		return nil, err
	}

	return &updatedTask, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Retrieve the task using its ID
	task := &model.Task{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(task.Collection()).FindOne(ctx, filter).Decode(task)
	if err != nil {
		return nil, err
	}

	// Archive the task by updating its status or setting a "deleted" flag
	archiveFields := bson.M{
		"status":     "archived",
		"updated_by": uid,
		"deleted":    primitive.Timestamp{T: uint32(time.Now().Unix())},
	}

	update := bson.M{"$set": archiveFields}
	opts := options.FindOneAndUpdate().SetReturnDocument(options.After)

	var archivedTask model.Task
	err = r.db.Collection("tasks").FindOneAndUpdate(ctx, filter, update, opts).Decode(&archivedTask)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"success": true}, nil
}

// DeleteTasks is the resolver for the deleteTasks field.
func (r *mutationResolver) DeleteTasks(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	filter := bson.M{"_id": bson.M{"$in": objectIDs}}
	archiveFields := bson.M{
		"status":     "archived",
		"updated_by": uid,
		"deleted":    primitive.Timestamp{T: uint32(time.Now().Unix())},
	}
	update := bson.M{"$set": archiveFields}

	_, err = r.db.Collection("tasks").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"success": true}, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	var item *model.Task

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item)
	if err != nil {
		return nil, nil
	}

	return item, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, args map[string]interface{}) (*model.Tasks, error) {
	var items []*model.Task

	opts := options.Find()
	opts.SetSort(bson.M{"order": 1})
	opts.SetSort(bson.M{"created": -1})

	// Build the filter based on the provided arguments
	filter := bson.M{}

	// Add filters based on the arguments, if provided
	if name, ok := args["name"].(string); ok && name != "" {
		filter["name"] = name
	}

	// Create a cursor for the query
	cursor, err := r.db.Collection("tasks").Find(ctx, nil, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	// Iterate over the cursor and decode documents
	for cursor.Next(ctx) {
		var item *model.Task
		if err := cursor.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	// Check for cursor errors
	if err := cursor.Err(); err != nil {
		return nil, err
	}

	// You can get the total count using CountDocuments method
	count, err := r.db.Collection("tasks").CountDocuments(ctx, filter)
	if err != nil {
		return nil, err
	}

	return &model.Tasks{Data: items, Count: int(count)}, nil
}

// ID is the resolver for the id field.
func (r *taskResolver) ID(ctx context.Context, obj *model.Task) (string, error) {
	return obj.ID.Hex(), nil
}

// Parent is the resolver for the parent field.
func (r *taskResolver) Parent(ctx context.Context, obj *model.Task) (*model.Task, error) {
	var item *model.Task

	filter := bson.M{"_id": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Subtasks is the resolver for the subtasks field.
func (r *taskResolver) Subtasks(ctx context.Context, obj *model.Task) ([]*model.Task, error) {
	var items []*model.Task

	filter := bson.M{"parent": obj.ID}
	opts := options.Find().SetSort(bson.M{"order": 1})

	cur, err := r.db.Collection("tasks").Find(ctx, filter, opts)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item model.Task
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, &item)
	}

	return items, nil
}

// Start is the resolver for the start field.
func (r *taskResolver) Start(ctx context.Context, obj *model.Task) (*string, error) {
	if obj.Start == nil {
		return nil, nil
	}

	return pointer.String(obj.Start.Time().Format(time.RFC3339)), nil
}

// End is the resolver for the end field.
func (r *taskResolver) End(ctx context.Context, obj *model.Task) (*string, error) {
	if obj.End == nil {
		return nil, nil
	}

	return pointer.String(obj.End.Time().Format(time.RFC3339)), nil
}

// Metadata is the resolver for the metadata field.
func (r *taskResolver) Metadata(ctx context.Context, obj *model.Task) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// UID is the resolver for the uid field.
func (r *taskResolver) UID(ctx context.Context, obj *model.Task) (string, error) {
	return obj.UID.Hex(), nil
}

// Lists is the resolver for the lists field.
func (r *taskResolver) Lists(ctx context.Context, obj *model.Task) ([]*model.List, error) {
	var items []*model.List

	// filter where list.tasks array contains obj.ID
	filter := bson.M{"tasks": bson.M{"$in": []primitive.ObjectID{obj.ID}}}
	cursor, err := r.db.Collection("lists").Find(ctx, filter, nil)
	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	if err = cursor.All(context.Background(), &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Created is the resolver for the created field.
func (r *taskResolver) Created(ctx context.Context, obj *model.Task) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *taskResolver) Updated(ctx context.Context, obj *model.Task) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Task returns TaskResolver implementation.
func (r *Resolver) Task() TaskResolver { return &taskResolver{r} }

type taskResolver struct{ *Resolver }
