type Goal {
  id: ID!
  name: String!
  start: String
  end: String
  notes: String
  metadata: Map
  status: String
  parent: Goal
  phase: Phase!
  uid: ID!
  organization: ID
  created: String!
  updated: String!
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}

type Goals {
  count: Int!
  data: [Goal]
}

type Metric {
  precision: Int
  unit: String
  initial: Float
  target: Float
  current: Float
  source: String
}

input NewGoal {
  name: String!
  start: String
  end: String
  notes: String
  metadata: Map
  status: String
  parent: ID
  phase: ID!
  uid: ID!
  organization: ID
}

input UpdateGoal {
  name: String
  start: String
  end: String
  notes: String
  metadata: Map
  status: String
  parent: ID
  phase: ID
  uid: ID
  organization: ID
}

extend type Query {
  goal(id: ID!): Goal @auth
  goals(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Goals @auth
}

extend type Mutation {
  createGoal(input: NewGoal!): Goal @auth
  updateGoal(id: ID!, input: UpdateGoal!): Goal @auth
  deleteGoal(id: ID!): Map @auth
  deleteGoals(ids: [ID!]!): Map @auth
}
