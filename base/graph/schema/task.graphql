type Task {
  id: ID!
  name: String!
  parent: Task
  subtasks: [Task]
  list: List!
  notes: String
  priority: String! # enum of low, medium, high
  start_at: String
  end_at: String
  labels: [String]
  order: Int
  status: String!
  metadata: Map
  created_at: String!
  updated_at: String!
  uid: ID!
  created_by: ID
  updated_by: ID
}

type Tasks {
  data: [Task]
  count: Int!
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

input NewTask {
  user: ID
  parent: ID
  list: ID
  name: String!
  notes: String
  priority: String
  order: Int
  start_at: String
  end_at: String
  labels: [String]
  status: String
  metadata: Map
}

input UpdateTask {
  user: ID
  parent: ID
  list: ID
  name: String
  notes: String
  priority: String
  order: Int
  start_at: String
  end_at: String
  labels: [String]
  status: String
  metadata: Map
}

extend type Query {
  task(id: ID!): Task
  tasks(args: Map): Tasks @auth
}

extend type Mutation {
  createTask(input: NewTask!): Task @auth
  updateTask(id: ID!, input: UpdateTask!): Task @auth
  deleteTask(id: ID!): Map @auth
  deleteTasks(ids: [ID!]!): Map @auth
}
