type Task @key(fields: "id") {
  id: ID!
  name: String!
  parent: Task
  subtasks: [Task]
  notes: String
  priority: String
  start: String
  end: String
  order: Int
  completed: Boolean!
  status: String!
  metadata: Map
  uid: ID!
  assignee: ID
  shares: [ID!]
  created: String!
  updated: String!
}

enum TaskStatus {
  PUBLIC
  PRIVATE
  ARCHIVED
}

type Tasks {
  data: [Task]
  count: Int!
}

input NewTask {
  user: ID
  parent: ID
  assignee: ID
  shares: [ID!]
  name: String!
  notes: String
  priority: String
  start: String
  end: String
  order: Int
  completed: Boolean
  status: String
  metadata: Map
}

input UpdateTask {
  user: ID
  parent: ID
  assignee: ID
  shares: [ID!]
  name: String
  notes: String
  priority: String
  start: String
  end: String
  order: Int
  completed: Boolean
  status: String
  metadata: Map
}

extend type Query {
  task(id: ID!): Task @auth
  tasks(stages: Map): Tasks @auth
}

extend type Mutation {
  createTask(input: NewTask!): Task @auth
  updateTask(id: ID!, input: UpdateTask!): Task @auth
  deleteTask(id: ID!): Map @auth
  deleteTasks(ids: [ID!]!): Map @auth
}
