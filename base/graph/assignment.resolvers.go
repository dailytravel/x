package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/base/graph/model"
)

// ID is the resolver for the id field.
func (r *assignmentResolver) ID(ctx context.Context, obj *model.Assignment) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// DueDate is the resolver for the due_date field.
func (r *assignmentResolver) DueDate(ctx context.Context, obj *model.Assignment) (*string, error) {
	panic(fmt.Errorf("not implemented: DueDate - due_date"))
}

// Metadata is the resolver for the metadata field.
func (r *assignmentResolver) Metadata(ctx context.Context, obj *model.Assignment) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Created is the resolver for the created field.
func (r *assignmentResolver) Created(ctx context.Context, obj *model.Assignment) (string, error) {
	panic(fmt.Errorf("not implemented: Created - created"))
}

// Updated is the resolver for the updated field.
func (r *assignmentResolver) Updated(ctx context.Context, obj *model.Assignment) (string, error) {
	panic(fmt.Errorf("not implemented: Updated - updated"))
}

// Assignment returns AssignmentResolver implementation.
func (r *Resolver) Assignment() AssignmentResolver { return &assignmentResolver{r} }

type assignmentResolver struct{ *Resolver }
