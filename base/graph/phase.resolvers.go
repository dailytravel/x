package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/base/graph/model"
)

// CreateTime is the resolver for the createTime field.
func (r *mutationResolver) CreateTime(ctx context.Context, input model.NewTime) (*model.Phase, error) {
	panic(fmt.Errorf("not implemented: CreateTime - createTime"))
}

// UpdateTime is the resolver for the updateTime field.
func (r *mutationResolver) UpdateTime(ctx context.Context, id string, input model.UpdateTime) (*model.Phase, error) {
	panic(fmt.Errorf("not implemented: UpdateTime - updateTime"))
}

// DeleteTime is the resolver for the deleteTime field.
func (r *mutationResolver) DeleteTime(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTime - deleteTime"))
}

// DeleteTimes is the resolver for the deleteTimes field.
func (r *mutationResolver) DeleteTimes(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTimes - deleteTimes"))
}

// ID is the resolver for the id field.
func (r *phaseResolver) ID(ctx context.Context, obj *model.Phase) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Parent is the resolver for the parent field.
func (r *phaseResolver) Parent(ctx context.Context, obj *model.Phase) (*model.Phase, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Start is the resolver for the start field.
func (r *phaseResolver) Start(ctx context.Context, obj *model.Phase) (string, error) {
	panic(fmt.Errorf("not implemented: Start - start"))
}

// End is the resolver for the end field.
func (r *phaseResolver) End(ctx context.Context, obj *model.Phase) (string, error) {
	panic(fmt.Errorf("not implemented: End - end"))
}

// Metadata is the resolver for the metadata field.
func (r *phaseResolver) Metadata(ctx context.Context, obj *model.Phase) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Created is the resolver for the created field.
func (r *phaseResolver) Created(ctx context.Context, obj *model.Phase) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *phaseResolver) Updated(ctx context.Context, obj *model.Phase) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Time is the resolver for the time field.
func (r *queryResolver) Time(ctx context.Context, id string) (*model.Phase, error) {
	panic(fmt.Errorf("not implemented: Time - time"))
}

// Times is the resolver for the times field.
func (r *queryResolver) Times(ctx context.Context, args map[string]interface{}) (*model.Times, error) {
	panic(fmt.Errorf("not implemented: Times - times"))
}

// Phase returns PhaseResolver implementation.
func (r *Resolver) Phase() PhaseResolver { return &phaseResolver{r} }

type phaseResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *phaseResolver) CreatedBy(ctx context.Context, obj *model.Phase) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - createdBy"))
}
func (r *phaseResolver) UpdatedBy(ctx context.Context, obj *model.Phase) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updatedBy"))
}
func (r *phaseResolver) CreatedAt(ctx context.Context, obj *model.Phase) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}
func (r *phaseResolver) UpdatedAt(ctx context.Context, obj *model.Phase) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}
