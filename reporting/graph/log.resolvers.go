package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/reporting/graph/model"
)

// ID is the resolver for the id field.
func (r *logResolver) ID(ctx context.Context, obj *model.Log) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *logResolver) Metadata(ctx context.Context, obj *model.Log) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Timestamp is the resolver for the Timestamp field.
func (r *logResolver) Timestamp(ctx context.Context, obj *model.Log) (int, error) {
	panic(fmt.Errorf("not implemented: Timestamp - Timestamp"))
}

// User is the resolver for the user field.
func (r *logResolver) User(ctx context.Context, obj *model.Log) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// DeleteLog is the resolver for the deleteLog field.
func (r *mutationResolver) DeleteLog(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteLog - deleteLog"))
}

// Log is the resolver for the log field.
func (r *queryResolver) Log(ctx context.Context, id string) (*model.Log, error) {
	panic(fmt.Errorf("not implemented: Log - log"))
}

// Logs is the resolver for the logs field.
func (r *queryResolver) Logs(ctx context.Context, args map[string]interface{}) (*model.Logs, error) {
	panic(fmt.Errorf("not implemented: Logs - logs"))
}

// Log returns LogResolver implementation.
func (r *Resolver) Log() LogResolver { return &logResolver{r} }

type logResolver struct{ *Resolver }
