package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/internal/utils"
	"github.com/dailytravel/x/sales/pkg/auth"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateVariant is the resolver for the createVariant field.
func (r *mutationResolver) CreateVariant(ctx context.Context, input model.NewVariant) (*model.Variant, error) {
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	item := &model.Variant{
		Locale: input.Locale,
		Description: bson.M{
			input.Locale: input.Description,
		},
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	utils.Date(&input.Start, &item.Start)
	utils.Date(&input.End, &item.End)

	// Set the fields from the input
	_, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateVariant is the resolver for the updateVariant field.
func (r *mutationResolver) UpdateVariant(ctx context.Context, id string, input model.UpdateVariant) (*model.Variant, error) {
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create an update document with the fields to be updated
	item := &model.Variant{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Description != nil {
		item.Description[*input.Locale] = *input.Description
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Perform the update in the database
	res, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, item)
	if err != nil {
		return nil, err
	}

	// Check if the coupon was actually updated
	if res.ModifiedCount == 0 {
		return nil, fmt.Errorf("no coupon was updated")
	}

	return item, nil
}

// DeleteVariant is the resolver for the deleteVariant field.
func (r *mutationResolver) DeleteVariant(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Define the filter to match the given variant ID
	filter := bson.M{"_id": objectID}

	// Define the update to mark the variant as deleted
	update := bson.M{
		"$set": bson.M{
			"status":     "deleted",
			"updated_by": uid,
			"updated":    primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("variants").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeleteVariants is the resolver for the deleteVariants field.
func (r *mutationResolver) DeleteVariants(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given variant IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark variants as deleted
	update := bson.M{
		"$set": bson.M{
			"status":     "deleted",
			"updated_by": uid,
			"updated":    primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("variants").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// Variant is the resolver for the variant field.
func (r *queryResolver) Variant(ctx context.Context, id string) (*model.Variant, error) {
	var item *model.Variant

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Variants is the resolver for the variants field.
func (r *queryResolver) Variants(ctx context.Context, args map[string]interface{}) (*model.Variants, error) {
	var items []*model.Variant
	//find all items
	cur, err := r.db.Collection("variants").Find(ctx, nil)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Variant
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("variants").CountDocuments(ctx, nil)
	if err != nil {
		return nil, err
	}

	return &model.Variants{
		Count: int(count),
		Data:  items,
	}, nil
}

// ID is the resolver for the id field.
func (r *variantResolver) ID(ctx context.Context, obj *model.Variant) (string, error) {
	return obj.ID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *variantResolver) Name(ctx context.Context, obj *model.Variant) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	// Try to retrieve the name for the requested locale
	if name, ok := obj.Name[*locale].(string); ok {
		return name, nil
	}

	// Return an error if the name is not found for any locale
	return "", errors.New("Name not found for any locale")
}

// Description is the resolver for the description field.
func (r *variantResolver) Description(ctx context.Context, obj *model.Variant) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	// Try to retrieve the description for the requested locale
	if description, ok := obj.Description[*locale].(string); ok {
		return description, nil
	}

	// Return an error if the name is not found for any locale
	return "", errors.New("Description not found for any locale")
}

// Metadata is the resolver for the metadata field.
func (r *variantResolver) Metadata(ctx context.Context, obj *model.Variant) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Start is the resolver for the start field.
func (r *variantResolver) Start(ctx context.Context, obj *model.Variant) (string, error) {
	panic(fmt.Errorf("not implemented: Start - start"))
}

// End is the resolver for the end field.
func (r *variantResolver) End(ctx context.Context, obj *model.Variant) (string, error) {
	panic(fmt.Errorf("not implemented: End - end"))
}

// Created is the resolver for the created field.
func (r *variantResolver) Created(ctx context.Context, obj *model.Variant) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *variantResolver) Updated(ctx context.Context, obj *model.Variant) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Package is the resolver for the package field.
func (r *variantResolver) Package(ctx context.Context, obj *model.Variant) (string, error) {
	return obj.Package.Hex(), nil
}

// Variant returns VariantResolver implementation.
func (r *Resolver) Variant() VariantResolver { return &variantResolver{r} }

type variantResolver struct{ *Resolver }
