package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateQuote is the resolver for the createQuote field.
func (r *mutationResolver) CreateQuote(ctx context.Context, input *model.NewQuote) (*model.Quote, error) {
	panic(fmt.Errorf("not implemented: CreateQuote - createQuote"))
}

// UpdateQuote is the resolver for the updateQuote field.
func (r *mutationResolver) UpdateQuote(ctx context.Context, id string, input model.UpdateQuote) (*model.Quote, error) {
	panic(fmt.Errorf("not implemented: UpdateQuote - updateQuote"))
}

// DeleteQuote is the resolver for the deleteQuote field.
func (r *mutationResolver) DeleteQuote(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteQuote - deleteQuote"))
}

// DeleteQuotes is the resolver for the deleteQuotes field.
func (r *mutationResolver) DeleteQuotes(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteQuotes - deleteQuotes"))
}

// Quotes is the resolver for the quotes field.
func (r *queryResolver) Quotes(ctx context.Context, args map[string]interface{}) (*model.Quotes, error) {
	panic(fmt.Errorf("not implemented: Quotes - quotes"))
}

// Quote is the resolver for the quote field.
func (r *queryResolver) Quote(ctx context.Context, id string) (*model.Quote, error) {
	panic(fmt.Errorf("not implemented: Quote - quote"))
}
