package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *balanceResolver) ID(ctx context.Context, obj *model.Balance) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *balanceResolver) Metadata(ctx context.Context, obj *model.Balance) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *balanceResolver) Created(ctx context.Context, obj *model.Balance) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *balanceResolver) Updated(ctx context.Context, obj *model.Balance) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// UID is the resolver for the uid field.
func (r *balanceResolver) UID(ctx context.Context, obj *model.Balance) (string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// CreateBalance is the resolver for the createBalance field.
func (r *mutationResolver) CreateBalance(ctx context.Context, input model.NewBalance) (*model.Balance, error) {
	// Create a new benefit object
	item := &model.Balance{
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	// Set the fields from the input
	_, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateBalance is the resolver for the updateBalance field.
func (r *mutationResolver) UpdateBalance(ctx context.Context, id string, input model.UpdateBalance) (*model.Balance, error) {
	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the benefit by ID
	item := &model.Balance{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Update the benefit in the database
	if err := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, item).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteBalance is the resolver for the deleteBalance field.
func (r *mutationResolver) DeleteBalance(ctx context.Context, id string) (map[string]interface{}, error) {
	// Get the authenticated user's ID
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the item by ID
	item := &model.Balance{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Define the update to mark the balance as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"status":  "deleted",
			"updated": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("balances").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	if result.ModifiedCount == 0 {
		return nil, fmt.Errorf("balance not found")
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeleteBalances is the resolver for the deleteBalances field.
func (r *mutationResolver) DeleteBalances(ctx context.Context, ids []string) (map[string]interface{}, error) {
	// Get the authenticated user's ID
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// Convert the list of IDs to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to find balances by multiple IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark the balances as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"status":  "deleted",
			"updated": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("balances").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	if result.ModifiedCount == 0 {
		return nil, fmt.Errorf("balances not found")
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// Balance is the resolver for the balance field.
func (r *queryResolver) Balance(ctx context.Context, id string) (*model.Balance, error) {
	var item *model.Balance
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Balances is the resolver for the balances field.
func (r *queryResolver) Balances(ctx context.Context, filter map[string]interface{}, project map[string]interface{}, sort map[string]interface{}, collation map[string]interface{}, limit *int, skip *int) (*model.Balances, error) {
	var items []*model.Balance

	// Convert map to bson.M which is a type alias for map[string]interface{}
	_filter := utils.Filter(filter)

	opts := options.Find()

	if project != nil {
		opts.SetProjection(project)
	}
	if sort != nil {
		opts.SetSort(sort)
	}
	if collation != nil {
		col := &options.Collation{
			// you can set collation fields here...
		}
		opts.SetCollation(col)
	}
	if limit != nil {
		opts.SetLimit(int64(*limit))
	}
	if skip != nil {
		opts.SetSkip(int64(*skip))
	}

	cursor, err := r.db.Collection("balances").Find(ctx, _filter, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	if err = cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	//get total count
	count, err := r.db.Collection("balances").CountDocuments(ctx, _filter, nil)
	if err != nil {
		return nil, err
	}

	return &model.Balances{
		Count: int(count),
		Data:  items,
	}, nil
}

// Balance returns BalanceResolver implementation.
func (r *Resolver) Balance() BalanceResolver { return &balanceResolver{r} }

type balanceResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *balanceResolver) Expires(ctx context.Context, obj *model.Balance) (*string, error) {
	panic(fmt.Errorf("not implemented: Expires - expires"))
}
