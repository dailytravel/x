package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateReward is the resolver for the createReward field.
func (r *mutationResolver) CreateReward(ctx context.Context, input model.NewReward) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: CreateReward - createReward"))
}

// UpdateReward is the resolver for the updateReward field.
func (r *mutationResolver) UpdateReward(ctx context.Context, id string, input model.UpdateReward) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: UpdateReward - updateReward"))
}

// DeleteReward is the resolver for the deleteReward field.
func (r *mutationResolver) DeleteReward(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteReward - deleteReward"))
}

// DeleteRewards is the resolver for the deleteRewards field.
func (r *mutationResolver) DeleteRewards(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteRewards - deleteRewards"))
}

// Rewards is the resolver for the rewards field.
func (r *queryResolver) Rewards(ctx context.Context, args map[string]interface{}) (*model.Rewards, error) {
	panic(fmt.Errorf("not implemented: Rewards - rewards"))
}

// Reward is the resolver for the reward field.
func (r *queryResolver) Reward(ctx context.Context, id string) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: Reward - reward"))
}

// ID is the resolver for the id field.
func (r *rewardResolver) ID(ctx context.Context, obj *model.Reward) (string, error) {
	return obj.ID.Hex(), nil
}

// Tier is the resolver for the tier field.
func (r *rewardResolver) Tier(ctx context.Context, obj *model.Reward) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: Tier - tier"))
}

// Name is the resolver for the name field.
func (r *rewardResolver) Name(ctx context.Context, obj *model.Reward) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *rewardResolver) Description(ctx context.Context, obj *model.Reward) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Metadata is the resolver for the metadata field.
func (r *rewardResolver) Metadata(ctx context.Context, obj *model.Reward) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// ExpiresAt is the resolver for the expires_at field.
func (r *rewardResolver) ExpiresAt(ctx context.Context, obj *model.Reward) (*string, error) {
	panic(fmt.Errorf("not implemented: ExpiresAt - expires_at"))
}

// CreatedAt is the resolver for the created_at field.
func (r *rewardResolver) CreatedAt(ctx context.Context, obj *model.Reward) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *rewardResolver) UpdatedAt(ctx context.Context, obj *model.Reward) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *rewardResolver) CreatedBy(ctx context.Context, obj *model.Reward) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *rewardResolver) UpdatedBy(ctx context.Context, obj *model.Reward) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Reward returns RewardResolver implementation.
func (r *Resolver) Reward() RewardResolver { return &rewardResolver{r} }

type rewardResolver struct{ *Resolver }
