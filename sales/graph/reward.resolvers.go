package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateReward is the resolver for the createReward field.
func (r *mutationResolver) CreateReward(ctx context.Context, input model.NewReward) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: CreateReward - createReward"))
}

// UpdateReward is the resolver for the updateReward field.
func (r *mutationResolver) UpdateReward(ctx context.Context, id string, input model.UpdateReward) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: UpdateReward - updateReward"))
}

// DeleteReward is the resolver for the deleteReward field.
func (r *mutationResolver) DeleteReward(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteReward - deleteReward"))
}

// DeleteRewards is the resolver for the deleteRewards field.
func (r *mutationResolver) DeleteRewards(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteRewards - deleteRewards"))
}

// Rewards is the resolver for the rewards field.
func (r *queryResolver) Rewards(ctx context.Context, args map[string]interface{}) (*model.Rewards, error) {
	panic(fmt.Errorf("not implemented: Rewards - rewards"))
}

// Reward is the resolver for the reward field.
func (r *queryResolver) Reward(ctx context.Context, id string) (*model.Reward, error) {
	panic(fmt.Errorf("not implemented: Reward - reward"))
}
