package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreatePackage is the resolver for the createPackage field.
func (r *mutationResolver) CreatePackage(ctx context.Context, input model.NewPackage) (*model.Package, error) {
	panic(fmt.Errorf("not implemented: CreatePackage - createPackage"))
}

// UpdatePackage is the resolver for the updatePackage field.
func (r *mutationResolver) UpdatePackage(ctx context.Context, id string, input model.UpdatePackage) (*model.Package, error) {
	panic(fmt.Errorf("not implemented: UpdatePackage - updatePackage"))
}

// DeletePackage is the resolver for the deletePackage field.
func (r *mutationResolver) DeletePackage(ctx context.Context, id string) (*model.Package, error) {
	panic(fmt.Errorf("not implemented: DeletePackage - deletePackage"))
}

// ID is the resolver for the id field.
func (r *packageResolver) ID(ctx context.Context, obj *model.Package) (string, error) {
	return obj.ID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *packageResolver) Name(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *packageResolver) Description(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Includes is the resolver for the includes field.
func (r *packageResolver) Includes(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Includes - includes"))
}

// Excludes is the resolver for the excludes field.
func (r *packageResolver) Excludes(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Excludes - excludes"))
}

// Redeem is the resolver for the redeem field.
func (r *packageResolver) Redeem(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Redeem - redeem"))
}

// Cancellation is the resolver for the cancellation field.
func (r *packageResolver) Cancellation(ctx context.Context, obj *model.Package) (string, error) {
	panic(fmt.Errorf("not implemented: Cancellation - cancellation"))
}

// Metadata is the resolver for the metadata field.
func (r *packageResolver) Metadata(ctx context.Context, obj *model.Package) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *packageResolver) Created(ctx context.Context, obj *model.Package) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *packageResolver) Updated(ctx context.Context, obj *model.Package) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Product is the resolver for the product field.
func (r *packageResolver) Product(ctx context.Context, obj *model.Package) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Vouchers is the resolver for the vouchers field.
func (r *packageResolver) Vouchers(ctx context.Context, obj *model.Package) ([]*model.Voucher, error) {
	panic(fmt.Errorf("not implemented: Vouchers - vouchers"))
}

// Package is the resolver for the package field.
func (r *queryResolver) Package(ctx context.Context, id string) (*model.Package, error) {
	panic(fmt.Errorf("not implemented: Package - package"))
}

// Packages is the resolver for the packages field.
func (r *queryResolver) Packages(ctx context.Context, stages map[string]interface{}) (*model.Packages, error) {
	panic(fmt.Errorf("not implemented: Packages - packages"))
}

// Package returns PackageResolver implementation.
func (r *Resolver) Package() PackageResolver { return &packageResolver{r} }

type packageResolver struct{ *Resolver }
