package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// ID is the resolver for the id field.
func (r *companyResolver) ID(ctx context.Context, obj *model.Company) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Parent is the resolver for the parent field.
func (r *companyResolver) Parent(ctx context.Context, obj *model.Company) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Children is the resolver for the children field.
func (r *companyResolver) Children(ctx context.Context, obj *model.Company) ([]*model.Company, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Metadata is the resolver for the metadata field.
func (r *companyResolver) Metadata(ctx context.Context, obj *model.Company) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// LastActivity is the resolver for the last_activity field.
func (r *companyResolver) LastActivity(ctx context.Context, obj *model.Company) (int, error) {
	panic(fmt.Errorf("not implemented: LastActivity - last_activity"))
}

// CreatedAt is the resolver for the created_at field.
func (r *companyResolver) CreatedAt(ctx context.Context, obj *model.Company) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *companyResolver) UpdatedAt(ctx context.Context, obj *model.Company) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// UID is the resolver for the uid field.
func (r *companyResolver) UID(ctx context.Context, obj *model.Company) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *companyResolver) CreatedBy(ctx context.Context, obj *model.Company) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *companyResolver) UpdatedBy(ctx context.Context, obj *model.Company) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.NewCompany) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: CreateCompany - createCompany"))
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, id string, input model.UpdateCompany) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: UpdateCompany - updateCompany"))
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationResolver) DeleteCompany(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteCompany - deleteCompany"))
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context, args map[string]interface{}) (*model.Companies, error) {
	panic(fmt.Errorf("not implemented: Companies - companies"))
}

// Company is the resolver for the company field.
func (r *queryResolver) Company(ctx context.Context, id string) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: Company - company"))
}

// Company returns CompanyResolver implementation.
func (r *Resolver) Company() CompanyResolver { return &companyResolver{r} }

type companyResolver struct{ *Resolver }
