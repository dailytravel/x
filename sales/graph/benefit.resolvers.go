package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// ID is the resolver for the id field.
func (r *benefitResolver) ID(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Description is the resolver for the description field.
func (r *benefitResolver) Description(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Metadata is the resolver for the metadata field.
func (r *benefitResolver) Metadata(ctx context.Context, obj *model.Benefit) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *benefitResolver) CreatedAt(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *benefitResolver) UpdatedAt(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// CreateBenefit is the resolver for the createBenefit field.
func (r *mutationResolver) CreateBenefit(ctx context.Context, input model.NewBenefit) (*model.Benefit, error) {
	panic(fmt.Errorf("not implemented: CreateBenefit - createBenefit"))
}

// UpdateBenefit is the resolver for the updateBenefit field.
func (r *mutationResolver) UpdateBenefit(ctx context.Context, id string, input model.UpdateBenefit) (*model.Benefit, error) {
	panic(fmt.Errorf("not implemented: UpdateBenefit - updateBenefit"))
}

// DeleteBenefit is the resolver for the deleteBenefit field.
func (r *mutationResolver) DeleteBenefit(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBenefit - deleteBenefit"))
}

// Benefits is the resolver for the benefits field.
func (r *queryResolver) Benefits(ctx context.Context, args map[string]interface{}) ([]*model.Benefit, error) {
	panic(fmt.Errorf("not implemented: Benefits - benefits"))
}

// Benefit is the resolver for the benefit field.
func (r *queryResolver) Benefit(ctx context.Context, id string) (*model.Benefit, error) {
	panic(fmt.Errorf("not implemented: Benefit - benefit"))
}

// Benefit returns BenefitResolver implementation.
func (r *Resolver) Benefit() BenefitResolver { return &benefitResolver{r} }

type benefitResolver struct{ *Resolver }
