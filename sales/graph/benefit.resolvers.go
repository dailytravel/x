package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// ID is the resolver for the id field.
func (r *benefitResolver) ID(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Description is the resolver for the description field.
func (r *benefitResolver) Description(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Metadata is the resolver for the metadata field.
func (r *benefitResolver) Metadata(ctx context.Context, obj *model.Benefit) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the created_at field.
func (r *benefitResolver) CreatedAt(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *benefitResolver) UpdatedAt(ctx context.Context, obj *model.Benefit) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// Benefit returns BenefitResolver implementation.
func (r *Resolver) Benefit() BenefitResolver { return &benefitResolver{r} }

type benefitResolver struct{ *Resolver }
