package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/internal/utils"
	"github.com/dailytravel/x/sales/pkg/auth"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the id field.
func (r *couponResolver) ID(ctx context.Context, obj *model.Coupon) (string, error) {
	return obj.ID.Hex(), nil
}

// Description is the resolver for the description field.
func (r *couponResolver) Description(ctx context.Context, obj *model.Coupon) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	// Try to retrieve the description for the requested locale
	if description, ok := obj.Description[*locale].(string); ok {
		return description, nil
	}

	// Return an error if the name is not found for any locale
	return obj.Description[obj.Locale].(string), nil
}

// Expiration is the resolver for the expiration field.
func (r *couponResolver) Expiration(ctx context.Context, obj *model.Coupon) (*string, error) {
	panic(fmt.Errorf("not implemented: Expiration - expiration"))
}

// Metadata is the resolver for the metadata field.
func (r *couponResolver) Metadata(ctx context.Context, obj *model.Coupon) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *couponResolver) Created(ctx context.Context, obj *model.Coupon) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *couponResolver) Updated(ctx context.Context, obj *model.Coupon) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// UID is the resolver for the uid field.
func (r *couponResolver) UID(ctx context.Context, obj *model.Coupon) (*string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// CreateCoupon is the resolver for the createCoupon field.
func (r *mutationResolver) CreateCoupon(ctx context.Context, input model.NewCoupon) (*model.Coupon, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Coupon{
		UID:    uid,
		Code:   utils.String(8),
		Locale: input.Locale,
		Description: bson.M{
			input.Locale: input.Description,
		},
		Type:        input.Type,
		Amount:      input.Amount,
		Currency:    input.Currency,
		MinPurchase: input.MinPurchase,
		MaxDiscount: input.MaxDiscount,
		MaxUses:     input.MaxUses,
		Status:      *input.Status,
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	// utils.Date(&input.Start, &item.Start)
	// utils.Date(&input.End, &item.End)

	// Set the fields from the input
	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateCoupon is the resolver for the updateCoupon field.
func (r *mutationResolver) UpdateCoupon(ctx context.Context, id string, input model.UpdateCoupon) (*model.Coupon, error) {
	// uid, err := utils.UID(ctx)
	// if err != nil {
	// 	return nil, err
	// }

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create an update document with the fields to be updated
	item := &model.Coupon{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Description != nil {
		item.Description[*input.Locale] = *input.Description
	}

	if input.Type != nil {
		item.Type = *input.Type
	}

	if input.Amount != nil {
		item.Amount = *input.Amount
	}

	if input.Currency != nil {
		item.Currency = *input.Currency
	}

	if input.MinPurchase != nil {
		item.MinPurchase = input.MinPurchase
	}

	if input.MaxDiscount != nil {
		item.MaxDiscount = input.MaxDiscount
	}

	if input.MaxUses != nil {
		item.MaxUses = input.MaxUses
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Perform the update in the database
	res, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, item)
	if err != nil {
		return nil, err
	}

	// Check if the coupon was actually updated
	if res.ModifiedCount == 0 {
		return nil, fmt.Errorf("no coupon was updated")
	}

	return item, nil
}

// DeleteCoupon is the resolver for the deleteCoupon field.
func (r *mutationResolver) DeleteCoupon(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to an ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Define the filter to match the given ID
	filter := bson.M{"_id": _id}

	// Define the update to mark the record as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted":    primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated":    primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("coupons").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	if result.ModifiedCount == 0 {
		return nil, fmt.Errorf("coupon not found")
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeleteCoupons is the resolver for the deleteCoupons field.
func (r *mutationResolver) DeleteCoupons(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark records as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted":    primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated":    primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("coupons").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// Coupon is the resolver for the coupon field.
func (r *queryResolver) Coupon(ctx context.Context, id string) (*model.Coupon, error) {
	var item *model.Coupon

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Coupons is the resolver for the coupons field.
func (r *queryResolver) Coupons(ctx context.Context, args map[string]interface{}) (*model.Coupons, error) {
	var items []*model.Coupon
	//find all items
	cur, err := r.db.Collection("coupons").Find(ctx, nil)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Coupon
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("coupons").CountDocuments(ctx, nil)
	if err != nil {
		return nil, err
	}

	return &model.Coupons{
		Count: int(count),
		Data:  items,
	}, nil
}

// Coupon returns CouponResolver implementation.
func (r *Resolver) Coupon() CouponResolver { return &couponResolver{r} }

type couponResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *couponResolver) Start(ctx context.Context, obj *model.Coupon) (string, error) {
	panic(fmt.Errorf("not implemented: Start - start"))
}
func (r *couponResolver) End(ctx context.Context, obj *model.Coupon) (string, error) {
	panic(fmt.Errorf("not implemented: End - end"))
}
