package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/auth"
	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateProgram is the resolver for the createProgram field.
func (r *mutationResolver) CreateProgram(ctx context.Context, input model.NewProgram) (*model.Program, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	item := &model.Program{
		Locale:      input.Locale,
		Name:        bson.M{input.Locale: input.Name},
		Description: bson.M{input.Locale: input.Description},
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
			Metadata:  input.Metadata,
		},
	}

	// Set the fields from the input
	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateProgram is the resolver for the updateProgram field.
func (r *mutationResolver) UpdateProgram(ctx context.Context, id string, input model.UpdateProgram) (*model.Program, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create an update document with the fields to be updated
	item := &model.Program{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Name != nil {
		item.Name[item.Locale] = *input.Name
	}

	if input.Description != nil {
		item.Description[item.Locale] = *input.Description
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Update the updated_by and updated_at fields
	item.UpdatedBy = uid

	// Perform the update in the database
	res, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, item)
	if err != nil {
		return nil, err
	}

	// Check if the coupon was actually updated
	if res.ModifiedCount == 0 {
		return nil, fmt.Errorf("no coupon was updated")
	}

	return item, nil
}

// DeleteProgram is the resolver for the deleteProgram field.
func (r *mutationResolver) DeleteProgram(ctx context.Context, id string) (*model.Program, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert the ID string to an ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Define the filter to match the given ID
	filter := bson.M{"_id": _id}

	// Define the update to mark the record as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database and get the old program data
	var oldProgram model.Program
	err = r.db.Collection("programs").FindOneAndUpdate(ctx, filter, update).Decode(&oldProgram)
	if err != nil {
		return nil, err
	}

	return &oldProgram, nil
}

// DeletePrograms is the resolver for the deletePrograms field.
func (r *mutationResolver) DeletePrograms(ctx context.Context, ids []string) (*bool, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark records as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	_, err = r.db.Collection("programs").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Return a success status
	success := true
	return &success, nil
}

// ID is the resolver for the id field.
func (r *programResolver) ID(ctx context.Context, obj *model.Program) (string, error) {
	return obj.ID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *programResolver) Name(ctx context.Context, obj *model.Program) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)

	// Try to retrieve the name for the requested locale
	if name, ok := obj.Name[*locale].(string); ok {
		return name, nil
	}

	// If the name is not found for the requested locale,
	// fallback to the taxonomy's default locale
	if name, ok := obj.Name[obj.Locale].(string); ok {
		return name, nil
	}

	// Return an error if the name is not found for any locale
	return "", errors.New("Name not found for any locale")
}

// Description is the resolver for the description field.
func (r *programResolver) Description(ctx context.Context, obj *model.Program) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)

	// Try to retrieve the description for the requested locale
	if description, ok := obj.Description[*locale].(string); ok {
		return description, nil
	}

	// If the description is not found for the requested locale,
	// fallback to the taxonomy's default locale
	if description, ok := obj.Description[obj.Locale].(string); ok {
		return description, nil
	}

	// Return an error if the description is not found for any locale
	return "", errors.New("Description not found for any locale")
}

// Metadata is the resolver for the metadata field.
func (r *programResolver) Metadata(ctx context.Context, obj *model.Program) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *programResolver) CreatedAt(ctx context.Context, obj *model.Program) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *programResolver) UpdatedAt(ctx context.Context, obj *model.Program) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *programResolver) CreatedBy(ctx context.Context, obj *model.Program) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *programResolver) UpdatedBy(ctx context.Context, obj *model.Program) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// Program is the resolver for the program field.
func (r *queryResolver) Program(ctx context.Context, id string) (*model.Program, error) {
	var item *model.Program

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Programs is the resolver for the programs field.
func (r *queryResolver) Programs(ctx context.Context, args map[string]interface{}) (*model.Programs, error) {
	panic(fmt.Errorf("not implemented: Programs - programs"))
}

// Program returns ProgramResolver implementation.
func (r *Resolver) Program() ProgramResolver { return &programResolver{r} }

type programResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *programResolver) Type(ctx context.Context, obj *model.Program) (model.ProgramType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}
