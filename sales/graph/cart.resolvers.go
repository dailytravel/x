package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// ID is the resolver for the id field.
func (r *cartResolver) ID(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Metadata is the resolver for the metadata field.
func (r *cartResolver) Metadata(ctx context.Context, obj *model.Cart) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Expires is the resolver for the expires field.
func (r *cartResolver) Expires(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: Expires - expires"))
}

// Created is the resolver for the created field.
func (r *cartResolver) Created(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: Created - created"))
}

// Updated is the resolver for the updated field.
func (r *cartResolver) Updated(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: Updated - updated"))
}

// UID is the resolver for the uid field.
func (r *cartResolver) UID(ctx context.Context, obj *model.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// CreateCart is the resolver for the createCart field.
func (r *mutationResolver) CreateCart(ctx context.Context, input model.NewCart) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: CreateCart - createCart"))
}

// UpdateCart is the resolver for the updateCart field.
func (r *mutationResolver) UpdateCart(ctx context.Context, id string, input model.UpdateCart) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: UpdateCart - updateCart"))
}

// DeleteCart is the resolver for the deleteCart field.
func (r *mutationResolver) DeleteCart(ctx context.Context, id string) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: DeleteCart - deleteCart"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context, id string) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Carts is the resolver for the carts field.
func (r *queryResolver) Carts(ctx context.Context) (*model.Carts, error) {
	panic(fmt.Errorf("not implemented: Carts - carts"))
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

type cartResolver struct{ *Resolver }
