package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// ID is the resolver for the id field.
func (r *contactResolver) ID(ctx context.Context, obj *model.Contact) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Owner is the resolver for the owner field.
func (r *contactResolver) Owner(ctx context.Context, obj *model.Contact) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Birthday is the resolver for the birthday field.
func (r *contactResolver) Birthday(ctx context.Context, obj *model.Contact) (*string, error) {
	panic(fmt.Errorf("not implemented: Birthday - birthday"))
}

// Organization is the resolver for the organization field.
func (r *contactResolver) Organization(ctx context.Context, obj *model.Contact) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Rating is the resolver for the rating field.
func (r *contactResolver) Rating(ctx context.Context, obj *model.Contact) (*int, error) {
	panic(fmt.Errorf("not implemented: Rating - rating"))
}

// Metadata is the resolver for the metadata field.
func (r *contactResolver) Metadata(ctx context.Context, obj *model.Contact) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// LastActivity is the resolver for the last_activity field.
func (r *contactResolver) LastActivity(ctx context.Context, obj *model.Contact) (*int, error) {
	panic(fmt.Errorf("not implemented: LastActivity - last_activity"))
}

// CreatedAt is the resolver for the created_at field.
func (r *contactResolver) CreatedAt(ctx context.Context, obj *model.Contact) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *contactResolver) UpdatedAt(ctx context.Context, obj *model.Contact) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// Followers is the resolver for the followers field.
func (r *contactResolver) Followers(ctx context.Context, obj *model.Contact) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// CreateContact is the resolver for the createContact field.
func (r *mutationResolver) CreateContact(ctx context.Context, input model.NewContact) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: CreateContact - createContact"))
}

// UpdateContact is the resolver for the updateContact field.
func (r *mutationResolver) UpdateContact(ctx context.Context, id string, input model.UpdateContact) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: UpdateContact - updateContact"))
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContact - deleteContact"))
}

// DeleteContacts is the resolver for the deleteContacts field.
func (r *mutationResolver) DeleteContacts(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContacts - deleteContacts"))
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Contacts - contacts"))
}

// Contact is the resolver for the contact field.
func (r *queryResolver) Contact(ctx context.Context, id string) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// ContactCreated is the resolver for the contactCreated field.
func (r *subscriptionResolver) ContactCreated(ctx context.Context) (<-chan *model.Contact, error) {
	panic(fmt.Errorf("not implemented: ContactCreated - contactCreated"))
}

// ContactUpdated is the resolver for the contactUpdated field.
func (r *subscriptionResolver) ContactUpdated(ctx context.Context) (<-chan *model.Contact, error) {
	panic(fmt.Errorf("not implemented: ContactUpdated - contactUpdated"))
}

// ContactDeleted is the resolver for the contactDeleted field.
func (r *subscriptionResolver) ContactDeleted(ctx context.Context) (<-chan *model.Contact, error) {
	panic(fmt.Errorf("not implemented: ContactDeleted - contactDeleted"))
}

// Contact returns ContactResolver implementation.
func (r *Resolver) Contact() ContactResolver { return &contactResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type contactResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
