package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/csv"
	"errors"
	"fmt"
	"io"
	"regexp"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the id field.
func (r *contactResolver) ID(ctx context.Context, obj *model.Contact) (string, error) {
	return obj.ID.Hex(), nil
}

// Gender is the resolver for the gender field.
func (r *contactResolver) Gender(ctx context.Context, obj *model.Contact) (*model.Gender, error) {
	panic(fmt.Errorf("not implemented: Gender - gender"))
}

// Birthday is the resolver for the birthday field.
func (r *contactResolver) Birthday(ctx context.Context, obj *model.Contact) (*string, error) {
	if obj.Birthday.Time().IsZero() {
		return nil, nil
	}

	birthday := obj.Birthday.Time().Format(time.RFC3339)
	return &birthday, nil
}

// Company is the resolver for the company field.
func (r *contactResolver) Company(ctx context.Context, obj *model.Contact) (*model.Company, error) {
	var item *model.Company

	filter := bson.M{"_id": obj.Company}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Metadata is the resolver for the metadata field.
func (r *contactResolver) Metadata(ctx context.Context, obj *model.Contact) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// LastActivity is the resolver for the last_activity field.
func (r *contactResolver) LastActivity(ctx context.Context, obj *model.Contact) (*string, error) {
	if obj.LastActivity.IsZero() {
		return nil, nil
	}

	lastActivity := time.Unix(int64(obj.LastActivity.T), 0).Format(time.RFC3339)
	return &lastActivity, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *contactResolver) CreatedAt(ctx context.Context, obj *model.Contact) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *contactResolver) UpdatedAt(ctx context.Context, obj *model.Contact) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// UID is the resolver for the uid field.
func (r *contactResolver) UID(ctx context.Context, obj *model.Contact) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *contactResolver) CreatedBy(ctx context.Context, obj *model.Contact) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *contactResolver) UpdatedBy(ctx context.Context, obj *model.Contact) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// CreateContact is the resolver for the createContact field.
func (r *mutationResolver) CreateContact(ctx context.Context, input model.NewContact) (*model.Contact, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Check if the contact already exists by email or phone
	filter := bson.M{
		"$and": []bson.M{
			{"uid": uid},
			{"$or": []bson.M{
				{"email": input.Email},
				{"phone": input.Phone},
			}},
		},
	}
	var existingContact model.Contact
	err = r.db.Collection(existingContact.Collection()).FindOne(ctx, filter).Decode(&existingContact)
	if err != nil && err != mongo.ErrNoDocuments {
		return nil, err
	}
	if err != mongo.ErrNoDocuments {
		return nil, errors.New("contact with this email or phone already exists")
	}

	item := &model.Contact{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     &input.Email,
		Phone:     input.Phone,
		City:      input.City,
		Zip:       input.Zip,
		State:     input.State,
		Source:    input.Source,
		Language:  input.Language,
		JobTitle:  input.JobTitle,
		Gender:    input.Gender,
		Rating:    input.Rating,
		Country:   input.Country,
		Timezone:  input.Timezone,
		Website:   input.Website,
		Status:    *input.Status,
		Notes:     input.Notes,
		Picture:   input.Picture,
		Model: model.Model{
			Metadata:  input.Metadata,
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	// Set the birthday
	if input.Birthday != nil {
		birthday, err := time.Parse(time.RFC3339, *input.Birthday)
		if err != nil {
			return nil, err
		}
		item.Birthday = primitive.NewDateTimeFromTime(birthday)
	}

	// Set owner
	if input.UID != nil {
		_id, err := primitive.ObjectIDFromHex(*input.UID)
		if err != nil {
			return nil, err
		}
		item.UID = _id
	} else {
		item.UID = *uid
	}

	// Insert the new contact into the database
	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateContact is the resolver for the updateContact field.
func (r *mutationResolver) UpdateContact(ctx context.Context, id string, input model.UpdateContact) (*model.Contact, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	item := &model.Contact{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	update := bson.M{}
	if input.FirstName != nil {
		update["first_name"] = *input.FirstName
	}

	if input.LastName != nil {
		update["last_name"] = *input.LastName
	}

	if input.Email != nil {
		update["email"] = *input.Email
	}

	if input.Phone != nil {
		update["phone"] = *input.Phone
	}

	if input.City != nil {
		update["city"] = *input.City
	}

	if input.Zip != nil {
		update["zip"] = *input.Zip
	}

	if input.State != nil {
		update["state"] = *input.State
	}

	if input.Source != nil {
		update["source"] = *input.Source
	}

	if input.Language != nil {
		update["language"] = *input.Language
	}

	if input.JobTitle != nil {
		update["job_title"] = *input.JobTitle
	}

	if input.Country != nil {
		update["country"] = *input.Country
	}

	if input.Timezone != nil {
		update["timezone"] = *input.Timezone
	}

	if input.Website != nil {
		update["website"] = *input.Website
	}

	if input.Status != nil {
		update["status"] = *input.Status
	}

	if input.Notes != nil {
		update["notes"] = *input.Notes
	}

	if input.Picture != nil {
		update["picture"] = *input.Picture
	}

	if input.Rating != nil {
		update["rating"] = *input.Rating
	}

	if input.Birthday != nil {
		birthday, err := time.Parse(time.RFC3339, *input.Birthday)
		if err != nil {
			return nil, err
		}
		update["birthday"] = primitive.NewDateTimeFromTime(birthday)
	}

	if len(update) > 0 {
		update["updated_by"] = uid
	}

	res := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, bson.M{"$set": update})
	if res.Err() != nil {
		return nil, res.Err()
	}

	updated := &model.Contact{}
	err = res.Decode(updated)
	if err != nil {
		return nil, err
	}

	return updated, nil
}

// ImportContacts is the resolver for the importContacts field.
func (r *mutationResolver) ImportContacts(ctx context.Context, file string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Decode the base64 string
	data, err := base64.StdEncoding.DecodeString(file)
	if err != nil {
		return nil, err
	}

	// Create a bytes buffer from the decoded data
	reader := csv.NewReader(bytes.NewReader(data))

	// Define regex patterns
	phoneRegex := regexp.MustCompile(`\(?(\+?\d{2,3})?\)?[\s-]?\d{3}[\s-]?\d{2,4}[\s-]?\d{2,4}`)
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$`)

	var contacts []model.Contact

	for {
		record, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, err
		}

		contact := model.Contact{
			UID:       *uid,
			FirstName: &record[0],
			Status:    "active",
			Model: model.Model{
				CreatedBy: uid,
				UpdatedBy: uid,
			},
		}

		for _, field := range record {
			if contact.Phone == nil && phoneRegex.MatchString(field) {
				phoneField := field
				contact.Phone = &phoneField
			} else if contact.Email == nil && emailRegex.MatchString(field) {
				emailField := field
				contact.Email = &emailField
			}
		}

		if (contact.Phone != nil && *contact.Phone != "") || (contact.Email != nil && *contact.Email != "") {
			contacts = append(contacts, contact)
		}
	}

	if len(contacts) == 0 {
		return nil, errors.New("no contacts found")
	}

	var newContacts []interface{}
	for _, contact := range contacts {
		// Construct the filter based on uid and either email or phone
		filter := bson.M{
			"uid": uid,
			"$or": []bson.M{
				{"email": contact.Email},
				{"phone": contact.Phone},
			},
		}

		var existingContact model.Contact
		err = r.db.Collection("contacts").FindOne(ctx, filter).Decode(&existingContact)

		// If the contact doesn't exist, append to the newContacts slice
		if err == mongo.ErrNoDocuments {
			newContacts = append(newContacts, contact)
		}
	}

	// Insert all new contacts at once
	if len(newContacts) > 0 {
		_, err := r.db.Collection("contacts").InsertMany(ctx, newContacts)
		if err != nil {
			return nil, fmt.Errorf("failed to insert new contacts: %w", err)
		}
	}

	return map[string]interface{}{
		"status": "success",
		"count":  len(newContacts),
	}, nil
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to an ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the contact by ID
	contact := &model.Contact{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(contact.Collection()).FindOne(ctx, filter).Decode(contact)
	if err != nil {
		return nil, err
	}

	// Mark the contact as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Update the contact in the database
	result, err := r.db.Collection("contacts").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeleteContacts is the resolver for the deleteContacts field.
func (r *mutationResolver) DeleteContacts(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark records as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("contacts").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	res, err := r.ts.Collection("contacts").Documents().Search(utils.Params(args))
	if err != nil {
		return nil, err
	}

	// Convert struct to map
	results, err := utils.StructToMap(res)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// Contact is the resolver for the contact field.
func (r *queryResolver) Contact(ctx context.Context, id string) (*model.Contact, error) {
	var item *model.Contact

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Contact returns ContactResolver implementation.
func (r *Resolver) Contact() ContactResolver { return &contactResolver{r} }

type contactResolver struct{ *Resolver }
