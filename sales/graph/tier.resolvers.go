package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateTier is the resolver for the createTier field.
func (r *mutationResolver) CreateTier(ctx context.Context, input model.NewTier) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: CreateTier - createTier"))
}

// UpdateTier is the resolver for the updateTier field.
func (r *mutationResolver) UpdateTier(ctx context.Context, id string, input model.UpdateTier) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: UpdateTier - updateTier"))
}

// DeleteTier is the resolver for the deleteTier field.
func (r *mutationResolver) DeleteTier(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTier - deleteTier"))
}

// DeleteTiers is the resolver for the deleteTiers field.
func (r *mutationResolver) DeleteTiers(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTiers - deleteTiers"))
}

// Tiers is the resolver for the tiers field.
func (r *queryResolver) Tiers(ctx context.Context, args map[string]interface{}) (*model.Tiers, error) {
	panic(fmt.Errorf("not implemented: Tiers - tiers"))
}

// Tier is the resolver for the tier field.
func (r *queryResolver) Tier(ctx context.Context, id string) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: Tier - tier"))
}
