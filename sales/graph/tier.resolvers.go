package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateTier is the resolver for the createTier field.
func (r *mutationResolver) CreateTier(ctx context.Context, input model.NewTier) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: CreateTier - createTier"))
}

// UpdateTier is the resolver for the updateTier field.
func (r *mutationResolver) UpdateTier(ctx context.Context, id string, input model.UpdateTier) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: UpdateTier - updateTier"))
}

// DeleteTier is the resolver for the deleteTier field.
func (r *mutationResolver) DeleteTier(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTier - deleteTier"))
}

// DeleteTiers is the resolver for the deleteTiers field.
func (r *mutationResolver) DeleteTiers(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTiers - deleteTiers"))
}

// Tiers is the resolver for the tiers field.
func (r *queryResolver) Tiers(ctx context.Context, args map[string]interface{}) (*model.Tiers, error) {
	panic(fmt.Errorf("not implemented: Tiers - tiers"))
}

// Tier is the resolver for the tier field.
func (r *queryResolver) Tier(ctx context.Context, id string) (*model.Tier, error) {
	panic(fmt.Errorf("not implemented: Tier - tier"))
}

// ID is the resolver for the id field.
func (r *tierResolver) ID(ctx context.Context, obj *model.Tier) (string, error) {
	return obj.ID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *tierResolver) Name(ctx context.Context, obj *model.Tier) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *tierResolver) Description(ctx context.Context, obj *model.Tier) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Benefits is the resolver for the benefits field.
func (r *tierResolver) Benefits(ctx context.Context, obj *model.Tier) ([]*model.Benefit, error) {
	panic(fmt.Errorf("not implemented: Benefits - benefits"))
}

// Rewards is the resolver for the rewards field.
func (r *tierResolver) Rewards(ctx context.Context, obj *model.Tier) ([]*model.Reward, error) {
	panic(fmt.Errorf("not implemented: Rewards - rewards"))
}

// Metadata is the resolver for the metadata field.
func (r *tierResolver) Metadata(ctx context.Context, obj *model.Tier) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *tierResolver) CreatedAt(ctx context.Context, obj *model.Tier) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *tierResolver) UpdatedAt(ctx context.Context, obj *model.Tier) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *tierResolver) CreatedBy(ctx context.Context, obj *model.Tier) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *tierResolver) UpdatedBy(ctx context.Context, obj *model.Tier) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Tier returns TierResolver implementation.
func (r *Resolver) Tier() TierResolver { return &tierResolver{r} }

type tierResolver struct{ *Resolver }
