package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/internal/utils"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.UpdateProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *model.Product) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *productResolver) UID(ctx context.Context, obj *model.Product) (string, error) {
	return obj.UID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *productResolver) Name(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *productResolver) Description(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Notes is the resolver for the notes field.
func (r *productResolver) Notes(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Notes - notes"))
}

// Tips is the resolver for the tips field.
func (r *productResolver) Tips(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Tips - tips"))
}

// Highlights is the resolver for the highlights field.
func (r *productResolver) Highlights(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Highlights - highlights"))
}

// Expectation is the resolver for the expectation field.
func (r *productResolver) Expectation(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Expectation - expectation"))
}

// Faqs is the resolver for the faqs field.
func (r *productResolver) Faqs(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Faqs - faqs"))
}

// Rating is the resolver for the rating field.
func (r *productResolver) Rating(ctx context.Context, obj *model.Product) (float64, error) {
	panic(fmt.Errorf("not implemented: Rating - rating"))
}

// Metadata is the resolver for the metadata field.
func (r *productResolver) Metadata(ctx context.Context, obj *model.Product) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Created is the resolver for the created field.
func (r *productResolver) Created(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Created - created"))
}

// Updated is the resolver for the updated field.
func (r *productResolver) Updated(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Updated - updated"))
}

// Place is the resolver for the place field.
func (r *productResolver) Place(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Place - place"))
}

// Terms is the resolver for the terms field.
func (r *productResolver) Terms(ctx context.Context, obj *model.Product) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Terms - terms"))
}

// Places is the resolver for the places field.
func (r *productResolver) Places(ctx context.Context, obj *model.Product) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Places - places"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, filter map[string]interface{}, project map[string]interface{}, sort map[string]interface{}, collation map[string]interface{}, limit *int, skip *int) (*model.Products, error) {
	var items []*model.Product

	// Convert map to bson.M which is a type alias for map[string]interface{}
	_filter := utils.Filter(filter)
	opts := utils.Sort(sort)

	if project != nil {
		opts.SetProjection(project)
	}
	if limit != nil {
		opts.SetLimit(int64(*limit))
	}
	if skip != nil {
		opts.SetSkip(int64(*skip))
	}

	cursor, err := r.db.Collection("products").Find(ctx, _filter, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	if err = cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	//get total count
	count, err := r.db.Collection("products").CountDocuments(ctx, _filter, nil)
	if err != nil {
		return nil, err
	}

	return &model.Products{
		Count: int(count),
		Data:  items,
	}, nil
}

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
