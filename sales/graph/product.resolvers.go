package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.UpdateProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *model.Product) (string, error) {
	return obj.ID.Hex(), nil
}

// UID is the resolver for the uid field.
func (r *productResolver) UID(ctx context.Context, obj *model.Product) (string, error) {
	return obj.UID.Hex(), nil
}

// Name is the resolver for the name field.
func (r *productResolver) Name(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *productResolver) Description(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Metadata is the resolver for the metadata field.
func (r *productResolver) Metadata(ctx context.Context, obj *model.Product) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *productResolver) Created(ctx context.Context, obj *model.Product) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *productResolver) Updated(ctx context.Context, obj *model.Product) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Terms is the resolver for the terms field.
func (r *productResolver) Terms(ctx context.Context, obj *model.Product) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Terms - terms"))
}

// Place is the resolver for the place field.
func (r *productResolver) Place(ctx context.Context, obj *model.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: Place - place"))
}

// Places is the resolver for the places field.
func (r *productResolver) Places(ctx context.Context, obj *model.Product) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Places - places"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, stages map[string]interface{}) (*model.Products, error) {
	pipeline := bson.A{}

	// Add additional stages to the pipeline
	for key, value := range stages {
		stage := bson.D{{Key: key, Value: value}}
		pipeline = append(pipeline, stage)
	}

	cursor, err := r.db.Collection("products").Aggregate(ctx, pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var items []*model.Product

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return &model.Products{
		Count: int(cursor.RemainingBatchLength()),
		Data:  items,
	}, nil
}

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
