package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// DeleteProducts is the resolver for the deleteProducts field.
func (r *mutationResolver) DeleteProducts(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteProducts - deleteProducts"))
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *model.Product) (string, error) {
	return obj.ID.Hex(), nil
}

// Content is the resolver for the content field.
func (r *productResolver) Content(ctx context.Context, obj *model.Product) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: Content - content"))
}

// Name is the resolver for the name field.
func (r *productResolver) Name(ctx context.Context, obj *model.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Description is the resolver for the description field.
func (r *productResolver) Description(ctx context.Context, obj *model.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Prices is the resolver for the prices field.
func (r *productResolver) Prices(ctx context.Context, obj *model.Product) ([]*model.Price, error) {
	panic(fmt.Errorf("not implemented: Prices - prices"))
}

// Inventory is the resolver for the inventory field.
func (r *productResolver) Inventory(ctx context.Context, obj *model.Product) ([]*model.Inventory, error) {
	panic(fmt.Errorf("not implemented: Inventory - inventory"))
}

// Metadata is the resolver for the metadata field.
func (r *productResolver) Metadata(ctx context.Context, obj *model.Product) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *productResolver) CreatedAt(ctx context.Context, obj *model.Product) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *productResolver) UpdatedAt(ctx context.Context, obj *model.Product) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, args map[string]interface{}) (*model.Products, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
