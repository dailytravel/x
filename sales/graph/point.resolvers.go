package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/sales/graph/model"
)

// CreatePoint is the resolver for the createPoint field.
func (r *mutationResolver) CreatePoint(ctx context.Context, input model.NewPoint) (*model.Point, error) {
	panic(fmt.Errorf("not implemented: CreatePoint - createPoint"))
}

// UpdatePoint is the resolver for the updatePoint field.
func (r *mutationResolver) UpdatePoint(ctx context.Context, input model.UpdatePoint) (*model.Point, error) {
	panic(fmt.Errorf("not implemented: UpdatePoint - updatePoint"))
}

// DeletePoint is the resolver for the deletePoint field.
func (r *mutationResolver) DeletePoint(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeletePoint - deletePoint"))
}

// DeletePoints is the resolver for the deletePoints field.
func (r *mutationResolver) DeletePoints(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeletePoints - deletePoints"))
}

// ID is the resolver for the id field.
func (r *pointResolver) ID(ctx context.Context, obj *model.Point) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Target is the resolver for the target field.
func (r *pointResolver) Target(ctx context.Context, obj *model.Point) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Target - target"))
}

// Metadata is the resolver for the metadata field.
func (r *pointResolver) Metadata(ctx context.Context, obj *model.Point) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *pointResolver) CreatedAt(ctx context.Context, obj *model.Point) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *pointResolver) UpdatedAt(ctx context.Context, obj *model.Point) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// UID is the resolver for the uid field.
func (r *pointResolver) UID(ctx context.Context, obj *model.Point) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *pointResolver) CreatedBy(ctx context.Context, obj *model.Point) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *pointResolver) UpdatedBy(ctx context.Context, obj *model.Point) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Points is the resolver for the points field.
func (r *queryResolver) Points(ctx context.Context, args map[string]interface{}) (*model.Points, error) {
	panic(fmt.Errorf("not implemented: Points - points"))
}

// Point is the resolver for the point field.
func (r *queryResolver) Point(ctx context.Context, id string) (*model.Point, error) {
	panic(fmt.Errorf("not implemented: Point - point"))
}

// Point returns PointResolver implementation.
func (r *Resolver) Point() PointResolver { return &pointResolver{r} }

type pointResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *pointResolver) User(ctx context.Context, obj *model.Point) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
