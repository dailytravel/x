package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/sales/graph/model"
	"github.com/dailytravel/x/sales/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreatePoint is the resolver for the createPoint field.
func (r *mutationResolver) CreatePoint(ctx context.Context, input model.NewPoint) (*model.Point, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Point{
		UID: *uid,
		Target: model.Target{
			ID:   input.Target["id"].(primitive.ObjectID),
			Type: input.Target["type"].(model.PointType),
		},
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
			Metadata:  input.Metadata,
		},
	}

	// Set the fields from the input
	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdatePoint is the resolver for the updatePoint field.
func (r *mutationResolver) UpdatePoint(ctx context.Context, id string, input model.UpdatePoint) (*model.Point, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create an update document with the fields to be updated
	item := &model.Point{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Type != nil {
		item.Type = *input.Type
	}

	if input.Points != nil {
		item.Points = *input.Points
	}

	if input.ExpiresAt != nil {
		expiresAt := primitive.Timestamp{T: uint32(time.Now().Unix())}
		item.ExpiresAt = expiresAt
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Update the updated_by and updated_at fields
	item.UpdatedBy = uid

	// Perform the update in the database
	res, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, item)
	if err != nil {
		return nil, err
	}

	// Check if the coupon was actually updated
	if res.ModifiedCount == 0 {
		return nil, fmt.Errorf("no coupon was updated")
	}

	return item, nil
}

// DeletePoint is the resolver for the deletePoint field.
func (r *mutationResolver) DeletePoint(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to an ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Define the filter to match the given ID
	filter := bson.M{"_id": _id}

	// Define the update to mark the record as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("points").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	if result.ModifiedCount == 0 {
		return nil, fmt.Errorf("point not found")
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeletePoints is the resolver for the deletePoints field.
func (r *mutationResolver) DeletePoints(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark records as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("points").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// ID is the resolver for the id field.
func (r *pointResolver) ID(ctx context.Context, obj *model.Point) (string, error) {
	return obj.ID.Hex(), nil
}

// Target is the resolver for the target field.
func (r *pointResolver) Target(ctx context.Context, obj *model.Point) (map[string]interface{}, error) {
	var item map[string]interface{}

	filter := bson.M{"_id": obj.Target.ID}
	if err := r.db.Collection(obj.Target.Type.String()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Type is the resolver for the type field.
func (r *pointResolver) Type(ctx context.Context, obj *model.Point) (model.PointType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Metadata is the resolver for the metadata field.
func (r *pointResolver) Metadata(ctx context.Context, obj *model.Point) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// ExpiresAt is the resolver for the expires_at field.
func (r *pointResolver) ExpiresAt(ctx context.Context, obj *model.Point) (string, error) {
	panic(fmt.Errorf("not implemented: ExpiresAt - expires_at"))
}

// CreatedAt is the resolver for the created_at field.
func (r *pointResolver) CreatedAt(ctx context.Context, obj *model.Point) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *pointResolver) UpdatedAt(ctx context.Context, obj *model.Point) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UID is the resolver for the uid field.
func (r *pointResolver) UID(ctx context.Context, obj *model.Point) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *pointResolver) CreatedBy(ctx context.Context, obj *model.Point) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *pointResolver) UpdatedBy(ctx context.Context, obj *model.Point) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// Points is the resolver for the points field.
func (r *queryResolver) Points(ctx context.Context, args map[string]interface{}) (*model.Points, error) {
	var items []*model.Point
	//find all items
	cur, err := r.db.Collection("points").Find(ctx, utils.Query(args), utils.Options(args))
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Point
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("points").CountDocuments(ctx, utils.Query(args), nil)
	if err != nil {
		return nil, err
	}

	return &model.Points{
		Count: int(count),
		Data:  items,
	}, nil
}

// Point is the resolver for the point field.
func (r *queryResolver) Point(ctx context.Context, id string) (*model.Point, error) {
	var item *model.Point

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	if err := r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("document not found")
		}
		return nil, err
	}

	return item, nil
}

// Point returns PointResolver implementation.
func (r *Resolver) Point() PointResolver { return &pointResolver{r} }

type pointResolver struct{ *Resolver }
