type Package {
  id: ID!
  locale: String!
  name: String!
  description: String!
  details: [ID!]!
  includes: [String!]!
  excludes: [String!]!
  metadata: Map
  status: String!
  created: String!
  updated: String!
  product: Product!
  variants: [Variant!]!
}

type Packages {
  total: Int!
  data: [Package]
}

input NewPackage {
  locale: String!
  name: String!
  description: String!
  details: [ID!]!
  includes: [String!]!
  excludes: [String!]!
  images: [String!]
  metadata: Map
  product: ID!
}

input UpdatePackage {
  locale: String
  name: String
  description: String
  details: [ID!]
  includes: [String!]
  excludes: [String!]
  images: [String!]
  metadata: Map
}

extend type Query {
  package(id: ID!): Package
  packages(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Packages
}

extend type Mutation {
  createPackage(input: NewPackage!): Package @auth
  updatePackage(id: ID!, input: UpdatePackage!): Package @auth
  deletePackage(id: ID!): Package @auth
}
