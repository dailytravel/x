type Quote {
  id: ID!
  locale: String!
  contact: Contact
  code: String!
  purchase: String!
  name: String!
  description: String
  terms: String
  payment: String
  notes: String
  template: String!
  validUntil: Int!
  amount: Float!
  currency: String!
  metadata: Map
  billing: Map!
  status: String
  created: String!
  updated: String!
  uid: ID!
  shares: [ID]
}

type Quotes {
  count: Int!
  data: [Quote]
}

input NewQuote {
  uid: ID!
  contact: String
  locale: String!
  code: String!
  purchase: String!
  name: String!
  description: String
  terms: String
  notes: String
  template: String!
  validUntil: Int!
  amount: Float!
  currency: String!
  billing: Map!
  metadata: Map
  status: String
  shares: [ID]
}

input UpdateQuote {
  uid: ID
  contact: String
  locale: String
  code: String
  purchase: String
  name: String
  description: String
  terms: String
  notes: String
  template: String
  validUntil: Int
  amount: Float
  currency: String
  billing: Map
  metadata: Map
  status: String
  shares: [ID]
}

extend type Query {
  quotes(stages: Map): Quotes @auth
  quote(id: ID!): Quote @auth
}

extend type Mutation {
  createQuote(input: NewQuote): Quote
  updateQuote(id: ID!, input: UpdateQuote!): Quote
  deleteQuote(id: ID!): Map @auth
  deleteQuotes(ids: [ID!]!): Map @auth
}
