type Point {
  id: ID!
  target: Map! #program, reward
  points: Int!
  type: PointType!
  metadata: Map
  expires_at: String!
  created_at: String!
  updated_at: String!
  uid: ID!
  created_by: ID
  updated_by: ID
}

enum PointType {
  EARN
  REDEEM
  TRANSFER
  ADJUSTMENT
}

type Points {
  count: Int!
  data: [Point]
}

input NewPoint {
  points: Int!
  type: String! # "earn", "redeem", "adjustment"
  target: Map! #program, reward
  expires_at: String
  metadata: Map
  status: String! # "pending", "completed", "failed"
}

input UpdatePoint {
  points: Int
  type: String # "earn", "redeem", "adjustment"
  expires_at: String
  target: Map #program, reward
  metadata: Map
  status: String # "pending", "completed", "failed"
}

extend type Query {
  points(args: Map): Points @auth
  point(id: ID!): Point @auth
}

extend type Mutation {
  createPoint(input: NewPoint!): Point @auth
  updatePoint(id: ID!, input: UpdatePoint!): Point @auth
  deletePoint(id: ID!): Map @auth
  deletePoints(ids: [ID!]!): Map @auth
}
