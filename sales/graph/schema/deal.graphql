type Deal {
  id: ID!
  type: String!
  name: String!
  amount: Float!
  currency: String!
  close_date: String!
  pipeline: Pipeline!
  stage: String! #Qualified, Follow-up, Presentation, Contract Sent, Negotiation, Closed Won, Closed Lost
  priority: String!
  source: String! #advertising, call, email, other
  lose_reason: String #competitor, features, price, other
  description: String!
  order: Int
  user: User
  contact: Contact!
  metadata: Map
  status: String! #open, won, lost, abandoned, negotiation
  created_at: String!
  updated_at: String!
}

type Deals {
  data: [Deal]
  count: Int
}

input NewDeal {
  type: String!
  name: String!
  amount: Float!
  currency: String!
  close_date: String!
  pipeline_id: ID!
  stage: String! #Qualified, Follow-up, Presentation, Contract Sent, Negotiation, Closed Won, Closed Lost
  priority: String!
  source: String! #advertising, call, email, other
  lose_reason: String #competitor, features, price, other
  description: String!
  order: Int
  user_id: ID
  contact_id: ID!
  metadata: Map
  status: String! #open, won, lost, abandoned, negotiation
}

input UpdateDeal {
  type: String
  name: String
  amount: Float
  currency: String
  close_date: String
  pipeline_id: ID
  stage: String #Qualified, Follow-up, Presentation, Contract Sent, Negotiation, Closed Won, Closed Lost
  priority: String
  source: String #advertising, call, email, other
  lose_reason: String #competitor, features, price, other
  description: String
  order: Int
  user_id: ID
  contact_id: ID
  metadata: Map
  status: String #open, won, lost, abandoned, negotiation
}

extend type Query {
  deal(id: ID!): Deal
  deals(args: Map): Deals
}

extend type Mutation {
  createDeal(input: NewDeal!): Deal
  updateDeal(id: ID!, input: UpdateDeal!): Deal
  deleteDeal(id: ID!): Deal
}
