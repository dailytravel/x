type Price {
  id: ID!
  product: Product!
  start_date: String
  end_date: String
  regular: Float!
  sale: Float
  metadata: Map
  created_by: ID
  updated_by: ID
}

type Prices {
  data: [Price]
  count: Int!
}

input NewPrice {
  start_date: String
  end_date: String
  regular: Float!
  sale: Float
  metadata: Map
}

input UpdatePrice {
  start_date: String
  end_date: String
  regular: Float
  sale: Float
  metadata: Map
}

extend type Query {
  price(id: ID!): Price
  prices(product: ID!, start_date: String!, end_date: String!): Prices
}

extend type Mutation {
  createPrice(product: ID!, input: NewPrice!): Price
  updatePrice(id: ID!, input: UpdatePrice!): Price
  deletePrice(id: ID!): Map
  deletePrices(ids: [ID!]!): Map
}
