type Item {
  id: ID!
  uid: ID!
  product: Product!
  package: String!
  locale: String!
  type: String!
  name: String!
  description: String
  quantity: Int!
  price: Float!
  discount: Float
  currency: String!
  coupon: String
  metadata: Map
  status: String
  created: String!
  updated: String!
}

type Items {
  items: [Item] @auth
  count: Int! @auth
}

input NewItem {
  product: ID!
  package: ID
  locale: String
  type: String
  code: String
  name: String
  description: String
  quantity: Int
  price: Float
  discount: Float
  currency: String
  coupon: String
  metadata: Map
  status: String
}

input UpdateItem {
  product: ID
  package: ID
  locale: String
  type: String
  code: String
  name: String
  description: String
  quantity: Int
  price: Float
  discount: Float
  currency: String
  coupon: String
  metadata: Map
  status: String
}

extend type Query {
  items(stages: Map): Items
  item(id: ID!): Item
}

extend type Mutation {
  createItem(input: NewItem!): Item @auth
  updateItem(id: ID!, input: UpdateItem!): Item @auth
  deleteItem(id: ID!): Item @auth
  deleteItems(filter: Map): [Item] @auth
}
