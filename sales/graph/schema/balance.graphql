type Balance {
  id: ID!
  type: String! #earn, redeem, transfer
  credits: Int! #positive or negative
  notes: String
  metadata: Map
  status: String!
  created: String!
  updated: String!
  uid: ID!
}

type Balances {
  count: Int!
  data: [Balance]
}

input NewBalance {
  uid: ID!
  type: String! #earn, redeem, transfer
  credits: Int!
  notes: String
  metadata: Map
  status: String!
}

input UpdateBalance {
  type: String #earn, redeem, transfer
  credits: Int
  notes: String
  metadata: Map
  status: String
}

extend type Query {
  balance(id: ID!): Balance @auth
  balances(stages: Map): Balances @auth
}

extend type Mutation {
  createBalance(input: NewBalance!): Balance @auth(roles: [ADMIN])
  updateBalance(id: ID!, input: UpdateBalance!): Balance @auth(roles: [ADMIN])
  deleteBalance(id: ID!): Map @auth(roles: [ADMIN])
  deleteBalances(ids: [ID!]!): Map @auth(roles: [ADMIN])
}
