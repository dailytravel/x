type Product @key(fields: "id") {
  id: ID!
  uid: ID!
  locale: String!
  type: String!
  slug: String!
  name: String!
  description: String!
  duration: String!
  reviewable: Boolean!
  metadata: Map
  status: String!
  created: String!
  updated: String!
  terms: [ID]
  place: ID
  places: [ID]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  PENDING
  ARCHIVED
}

type Products {
  count: Int!
  data: [Product]
}

input NewProduct {
  uid: ID
  locale: String!
  type: String!
  slug: String!
  name: String!
  description: String!
  duration: String!
  reviewable: Boolean!
  metadata: Map
  status: String!
  terms: [ID]
  place: ID
  places: [ID]
}

input UpdateProduct {
  locale: String
  type: String
  slug: String
  name: String
  description: String
  duration: String
  reviewable: Boolean
  metadata: Map
  status: String
  terms: [ID]
  place: ID
  places: [ID]
}

extend type Query {
  product(id: ID!): Product
  products(stages: Map): Products
}

extend type Mutation {
  createProduct(input: NewProduct!): Product @auth
  updateProduct(id: ID!, input: UpdateProduct!): Product @auth
  deleteProduct(id: ID!): Boolean @auth
}
