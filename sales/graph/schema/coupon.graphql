type Coupon {
  id: ID!
  locale: String!
  code: String!
  description: String!
  type: String!
  amount: Float!
  max_discount: Float
  currency: String!
  start_date: String!
  end_date: Int!
  max_uses: Int
  min_purchase: Float
  uses: Int
  metadata: Map
  created_at: String!
  updated_at: String!
  uid: ID!
  created_by: ID
  updated_by: ID
}

type Coupons {
  data: [Coupon]
  count: Int!
}

enum DiscountType {
  PERCENTAGE_OFF
  FIXED_AMOUNT_OFF
}

input NewCoupon {
  locale: String!
  code: String!
  description: String!
  type: DiscountType!
  amount: Float!
  max_discount: Float
  currency: String!
  start_date: String!
  end_date: Int!
  products: [ID!]
  max_uses: Int
  min_purchase: Float
  metadata: Map
}

input UpdateCoupon {
  locale: String!
  code: String
  description: String
  type: DiscountType
  amount: Float
  max_discount: Float
  currency: String
  start_date: String
  end_date: Int
  products: [ID!]
  max_uses: Int
  min_purchase: Float
  metadata: Map
}

extend type Query {
  coupon(id: ID!): Coupon @auth
  coupons(args: Map): Coupons @auth
}

extend type Mutation {
  createCoupon(input: NewCoupon!): Coupon @auth
  updateCoupon(id: ID!, input: UpdateCoupon!): Coupon @auth
  deleteCoupon(id: ID!): Map @auth
  deleteCoupons(ids: [ID!]!): Map @auth
}
