type Contract {
  id: ID!
  contact: Contact!
  reference: String!
  description: String!
  amount: Float!
  currency: String!
  start_date: String!
  end_date: String!
  auto_renew: Boolean!
  metadata: Map
  status: String! #"draft" | "active" | "completed" | "canceled";
  created_at: String!
  updated_at: String!
  uid: ID!
  created_by: ID
  updated_by: ID
}

type Contracts {
  data: [Contract]
  count: Int!
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

input NewContract {
  uid: ID!
  contact: ID!
  reference: String!
  description: String!
  amount: Float!
  currency: String!
  start_date: String!
  end_date: String!
  auto_renew: Boolean!
  categories: [ID!]
  metadata: Map
  status: String! #"draft" | "active" | "completed" | "canceled";
}

input UpdateContract {
  uid: ID
  contact: ID
  reference: String
  description: String
  amount: Float
  currency: String
  start_date: String
  end_date: String
  auto_renew: Boolean
  categories: [ID!]
  metadata: Map
  status: String #"draft" | "active" | "completed" | "canceled";
}

extend type Query {
  contract(id: ID!): Contract @auth
  contracts(args: Map): Contracts @auth
}

extend type Mutation {
  createContract(input: NewContract!): Contract @auth(requires: [ADMIN])
  updateContract(id: ID!, input: UpdateContract!): Contract
    @auth(requires: [ADMIN])
  deleteContract(id: ID!): Map @auth(requires: [ADMIN])
  deleteContracts(ids: [ID!]!): Map @auth(requires: [ADMIN])
}
