type Contact @key(fields: "id") {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  picture: String
  street: String
  city: String
  state: String
  zip: String
  country: String
  website: String
  gender: String
  birthday: String
  company: Company
  jobTitle: String
  timezone: String
  language: String
  source: String
  subscribed: Boolean
  rating: Int
  notes: String
  status: String
  labels: [String]
  metadata: Map
  lastActivity: String
  createdAt: String!
  updatedAt: String!
  uid: ID!
  createdBy: ID
  updatedBy: ID
}

type Phone {
  mobile: String
  work: String
  home: String
  other: String
}

input PhoneInput {
  mobile: String
  work: String
  home: String
  other: String
}

type Email {
  personal: String
  work: String
  other: String
}

input EmailInput {
  personal: String
  work: String
  other: String
}

type Contacts {
  count: Int!
  data: [Contact]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PhoneType {
  HOME
  MOBILE
  WORK
  OTHER
}

enum EmailType {
  PERSONAL
  WORK
  OTHER
}

enum ContactStage {
  NEW
  NURTURING
  QUALIFIED
  CLOSED_LOST
  CLOSED_WON
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

input NewContact {
  company: ID
  uid: ID
  firstName: String
  lastName: String
  picture: String
  email: String!
  phone: String
  street: String
  city: String
  state: String
  zip: String
  country: String
  website: String
  birthday: String
  jobTitle: String
  gender: String
  timezone: String
  language: String
  source: String!
  rating: Int
  notes: String
  stage: String
  status: String
  labels: [String]
  metadata: Map
}

input UpdateContact {
  company: ID
  uid: ID
  firstName: String
  lastName: String
  picture: String
  email: String
  phone: String
  street: String
  city: String
  state: String
  zip: String
  country: String
  website: String
  birthday: String
  jobTitle: String
  gender: String
  timezone: String
  language: String
  source: String
  rating: Int
  notes: String
  stage: String
  status: String
  labels: [String]
  metadata: Map
}

extend type Query {
  contacts(args: Map): Map @auth @api
  contact(id: ID!): Contact @auth
}

extend type Mutation {
  createContact(input: NewContact!): Contact @auth
  updateContact(id: ID!, input: UpdateContact!): Contact @auth
  importContacts(file: String!): Map @auth
  deleteContact(id: ID!): Map @auth
  deleteContacts(ids: [ID!]!): Map @auth
}
