type Order {
  id: ID!
  code: String!
  cancellable: Boolean!
  payment: String!
  coupon: String
  uid: ID!
  items: [Item]
  metadata: Map
  status: String!
  created: String!
  updated: String!
}

type Orders {
  data: [Order]
  count: Int!
}

input NewOrder {
  code: String!
  cancellable: Boolean!
  payment: String!
  coupon: String
  uid: ID!
  items: [ID!]!
  metadata: Map
  status: String!
}

input UpdateOrder {
  code: String
  cancellable: Boolean
  payment: String
  coupon: String
  uid: ID
  items: [ID!]
  metadata: Map
  status: String
}

extend type Query {
  order(id: ID!): Order @auth
  orders(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Orders @auth
}

extend type Mutation {
  createOrder(input: NewOrder!): Order @auth
  updateOrder(id: ID!, input: UpdateOrder!): Order @auth
  deleteOrder(id: ID!): Map @auth
  deleteOrders(ids: [ID!]!): Map @auth
}
