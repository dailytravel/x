// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID string `json:"id"`
}

func (Comment) IsEntity() {}

type Expenses struct {
	Count int        `json:"count"`
	Data  []*Expense `json:"data,omitempty"`
}

type Invoices struct {
	Data  []*Invoice `json:"data,omitempty"`
	Count int        `json:"count"`
}

type NewExpense struct {
	Type        string                 `json:"type"`
	Code        *string                `json:"code,omitempty"`
	Description string                 `json:"description"`
	Amount      float64                `json:"amount"`
	Currency    string                 `json:"currency"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Date        string                 `json:"date"`
	User        string                 `json:"user"`
	Notes       *string                `json:"notes,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type NewInvoice struct {
	Code     *string                `json:"code,omitempty"`
	Template *string                `json:"template,omitempty"`
	Amount   *int                   `json:"amount,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Billing  map[string]interface{} `json:"billing,omitempty"`
	DueDate  *string                `json:"due_date,omitempty"`
	Notes    *string                `json:"notes,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateExpense struct {
	Type        *string                `json:"type,omitempty"`
	Code        *string                `json:"code,omitempty"`
	Description *string                `json:"description,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Date        *string                `json:"date,omitempty"`
	Amount      *float64               `json:"amount,omitempty"`
	Currency    *string                `json:"currency,omitempty"`
	User        *string                `json:"user,omitempty"`
	Notes       *string                `json:"notes,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type UpdateInvoice struct {
	Code     *string                `json:"code,omitempty"`
	Template *string                `json:"template,omitempty"`
	Amount   *int                   `json:"amount,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Billing  map[string]interface{} `json:"billing,omitempty"`
	DueDate  *string                `json:"due_date,omitempty"`
	Notes    *string                `json:"notes,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type ExpenseStatus string

const (
	ExpenseStatusDraft     ExpenseStatus = "DRAFT"
	ExpenseStatusSubmitted ExpenseStatus = "SUBMITTED"
	ExpenseStatusApproved  ExpenseStatus = "APPROVED"
	ExpenseStatusRejected  ExpenseStatus = "REJECTED"
	ExpenseStatusPaid      ExpenseStatus = "PAID"
)

var AllExpenseStatus = []ExpenseStatus{
	ExpenseStatusDraft,
	ExpenseStatusSubmitted,
	ExpenseStatusApproved,
	ExpenseStatusRejected,
	ExpenseStatusPaid,
}

func (e ExpenseStatus) IsValid() bool {
	switch e {
	case ExpenseStatusDraft, ExpenseStatusSubmitted, ExpenseStatusApproved, ExpenseStatusRejected, ExpenseStatusPaid:
		return true
	}
	return false
}

func (e ExpenseStatus) String() string {
	return string(e)
}

func (e *ExpenseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExpenseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExpenseStatus", str)
	}
	return nil
}

func (e ExpenseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExpenseType string

const (
	ExpenseTypeDebit  ExpenseType = "DEBIT"
	ExpenseTypeCredit ExpenseType = "CREDIT"
)

var AllExpenseType = []ExpenseType{
	ExpenseTypeDebit,
	ExpenseTypeCredit,
}

func (e ExpenseType) IsValid() bool {
	switch e {
	case ExpenseTypeDebit, ExpenseTypeCredit:
		return true
	}
	return false
}

func (e ExpenseType) String() string {
	return string(e)
}

func (e *ExpenseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExpenseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExpenseType", str)
	}
	return nil
}

func (e ExpenseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Payer string

const (
	PayerEmployee Payer = "EMPLOYEE"
	PayerCompany  Payer = "COMPANY"
)

var AllPayer = []Payer{
	PayerEmployee,
	PayerCompany,
}

func (e Payer) IsValid() bool {
	switch e {
	case PayerEmployee, PayerCompany:
		return true
	}
	return false
}

func (e Payer) String() string {
	return string(e)
}

func (e *Payer) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Payer(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Payer", str)
	}
	return nil
}

func (e Payer) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
