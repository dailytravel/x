type Expense {
  id: ID!
  reference: String!
  type: String! #debit or credit
  description: String!
  amount: Float!
  currency: String!
  metadata: Map
  status: String
  date: String!
  notes: String
  createdAt: String!
  updatedAt: String!
  uid: ID!
  createdBy: ID
  updatedBy: ID
}

enum ExpenseType {
  DEBIT
  CREDIT
}

enum ExpenseStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  PAID
}

enum Payer {
  EMPLOYEE
  COMPANY
}

type Expenses {
  count: Int!
  data: [Expense]
}

input NewExpense {
  type: String!
  reference: String
  description: String!
  amount: Float!
  currency: String!
  metadata: Map
  status: String
  date: String!
  user: ID!
  notes: String
  categories: [ID!]
}

input UpdateExpense {
  type: String
  reference: String
  description: String
  metadata: Map
  status: String
  date: String
  amount: Float
  currency: String
  user: ID
  notes: String
  categories: [ID!]
}

extend type Query {
  expenses(args: Map): Expenses @auth
  expense(id: ID!): Expense @auth
}

extend type Mutation {
  createExpense(input: NewExpense!): Expense @auth
  updateExpense(id: ID!, input: UpdateExpense!): Expense @auth
  deleteExpense(id: ID!): Boolean! @auth
  deleteExpenses(ids: [ID!]!): Boolean! @auth
}
