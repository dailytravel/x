package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/finance/graph/model"
)

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input model.PaymentInput) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: CreatePayment - createPayment"))
}

// UpdatePayment is the resolver for the updatePayment field.
func (r *mutationResolver) UpdatePayment(ctx context.Context, id string, input model.UpdatePayment) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: UpdatePayment - updatePayment"))
}

// DeletePayment is the resolver for the deletePayment field.
func (r *mutationResolver) DeletePayment(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeletePayment - deletePayment"))
}

// ID is the resolver for the id field.
func (r *paymentResolver) ID(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Date is the resolver for the date field.
func (r *paymentResolver) Date(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// Metadata is the resolver for the metadata field.
func (r *paymentResolver) Metadata(ctx context.Context, obj *model.Payment) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Invoice is the resolver for the invoice field.
func (r *paymentResolver) Invoice(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: Invoice - invoice"))
}

// UID is the resolver for the uid field.
func (r *paymentResolver) UID(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// Created is the resolver for the created field.
func (r *paymentResolver) Created(ctx context.Context, obj *model.Payment) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *paymentResolver) Updated(ctx context.Context, obj *model.Payment) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Payment is the resolver for the payment field.
func (r *queryResolver) Payment(ctx context.Context, id string) (*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payment - payment"))
}

// Payments is the resolver for the payments field.
func (r *queryResolver) Payments(ctx context.Context) ([]*model.Payment, error) {
	panic(fmt.Errorf("not implemented: Payments - payments"))
}

// Payment returns PaymentResolver implementation.
func (r *Resolver) Payment() PaymentResolver { return &paymentResolver{r} }

type paymentResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *paymentResolver) CreatedAt(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}
func (r *paymentResolver) UpdatedAt(ctx context.Context, obj *model.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}
func (r *paymentResolver) CreatedBy(ctx context.Context, obj *model.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}
func (r *paymentResolver) UpdatedBy(ctx context.Context, obj *model.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}
