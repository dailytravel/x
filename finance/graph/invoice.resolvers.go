package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/finance/graph/model"
)

// ID is the resolver for the id field.
func (r *invoiceResolver) ID(ctx context.Context, obj *model.Invoice) (string, error) {
	return obj.ID.Hex(), nil
}

// Amount is the resolver for the amount field.
func (r *invoiceResolver) Amount(ctx context.Context, obj *model.Invoice) (int, error) {
	panic(fmt.Errorf("not implemented: Amount - amount"))
}

// Billing is the resolver for the billing field.
func (r *invoiceResolver) Billing(ctx context.Context, obj *model.Invoice) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Billing - billing"))
}

// DueDate is the resolver for the due_date field.
func (r *invoiceResolver) DueDate(ctx context.Context, obj *model.Invoice) (string, error) {
	panic(fmt.Errorf("not implemented: DueDate - due_date"))
}

// Metadata is the resolver for the metadata field.
func (r *invoiceResolver) Metadata(ctx context.Context, obj *model.Invoice) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// UID is the resolver for the uid field.
func (r *invoiceResolver) UID(ctx context.Context, obj *model.Invoice) (string, error) {
	return obj.ID.Hex(), nil
}

// Contact is the resolver for the contact field.
func (r *invoiceResolver) Contact(ctx context.Context, obj *model.Invoice) (string, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// Created is the resolver for the created field.
func (r *invoiceResolver) Created(ctx context.Context, obj *model.Invoice) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *invoiceResolver) Updated(ctx context.Context, obj *model.Invoice) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// CreateInvoice is the resolver for the createInvoice field.
func (r *mutationResolver) CreateInvoice(ctx context.Context, input model.NewInvoice) (*model.Invoice, error) {
	panic(fmt.Errorf("not implemented: CreateInvoice - createInvoice"))
}

// UpdateInvoice is the resolver for the updateInvoice field.
func (r *mutationResolver) UpdateInvoice(ctx context.Context, id string, input model.UpdateInvoice) (*model.Invoice, error) {
	panic(fmt.Errorf("not implemented: UpdateInvoice - updateInvoice"))
}

// DeleteInvoice is the resolver for the deleteInvoice field.
func (r *mutationResolver) DeleteInvoice(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteInvoice - deleteInvoice"))
}

// Invoice is the resolver for the invoice field.
func (r *queryResolver) Invoice(ctx context.Context, id string) (*model.Invoice, error) {
	panic(fmt.Errorf("not implemented: Invoice - invoice"))
}

// Invoices is the resolver for the invoices field.
func (r *queryResolver) Invoices(ctx context.Context, filter map[string]interface{}, project map[string]interface{}, sort map[string]interface{}, collation map[string]interface{}, limit *int, skip *int) (*model.Invoices, error) {
	panic(fmt.Errorf("not implemented: Invoices - invoices"))
}

// Invoice returns InvoiceResolver implementation.
func (r *Resolver) Invoice() InvoiceResolver { return &invoiceResolver{r} }

type invoiceResolver struct{ *Resolver }
