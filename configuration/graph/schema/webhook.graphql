type Webhook {
  id: ID!
  name: String!
  url: String!
  headers: [WebhookHeader!]
  events: [WebhookEvent]

  createdBy: String
  updatedBy: String
}

type Webhooks {
  data: [Webhook]
  count: Int!
}

type WebhookHeader {
  key: String!
  value: String!
}

type WebhookEvent {
  objectId: ID!
  objectType: String!
  actions: [WebhookEventAction]
}

enum WebhookEventAction {
  CREATE
  UPDATE
  DELETE
  PUBLISH
  UNPUBLISH
}

input NewWebhook {
  name: String!
  url: String!
  headers: [WebhookHeaderInput!]
  events: [WebhookEventInput]
}

input UpdateWebhook {
  name: String
  url: String
  headers: [WebhookHeaderInput!]
  events: [WebhookEventInput]
}

input WebhookHeaderInput {
  key: String!
  value: String
}

input WebhookEventInput {
  objectId: ID!
  objectType: String!
  actions: [WebhookEventAction]
}

extend type Query {
  webhooks(stages: Map): [Webhook]
  webhook(id: ID!): Webhook
}

extend type Mutation {
  createWebhook(input: NewWebhook!): Webhook!
  updateWebhook(id: ID!, input: UpdateWebhook!): Webhook!
  deleteWebhook(id: ID!): Map @auth
  deleteWebhooks(ids: [ID!]!): Map @auth
}
