package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/configuration/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateOption is the resolver for the createOption field.
func (r *mutationResolver) CreateOption(ctx context.Context, input model.NewOption) (*model.Option, error) {
	panic(fmt.Errorf("not implemented: CreateOption - createOption"))
}

// UpdateOption is the resolver for the updateOption field.
func (r *mutationResolver) UpdateOption(ctx context.Context, id string, input model.UpdateOption) (*model.Option, error) {
	panic(fmt.Errorf("not implemented: UpdateOption - updateOption"))
}

// UpsertOption is the resolver for the upsertOption field.
func (r *mutationResolver) UpsertOption(ctx context.Context, name string, data *string) (*model.Option, error) {
	panic(fmt.Errorf("not implemented: UpsertOption - upsertOption"))
}

// DeleteOption is the resolver for the deleteOption field.
func (r *mutationResolver) DeleteOption(ctx context.Context, id string) (map[string]interface{}, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	res, err := r.db.Collection("options").DeleteOne(ctx, bson.M{"_id": _id})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// DeleteOptions is the resolver for the deleteOptions field.
func (r *mutationResolver) DeleteOptions(ctx context.Context, ids []string) (map[string]interface{}, error) {
	var _ids []primitive.ObjectID

	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids = append(_ids, _id)
	}

	res, err := r.db.Collection("options").DeleteMany(ctx, bson.M{"_id": bson.M{"$in": _ids}})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// ID is the resolver for the id field.
func (r *optionResolver) ID(ctx context.Context, obj *model.Option) (string, error) {
	return obj.ID.Hex(), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *optionResolver) CreatedAt(ctx context.Context, obj *model.Option) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *optionResolver) UpdatedAt(ctx context.Context, obj *model.Option) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Option is the resolver for the option field.
func (r *queryResolver) Option(ctx context.Context, name string) (*model.Option, error) {
	panic(fmt.Errorf("not implemented: Option - option"))
}

// Options is the resolver for the options field.
func (r *queryResolver) Options(ctx context.Context, args map[string]interface{}) (*model.Options, error) {
	panic(fmt.Errorf("not implemented: Options - options"))
}

// Option returns OptionResolver implementation.
func (r *Resolver) Option() OptionResolver { return &optionResolver{r} }

type optionResolver struct{ *Resolver }
