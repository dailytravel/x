package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/configuration/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateWebhook is the resolver for the createWebhook field.
func (r *mutationResolver) CreateWebhook(ctx context.Context, input model.NewWebhook) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: CreateWebhook - createWebhook"))
}

// UpdateWebhook is the resolver for the updateWebhook field.
func (r *mutationResolver) UpdateWebhook(ctx context.Context, id string, input model.UpdateWebhook) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: UpdateWebhook - updateWebhook"))
}

// DeleteWebhook is the resolver for the deleteWebhook field.
func (r *mutationResolver) DeleteWebhook(ctx context.Context, id string) (map[string]interface{}, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	res, err := r.db.Collection("webhooks").DeleteOne(ctx, bson.M{"_id": _id})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// DeleteWebhooks is the resolver for the deleteWebhooks field.
func (r *mutationResolver) DeleteWebhooks(ctx context.Context, ids []string) (map[string]interface{}, error) {
	var _ids []primitive.ObjectID

	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids = append(_ids, _id)
	}

	res, err := r.db.Collection("webhooks").DeleteMany(ctx, bson.M{"_id": bson.M{"$in": _ids}})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// Webhooks is the resolver for the webhooks field.
func (r *queryResolver) Webhooks(ctx context.Context, args map[string]interface{}) ([]*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: Webhooks - webhooks"))
}

// Webhook is the resolver for the webhook field.
func (r *queryResolver) Webhook(ctx context.Context, id string) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: Webhook - webhook"))
}

// ID is the resolver for the id field.
func (r *webhookResolver) ID(ctx context.Context, obj *model.Webhook) (string, error) {
	return obj.ID.Hex(), nil
}

// Headers is the resolver for the headers field.
func (r *webhookResolver) Headers(ctx context.Context, obj *model.Webhook) ([]*model.WebhookHeader, error) {
	panic(fmt.Errorf("not implemented: Headers - headers"))
}

// Events is the resolver for the events field.
func (r *webhookResolver) Events(ctx context.Context, obj *model.Webhook) ([]*model.WebhookEvent, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// CreatedAt is the resolver for the created_at field.
func (r *webhookResolver) CreatedAt(ctx context.Context, obj *model.Webhook) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *webhookResolver) UpdatedAt(ctx context.Context, obj *model.Webhook) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *webhookResolver) CreatedBy(ctx context.Context, obj *model.Webhook) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *webhookResolver) UpdatedBy(ctx context.Context, obj *model.Webhook) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Webhook returns WebhookResolver implementation.
func (r *Resolver) Webhook() WebhookResolver { return &webhookResolver{r} }

type webhookResolver struct{ *Resolver }
