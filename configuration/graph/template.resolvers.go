package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/configuration/graph/model"
	"github.com/dailytravel/x/configuration/internal/utils"
	"github.com/dailytravel/x/configuration/pkg/auth"
	"github.com/typesense/typesense-go/typesense/api/pointer"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input model.NewTemplate) (*model.Template, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Template{
		Locale:  input.Locale,
		Subject: bson.M{input.Locale: input.Subject},
		Body:    bson.M{input.Locale: input.Body},
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
			Metadata:  input.Metadata,
		},
	}

	// Set the fields from the input
	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, id string, input model.UpdateTemplate) (*model.Template, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Create an update document with the fields to be updated
	item := &model.Template{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Subject != nil {
		item.Subject[item.Locale] = *input.Subject
	}

	if input.Body != nil {
		item.Body[item.Locale] = *input.Body
	}

	if input.Metadata != nil {
		for k, v := range input.Metadata {
			item.Metadata[k] = v
		}
	}

	// Update the updated_by and updated_at fields
	item.UpdatedBy = uid

	// Perform the update in the database
	res, err := r.db.Collection(item.Collection()).UpdateOne(ctx, filter, item)
	if err != nil {
		return nil, err
	}

	// Check if the coupon was actually updated
	if res.ModifiedCount == 0 {
		return nil, fmt.Errorf("no coupon was updated")
	}

	return item, nil
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Define the filter to match the given ID
	filter := bson.M{"_id": _id}

	// Define the update to mark the template as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("templates").UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// DeleteTemplates is the resolver for the deleteTemplates field.
func (r *mutationResolver) DeleteTemplates(ctx context.Context, ids []*string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the list of ID strings to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(*id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match the given IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Define the update to mark records as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"status":     "deleted",
			"updated_by": uid,
			"updated_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
		},
	}

	// Perform the update operation in the database
	result, err := r.db.Collection("templates").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{"status": "success", "deletedCount": result.ModifiedCount}, nil
}

// Template is the resolver for the template field.
func (r *queryResolver) Template(ctx context.Context, name string) (*model.Template, error) {
	var item *model.Template
	col := r.db.Collection(item.Collection())

	filter := bson.M{"name": name}

	err := col.FindOne(ctx, filter).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context, args map[string]interface{}) (*model.Templates, error) {
	var items []*model.Template
	//find all items
	cur, err := r.db.Collection("templates").Find(ctx, utils.Query(args), utils.Options(args))
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Template
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("templates").CountDocuments(ctx, utils.Query(args), nil)
	if err != nil {
		return nil, err
	}

	return &model.Templates{
		Count: int(count),
		Data:  items,
	}, nil
}

// ID is the resolver for the id field.
func (r *templateResolver) ID(ctx context.Context, obj *model.Template) (string, error) {
	return obj.ID.Hex(), nil
}

// Subject is the resolver for the subject field.
func (r *templateResolver) Subject(ctx context.Context, obj *model.Template) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)

	// Retrieve the subject of the template from the obj
	subject, ok := obj.Subject[*locale].(string)
	if !ok {
		// If subject is not found for the requested locale, use the default locale
		subject, ok = obj.Subject[obj.Locale].(string)
		if !ok {
			// If subject is not found for any locale, return an error
			return "", errors.New("Subject not found for any locale")
		}
	}
	return subject, nil
}

// Body is the resolver for the body field.
func (r *templateResolver) Body(ctx context.Context, obj *model.Template) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)

	// Retrieve the body content of the template from the obj
	body, ok := obj.Body[*locale].(string)
	if !ok {
		// If body content is not found for the requested locale, use the default locale
		body, ok = obj.Body[obj.Locale].(string)
		if !ok {
			// If body content is not found for any locale, return an error
			return "", errors.New("Body content not found for any locale")
		}
	}
	return body, nil
}

// Metadata is the resolver for the metadata field.
func (r *templateResolver) Metadata(ctx context.Context, obj *model.Template) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *templateResolver) CreatedAt(ctx context.Context, obj *model.Template) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *templateResolver) UpdatedAt(ctx context.Context, obj *model.Template) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *templateResolver) CreatedBy(ctx context.Context, obj *model.Template) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.CreatedBy.Hex()), nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *templateResolver) UpdatedBy(ctx context.Context, obj *model.Template) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.UpdatedBy.Hex()), nil
}

// Template returns TemplateResolver implementation.
func (r *Resolver) Template() TemplateResolver { return &templateResolver{r} }

type templateResolver struct{ *Resolver }
