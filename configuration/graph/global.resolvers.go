package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/configuration/graph/model"
	"github.com/dailytravel/x/configuration/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *globalResolver) ID(ctx context.Context, obj *model.Global) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *globalResolver) Metadata(ctx context.Context, obj *model.Global) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *globalResolver) Created(ctx context.Context, obj *model.Global) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *globalResolver) Updated(ctx context.Context, obj *model.Global) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// CreateGlobal is the resolver for the createGlobal field.
func (r *mutationResolver) CreateGlobal(ctx context.Context, input model.NewGlobal) (*model.Global, error) {
	item := &model.Global{
		Name: input.Name,
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	result, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	// Retrieve the inserted global document from the result
	insertedID := result.InsertedID.(primitive.ObjectID)
	filter := bson.M{"_id": insertedID}
	createdGlobal := &model.Global{}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(createdGlobal)
	if err != nil {
		return nil, err
	}

	return createdGlobal, nil
}

// UpdateGlobal is the resolver for the updateGlobal field.
func (r *mutationResolver) UpdateGlobal(ctx context.Context, id string, input model.UpdateGlobal) (*model.Global, error) {
	// Convert the ID string to a MongoDB ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}
	item := &model.Global{}

	// Retrieve the global document from the database
	for k, v := range input.Metadata {
		item.Metadata[k] = v
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	if err := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, bson.M{"$set": item}).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteGlobal is the resolver for the deleteGlobal field.
func (r *mutationResolver) DeleteGlobal(ctx context.Context, id string) (map[string]interface{}, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	res, err := r.db.Collection("globals").DeleteOne(ctx, bson.M{"_id": _id})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// DeleteGlobals is the resolver for the deleteGlobals field.
func (r *mutationResolver) DeleteGlobals(ctx context.Context, ids []string) (map[string]interface{}, error) {
	var _ids []primitive.ObjectID

	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids = append(_ids, _id)
	}

	res, err := r.db.Collection("globals").DeleteMany(ctx, bson.M{"_id": bson.M{"$in": _ids}})
	if err != nil {
		return nil, fmt.Errorf("error deleting log: %v", err)
	}

	if res.DeletedCount == 0 {
		return nil, fmt.Errorf("log not found")
	}

	return map[string]interface{}{
		"status": "success",
	}, nil
}

// Global is the resolver for the global field.
func (r *queryResolver) Global(ctx context.Context, name string) (*model.Global, error) {
	// Define the filter to match the provided name
	filter := bson.M{"name": name}

	// Perform the find operation
	result := r.db.Collection("globals").FindOne(ctx, filter)
	if result.Err() != nil {
		return nil, result.Err()
	}

	// Decode the global document into a model.Global object
	global := &model.Global{}
	err := result.Decode(global)
	if err != nil {
		return nil, err
	}

	return global, nil
}

// Globals is the resolver for the options field.
func (r *queryResolver) Globals(ctx context.Context, filter map[string]interface{}, project map[string]interface{}, sort map[string]interface{}, collation map[string]interface{}, limit *int, skip *int) (*model.Globals, error) {
	var items []*model.Global

	// Convert map to bson.M which is a type alias for map[string]interface{}
	_filter := utils.Filter(filter)
	opts := utils.Sort(sort)

	if project != nil {
		opts.SetProjection(project)
	}
	if limit != nil {
		opts.SetLimit(int64(*limit))
	}
	if skip != nil {
		opts.SetSkip(int64(*skip))
	}

	cursor, err := r.db.Collection("globals").Find(ctx, _filter, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	if err = cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	//get total count
	count, err := r.db.Collection("globals").CountDocuments(ctx, _filter, nil)
	if err != nil {
		return nil, err
	}

	return &model.Globals{
		Count: int(count),
		Data:  items,
	}, nil
}

// Global returns GlobalResolver implementation.
func (r *Resolver) Global() GlobalResolver { return &globalResolver{r} }

type globalResolver struct{ *Resolver }
