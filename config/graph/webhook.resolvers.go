package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/config/graph/model"
)

// CreateWebhook is the resolver for the createWebhook field.
func (r *mutationResolver) CreateWebhook(ctx context.Context, input model.NewWebhook) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: CreateWebhook - createWebhook"))
}

// UpdateWebhook is the resolver for the updateWebhook field.
func (r *mutationResolver) UpdateWebhook(ctx context.Context, id string, input model.UpdateWebhook) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: UpdateWebhook - updateWebhook"))
}

// DeleteWebhook is the resolver for the deleteWebhook field.
func (r *mutationResolver) DeleteWebhook(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteWebhook - deleteWebhook"))
}

// DeleteWebhooks is the resolver for the deleteWebhooks field.
func (r *mutationResolver) DeleteWebhooks(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteWebhooks - deleteWebhooks"))
}

// Webhooks is the resolver for the webhooks field.
func (r *queryResolver) Webhooks(ctx context.Context, args map[string]interface{}) ([]*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: Webhooks - webhooks"))
}

// Webhook is the resolver for the webhook field.
func (r *queryResolver) Webhook(ctx context.Context, id string) (*model.Webhook, error) {
	panic(fmt.Errorf("not implemented: Webhook - webhook"))
}
