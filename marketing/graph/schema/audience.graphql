type Audience {
  id: ID!
  name: String!
  description: String!
  segments: [Segment]
  metadata: Map
  status: String!
  created: String!
  updated: String!
}

type Audiences {
  data: [Audience]
  count: Int!
}

input NewAudience {
  name: String!
  description: String!
  segment: SegmentInput!
  metadata: Map
}

input UpdateAudience {
  name: String
  description: String
  segment: SegmentInput
  metadata: Map
}

extend type Query {
  audience(id: ID!): Audience @auth(roles: [ADMIN])
  audiences(stages: Map): [Audience] @auth(roles: [ADMIN])
}

extend type Mutation {
  createAudience(input: NewAudience!): Audience @auth(roles: [ADMIN])
  updateAudience(id: ID!, input: UpdateAudience!): Audience
    @auth(roles: [ADMIN])
  deleteAudience(id: ID!): Map @auth(roles: [ADMIN])
  deleteAudiences(ids: [ID!]!): Map @auth(roles: [ADMIN])
}
