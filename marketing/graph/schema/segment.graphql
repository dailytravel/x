type Segment {
  id: ID!
  name: String!
  description: String
  criteria: [SegmentCriteria!]!
  created: String!
  updated: String!
  createdBy: String
  updatedBy: String
}

type Segments {
  count: Int!
  data: [Segment]
}

type SegmentCriteria {
  field: String!
  operator: SegmentOperator!
  value: String!
}

enum SegmentOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
}

input SegmentInput {
  id: ID
  name: String!
  description: String
  type: String!
  rules: [RuleInput]
}

input RuleInput {
  field: String!
  operator: String!
  value: String!
}

extend type Query {
  segment(id: ID!): Segment @auth(roles: [ADMIN])
  segments(stages: Map): Segments @auth(roles: [ADMIN])
}

extend type Mutation {
  createSegment(input: SegmentInput!): Segment @auth(roles: [ADMIN])
  updateSegment(id: ID!, input: SegmentInput!): Segment @auth(roles: [ADMIN])
  deleteSegment(id: ID!): Map @auth(roles: [ADMIN])
  deleteSegments(ids: [ID!]!): Map @auth(roles: [ADMIN])
}
