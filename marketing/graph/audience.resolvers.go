package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/marketing/graph/model"
)

// CreateAudience is the resolver for the createAudience field.
func (r *mutationResolver) CreateAudience(ctx context.Context, input model.NewAudience) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: CreateAudience - createAudience"))
}

// UpdateAudience is the resolver for the updateAudience field.
func (r *mutationResolver) UpdateAudience(ctx context.Context, id string, input model.UpdateAudience) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: UpdateAudience - updateAudience"))
}

// DeleteAudience is the resolver for the deleteAudience field.
func (r *mutationResolver) DeleteAudience(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteAudience - deleteAudience"))
}

// DeleteAudiences is the resolver for the deleteAudiences field.
func (r *mutationResolver) DeleteAudiences(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteAudiences - deleteAudiences"))
}

// Audience is the resolver for the audience field.
func (r *queryResolver) Audience(ctx context.Context, id string) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: Audience - audience"))
}

// Audiences is the resolver for the audiences field.
func (r *queryResolver) Audiences(ctx context.Context, args map[string]interface{}) ([]*model.Audience, error) {
	panic(fmt.Errorf("not implemented: Audiences - audiences"))
}
