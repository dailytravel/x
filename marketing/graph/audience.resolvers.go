package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/marketing/graph/model"
)

// ID is the resolver for the id field.
func (r *audienceResolver) ID(ctx context.Context, obj *model.Audience) (string, error) {
	return obj.ID.Hex(), nil
}

// Segments is the resolver for the segments field.
func (r *audienceResolver) Segments(ctx context.Context, obj *model.Audience) ([]*model.Segment, error) {
	panic(fmt.Errorf("not implemented: Segments - segments"))
}

// Metadata is the resolver for the metadata field.
func (r *audienceResolver) Metadata(ctx context.Context, obj *model.Audience) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *audienceResolver) Created(ctx context.Context, obj *model.Audience) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *audienceResolver) Updated(ctx context.Context, obj *model.Audience) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// CreateAudience is the resolver for the createAudience field.
func (r *mutationResolver) CreateAudience(ctx context.Context, input model.NewAudience) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: CreateAudience - createAudience"))
}

// UpdateAudience is the resolver for the updateAudience field.
func (r *mutationResolver) UpdateAudience(ctx context.Context, id string, input model.UpdateAudience) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: UpdateAudience - updateAudience"))
}

// DeleteAudience is the resolver for the deleteAudience field.
func (r *mutationResolver) DeleteAudience(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteAudience - deleteAudience"))
}

// DeleteAudiences is the resolver for the deleteAudiences field.
func (r *mutationResolver) DeleteAudiences(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteAudiences - deleteAudiences"))
}

// Audience is the resolver for the audience field.
func (r *queryResolver) Audience(ctx context.Context, id string) (*model.Audience, error) {
	panic(fmt.Errorf("not implemented: Audience - audience"))
}

// Audiences is the resolver for the audiences field.
func (r *queryResolver) Audiences(ctx context.Context, args map[string]interface{}) ([]*model.Audience, error) {
	panic(fmt.Errorf("not implemented: Audiences - audiences"))
}

// Audience returns AudienceResolver implementation.
func (r *Resolver) Audience() AudienceResolver { return &audienceResolver{r} }

type audienceResolver struct{ *Resolver }
