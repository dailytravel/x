package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/dailytravel/x/cms/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User) ([]*model.Post, error) {
	var items []*model.Post

	uid, err := primitive.ObjectIDFromHex(obj.ID)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"uid": uid}
	//find all items
	cur, err := r.db.Collection("posts").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Post
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	return items, nil
}

// Files is the resolver for the files field.
func (r *userResolver) Files(ctx context.Context, obj *model.User) ([]*model.File, error) {
	var items []*model.File

	uid, err := primitive.ObjectIDFromHex(obj.ID)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"uid": uid}
	//find all items
	cur, err := r.db.Collection("files").Find(ctx, filter)
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.File
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	return items, nil
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
