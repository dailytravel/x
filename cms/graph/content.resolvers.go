package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"time"

	"github.com/dailytravel/x/cms/graph/model"
	"github.com/dailytravel/x/cms/internal/utils"
	"github.com/dailytravel/x/cms/pkg/auth"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *contentResolver) ID(ctx context.Context, obj *model.Content) (string, error) {
	return obj.ID.Hex(), nil
}

// Title is the resolver for the title field.
func (r *contentResolver) Title(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)

	if locale == nil {
		locale = &obj.Locale
	}

	if title, ok := obj.Title[*locale].(string); ok {
		return title, nil
	}

	return obj.Title[obj.Locale].(string), nil
}

// Summary is the resolver for the summary field.
func (r *contentResolver) Summary(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	if summary, ok := obj.Summary[*locale].(string); ok {
		return summary, nil
	}

	return obj.Summary[obj.Locale].(string), nil
}

// Body is the resolver for the body field.
func (r *contentResolver) Body(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	if body, ok := obj.Body[*locale].(string); ok {
		return body, nil
	}

	return obj.Body[obj.Locale].(string), nil
}

// Metadata is the resolver for the metadata field.
func (r *contentResolver) Metadata(ctx context.Context, obj *model.Content) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// UID is the resolver for the uid field.
func (r *contentResolver) UID(ctx context.Context, obj *model.Content) (string, error) {
	return obj.ID.Hex(), nil
}

// Created is the resolver for the created field.
func (r *contentResolver) Created(ctx context.Context, obj *model.Content) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *contentResolver) Updated(ctx context.Context, obj *model.Content) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Terms is the resolver for the terms field.
func (r *contentResolver) Terms(ctx context.Context, obj *model.Content) ([]*model.Term, error) {
	var items []*model.Term

	filter := bson.M{"_id": bson.M{"$in": obj.Terms}}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "slug": 1, "content": 1})

	cursor, err := r.db.Collection("terms").Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Parent is the resolver for the parent field.
func (r *contentResolver) Parent(ctx context.Context, obj *model.Content) (*model.Content, error) {
	if obj.Parent == nil {
		return nil, nil
	}
	var item *model.Content

	filter := bson.M{"_id": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1, "email": 1, "photos": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, input model.NewContent) (*model.Content, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Content{
		UID:         *uid,
		Type:        input.Type,
		Locale:      input.Locale,
		Slug:        input.Slug,
		Commentable: *input.Commentable,
		Status:      *input.Status,
		Title:       map[string]interface{}{input.Locale: input.Title},
		Summary:     map[string]interface{}{input.Locale: input.Summary},
		Body:        map[string]interface{}{input.Locale: input.Body},
		Model: model.Model{
			Metadata: input.Metadata,
		},
	}

	if input.Parent != nil {
		parent, err := primitive.ObjectIDFromHex(*input.Parent)
		if err != nil {
			return nil, err
		}
		item.Parent = &parent
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateContent is the resolver for the updateContent field.
func (r *mutationResolver) UpdateContent(ctx context.Context, id string, input model.UpdateContent) (*model.Content, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Fetch the existing category entry
	filter := bson.M{"_id": _id}
	item := &model.Content{}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Parent != nil {
		parent, err := primitive.ObjectIDFromHex(*input.Parent)
		if err != nil {
			return nil, err
		}
		item.Parent = &parent
	}

	// Update fields based on input
	if input.Title != nil {
		item.Title[input.Locale] = *input.Title
	}
	if input.Slug != nil {
		item.Slug = input.Slug
	}
	if input.Body != nil {
		item.Body[input.Locale] = *input.Body
	}
	if input.Metadata != nil {
		item.Metadata = input.Metadata
	}

	// Perform the update in the database
	update := bson.M{
		"$set": item,
	}
	_, err = r.db.Collection(item.Collection()).UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteContent is the resolver for the deleteContent field.
func (r *mutationResolver) DeleteContent(ctx context.Context, id string) (map[string]interface{}, error) {
	// Convert the provided ID to primitive.ObjectID
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Build the filter to match the ID
	filter := bson.M{"_id": objectID}

	// Delete the content using the filter
	result, err := r.db.Collection("contents").DeleteOne(ctx, filter)
	if err != nil {
		return nil, err
	}

	// Prepare the response map based on the deletion result
	response := map[string]interface{}{
		"deletedCount": result.DeletedCount,
	}

	return response, nil
}

// DeleteContents is the resolver for the deleteContents field.
func (r *mutationResolver) DeleteContents(ctx context.Context, ids []string) (map[string]interface{}, error) {
	// Initialize the response map
	response := make(map[string]interface{})

	// Convert the provided IDs to primitive.ObjectID
	objectIDs := make([]primitive.ObjectID, 0, len(ids))
	for _, id := range ids {
		objectID, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			// If there's an error converting an ID, return an error
			return nil, err
		}
		objectIDs = append(objectIDs, objectID)
	}

	// Build the filter to match the IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Delete the contents using the filter
	result, err := r.db.Collection("contents").DeleteMany(ctx, filter)
	if err != nil {
		return nil, err
	}

	// Populate the response with the number of deleted documents
	response["deletedCount"] = result.DeletedCount

	return response, nil
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, id string) (*model.Content, error) {
	var item *model.Content

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": _id}

	if err := r.db.Collection("contents").FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Contents is the resolver for the contents field.
func (r *queryResolver) Contents(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	res, err := r.ts.Collection("contents").Documents().Search(utils.Params(args))
	if err != nil {
		return nil, err
	}

	// Convert struct to map
	results, err := utils.StructToMap(res)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// Content returns ContentResolver implementation.
func (r *Resolver) Content() ContentResolver { return &contentResolver{r} }

type contentResolver struct{ *Resolver }
