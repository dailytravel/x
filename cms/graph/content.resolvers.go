package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/auth"
	"github.com/dailytravel/x/cms/graph/model"
)

// ID is the resolver for the id field.
func (r *contentResolver) ID(ctx context.Context, obj *model.Content) (string, error) {
	return obj.ID.Hex(), nil
}

// Title is the resolver for the title field.
func (r *contentResolver) Title(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)
	if title, ok := obj.Title[locale].(string); ok {
		return title, nil
	}

	return obj.Title[obj.Locale].(string), nil
}

// Summary is the resolver for the summary field.
func (r *contentResolver) Summary(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)
	if summary, ok := obj.Summary[locale].(string); ok {
		return summary, nil
	}

	return obj.Summary[obj.Locale].(string), nil
}

// Body is the resolver for the body field.
func (r *contentResolver) Body(ctx context.Context, obj *model.Content) (string, error) {
	locale := auth.Locale(ctx)
	if body, ok := obj.Body[locale].(string); ok {
		return body, nil
	}

	return obj.Body[obj.Locale].(string), nil
}

// Metadata is the resolver for the metadata field.
func (r *contentResolver) Metadata(ctx context.Context, obj *model.Content) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *contentResolver) CreatedAt(ctx context.Context, obj *model.Content) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *contentResolver) UpdatedAt(ctx context.Context, obj *model.Content) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// PublishedAt is the resolver for the published_at field.
func (r *contentResolver) PublishedAt(ctx context.Context, obj *model.Content) (string, error) {
	return time.Unix(int64(obj.PublishedAt.T), 0).Format(time.RFC3339), nil
}

// Parent is the resolver for the parent field.
func (r *contentResolver) Parent(ctx context.Context, obj *model.Content) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Followers is the resolver for the followers field.
func (r *contentResolver) Followers(ctx context.Context, obj *model.Content) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Comments is the resolver for the comments field.
func (r *contentResolver) Comments(ctx context.Context, obj *model.Content) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, input model.NewContent) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: CreateContent - createContent"))
}

// UpdateContent is the resolver for the updateContent field.
func (r *mutationResolver) UpdateContent(ctx context.Context, id string, input model.UpdateContent) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: UpdateContent - updateContent"))
}

// DeleteContent is the resolver for the deleteContent field.
func (r *mutationResolver) DeleteContent(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContent - deleteContent"))
}

// DeleteContents is the resolver for the deleteContents field.
func (r *mutationResolver) DeleteContents(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContents - deleteContents"))
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, id string) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: Content - content"))
}

// Contents is the resolver for the contents field.
func (r *queryResolver) Contents(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Contents - contents"))
}

// Content returns ContentResolver implementation.
func (r *Resolver) Content() ContentResolver { return &contentResolver{r} }

type contentResolver struct{ *Resolver }
