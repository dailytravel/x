package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/cms/graph/model"
)

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, input model.NewContent) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: CreateContent - createContent"))
}

// UpdateContent is the resolver for the updateContent field.
func (r *mutationResolver) UpdateContent(ctx context.Context, id string, input model.UpdateContent) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: UpdateContent - updateContent"))
}

// DeleteContent is the resolver for the deleteContent field.
func (r *mutationResolver) DeleteContent(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContent - deleteContent"))
}

// DeleteContents is the resolver for the deleteContents field.
func (r *mutationResolver) DeleteContents(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteContents - deleteContents"))
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, id string) (*model.Content, error) {
	panic(fmt.Errorf("not implemented: Content - content"))
}

// Contents is the resolver for the contents field.
func (r *queryResolver) Contents(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Contents - contents"))
}
