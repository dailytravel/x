package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/dailytravel/x/cms/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// FindFileByID is the resolver for the findFileByID field.
func (r *entityResolver) FindFileByID(ctx context.Context, id string) (*model.File, error) {
	var item *model.File

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// FindImageByID is the resolver for the findImageByID field.
func (r *entityResolver) FindImageByID(ctx context.Context, id string) (*model.Image, error) {
	var item *model.Image

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// FindPackageByID is the resolver for the findPackageByID field.
func (r *entityResolver) FindPackageByID(ctx context.Context, id string) (*model.Package, error) {
	return &model.Package{
		ID: id,
	}, nil
}

// FindPlaceByID is the resolver for the findPlaceByID field.
func (r *entityResolver) FindPlaceByID(ctx context.Context, id string) (*model.Place, error) {
	return &model.Place{
		ID: id,
	}, nil
}

// FindPostByID is the resolver for the findPostByID field.
func (r *entityResolver) FindPostByID(ctx context.Context, id string) (*model.Post, error) {
	var item *model.Post

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// FindProductByID is the resolver for the findProductByID field.
func (r *entityResolver) FindProductByID(ctx context.Context, id string) (*model.Product, error) {
	return &model.Product{
		ID: id,
	}, nil
}

// FindTemplateByID is the resolver for the findTemplateByID field.
func (r *entityResolver) FindTemplateByID(ctx context.Context, id string) (*model.Template, error) {
	return &model.Template{
		ID: id,
	}, nil
}

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id string) (*model.User, error) {
	return &model.User{
		ID: id,
	}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *entityResolver) FindTermByID(ctx context.Context, id string) (*model.Term, error) {
	var item *model.Term

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}
