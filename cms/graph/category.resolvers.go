package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/auth"
	"github.com/dailytravel/x/cms/graph/model"
	"github.com/dailytravel/x/cms/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *categoryResolver) ID(ctx context.Context, obj *model.Category) (string, error) {
	return obj.ID.Hex(), nil
}

// Parent is the resolver for the parent field.
func (r *categoryResolver) Parent(ctx context.Context, obj *model.Category) (*model.Category, error) {
	var item *model.Category

	filter := bson.M{"parent": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Children is the resolver for the children field.
func (r *categoryResolver) Children(ctx context.Context, obj *model.Category) ([]*model.Category, error) {
	var items []*model.Category
	filter := bson.M{"parent": obj.ID}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	cursor, err := r.db.Collection(obj.Collection()).Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Name is the resolver for the name field.
func (r *categoryResolver) Name(ctx context.Context, obj *model.Category) (string, error) {
	locale := auth.Locale(ctx)
	if name, ok := obj.Name[locale].(string); ok {
		return name, nil
	}

	return obj.Name[obj.Locale].(string), nil
}

// Description is the resolver for the description field.
func (r *categoryResolver) Description(ctx context.Context, obj *model.Category) (*string, error) {
	locale := auth.Locale(ctx)
	if description, ok := obj.Description[locale].(string); ok {
		return &description, nil
	}

	if description, ok := obj.Description[obj.Locale].(string); ok {
		return &description, nil
	}

	return nil, nil // or return nil, errors.New("Description not found for any locale")
}

// Metadata is the resolver for the metadata field.
func (r *categoryResolver) Metadata(ctx context.Context, obj *model.Category) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *categoryResolver) CreatedAt(ctx context.Context, obj *model.Category) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *categoryResolver) UpdatedAt(ctx context.Context, obj *model.Category) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *categoryResolver) CreatedBy(ctx context.Context, obj *model.Category) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *categoryResolver) UpdatedBy(ctx context.Context, obj *model.Category) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	item := &model.Category{
		Locale: input.Locale,
		Name:   map[string]interface{}{input.Locale: input.Name},
		Slug:   input.Slug,
		Model: model.Model{
			Metadata:  input.Metadata,
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	if input.Description != nil {
		item.Description = map[string]interface{}{input.Locale: input.Description}
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item, nil)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input model.UpdateCategory) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (map[string]interface{}, error) {
	var item *model.Category

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": _id}

	if err := r.db.Collection("categories").FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return map[string]interface{}{"id": id}, nil
}

// DeleteCategories is the resolver for the deleteCategories field.
func (r *mutationResolver) DeleteCategories(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	_ids := make([]primitive.ObjectID, len(ids))
	for i, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids[i] = _id
	}

	filter := bson.M{"_id": bson.M{"$in": _ids}}
	res, err := r.db.Collection("categories").UpdateMany(ctx, filter, bson.M{"$set": bson.M{"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())}, "deleted_by": uid}})
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"success": true,
		"message": fmt.Sprintf("%d contacts deleted", res.ModifiedCount),
	}, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	var item *model.Category

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": _id}

	if err := r.db.Collection("categories").FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

type categoryResolver struct{ *Resolver }
