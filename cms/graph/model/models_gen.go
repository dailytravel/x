// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Files struct {
	Count int     `json:"count"`
	Data  []*File `json:"data,omitempty"`
}

type NewFile struct {
	Locale      string                 `json:"locale"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Size        int                    `json:"size"`
	Provider    string                 `json:"provider"`
	URL         string                 `json:"url"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type NewPost struct {
	Parent      *string                `json:"parent,omitempty"`
	User        *string                `json:"user,omitempty"`
	Locale      string                 `json:"locale"`
	Type        string                 `json:"type"`
	Title       *string                `json:"title,omitempty"`
	Summary     *string                `json:"summary,omitempty"`
	Body        *string                `json:"body,omitempty"`
	Slug        *string                `json:"slug,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
	Images      []*string              `json:"images,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Commentable *bool                  `json:"commentable,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type Posts struct {
	Count int     `json:"count"`
	Data  []*Post `json:"data,omitempty"`
}

type UpdateFile struct {
	Locale      string                 `json:"locale"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type UpdatePost struct {
	Parent      *string                `json:"parent,omitempty"`
	User        *string                `json:"user,omitempty"`
	Locale      string                 `json:"locale"`
	Type        *string                `json:"type,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Summary     *string                `json:"summary,omitempty"`
	Body        *string                `json:"body,omitempty"`
	Slug        *string                `json:"slug,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
	Images      []*string              `json:"images,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Commentable *bool                  `json:"commentable,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type PostStatus string

const (
	PostStatusDraft     PostStatus = "DRAFT"
	PostStatusPublished PostStatus = "PUBLISHED"
	PostStatusArchived  PostStatus = "ARCHIVED"
)

var AllPostStatus = []PostStatus{
	PostStatusDraft,
	PostStatusPublished,
	PostStatusArchived,
}

func (e PostStatus) IsValid() bool {
	switch e {
	case PostStatusDraft, PostStatusPublished, PostStatusArchived:
		return true
	}
	return false
}

func (e PostStatus) String() string {
	return string(e)
}

func (e *PostStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostStatus", str)
	}
	return nil
}

func (e PostStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostType string

const (
	PostTypePost       PostType = "POST"
	PostTypePage       PostType = "PAGE"
	PostTypeProduct    PostType = "PRODUCT"
	PostTypeHotel      PostType = "HOTEL"
	PostTypeRestaurant PostType = "RESTAURANT"
	PostTypePackage    PostType = "PACKAGE"
)

var AllPostType = []PostType{
	PostTypePost,
	PostTypePage,
	PostTypeProduct,
	PostTypeHotel,
	PostTypeRestaurant,
	PostTypePackage,
}

func (e PostType) IsValid() bool {
	switch e {
	case PostTypePost, PostTypePage, PostTypeProduct, PostTypeHotel, PostTypeRestaurant, PostTypePackage:
		return true
	}
	return false
}

func (e PostType) String() string {
	return string(e)
}

func (e *PostType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostType", str)
	}
	return nil
}

func (e PostType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
