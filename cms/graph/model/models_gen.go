// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Contents struct {
	Count int        `json:"count"`
	Data  []*Content `json:"data,omitempty"`
}

type Files struct {
	Count int     `json:"count"`
	Data  []*File `json:"data,omitempty"`
}

type NewContent struct {
	Parent      *string                `json:"parent,omitempty"`
	User        *string                `json:"user,omitempty"`
	Locale      string                 `json:"locale"`
	Type        string                 `json:"type"`
	Title       *string                `json:"title,omitempty"`
	Summary     *string                `json:"summary,omitempty"`
	Body        *string                `json:"body,omitempty"`
	Slug        *string                `json:"slug,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
	Images      []*string              `json:"images,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Commentable *bool                  `json:"commentable,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type NewFile struct {
	Locale      string                 `json:"locale"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Size        int                    `json:"size"`
	Provider    string                 `json:"provider"`
	URL         string                 `json:"url"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type NewTerm struct {
	Locale      string                 `json:"locale"`
	Name        string                 `json:"name"`
	Slug        *string                `json:"slug,omitempty"`
	Description *string                `json:"description,omitempty"`
	Parent      *string                `json:"parent,omitempty"`
	Type        string                 `json:"type"`
	Order       *int                   `json:"order,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type Terms struct {
	Count int     `json:"count"`
	Data  []*Term `json:"data,omitempty"`
}

type UpdateContent struct {
	Parent      *string                `json:"parent,omitempty"`
	User        *string                `json:"user,omitempty"`
	Locale      string                 `json:"locale"`
	Type        *string                `json:"type,omitempty"`
	Title       *string                `json:"title,omitempty"`
	Summary     *string                `json:"summary,omitempty"`
	Body        *string                `json:"body,omitempty"`
	Slug        *string                `json:"slug,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
	Images      []*string              `json:"images,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Commentable *bool                  `json:"commentable,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateFile struct {
	Locale      string                 `json:"locale"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
	Starred     *bool                  `json:"starred,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Categories  []string               `json:"categories,omitempty"`
}

type UpdateTerm struct {
	ID          *string                `json:"id,omitempty"`
	Locale      string                 `json:"locale"`
	Name        *string                `json:"name,omitempty"`
	Slug        *string                `json:"slug,omitempty"`
	Description *string                `json:"description,omitempty"`
	Parent      *string                `json:"parent,omitempty"`
	Type        *string                `json:"type,omitempty"`
	Order       *int                   `json:"order,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type ContentStatus string

const (
	ContentStatusDraft     ContentStatus = "DRAFT"
	ContentStatusPublished ContentStatus = "PUBLISHED"
	ContentStatusArchived  ContentStatus = "ARCHIVED"
)

var AllContentStatus = []ContentStatus{
	ContentStatusDraft,
	ContentStatusPublished,
	ContentStatusArchived,
}

func (e ContentStatus) IsValid() bool {
	switch e {
	case ContentStatusDraft, ContentStatusPublished, ContentStatusArchived:
		return true
	}
	return false
}

func (e ContentStatus) String() string {
	return string(e)
}

func (e *ContentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentStatus", str)
	}
	return nil
}

func (e ContentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentType string

const (
	ContentTypePost       ContentType = "POST"
	ContentTypePage       ContentType = "PAGE"
	ContentTypeProduct    ContentType = "PRODUCT"
	ContentTypeHotel      ContentType = "HOTEL"
	ContentTypeRestaurant ContentType = "RESTAURANT"
	ContentTypePackage    ContentType = "PACKAGE"
)

var AllContentType = []ContentType{
	ContentTypePost,
	ContentTypePage,
	ContentTypeProduct,
	ContentTypeHotel,
	ContentTypeRestaurant,
	ContentTypePackage,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypePost, ContentTypePage, ContentTypeProduct, ContentTypeHotel, ContentTypeRestaurant, ContentTypePackage:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
