package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/graph/model"
)

// ID is the resolver for the id field.
func (r *fileResolver) ID(ctx context.Context, obj *model.File) (string, error) {
	return obj.ID.Hex(), nil
}

// Metadata is the resolver for the metadata field.
func (r *fileResolver) Metadata(ctx context.Context, obj *model.File) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *fileResolver) CreatedAt(ctx context.Context, obj *model.File) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *fileResolver) UpdatedAt(ctx context.Context, obj *model.File) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *fileResolver) CreatedBy(ctx context.Context, obj *model.File) (*model.User, error) {
	return &model.User{
		Model: model.Model{
			ID: obj.CreatedBy,
		},
	}, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *fileResolver) UpdatedBy(ctx context.Context, obj *model.File) (*model.User, error) {
	return &model.User{
		Model: model.Model{
			ID: obj.UpdatedBy,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *fileResolver) User(ctx context.Context, obj *model.File) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Followers is the resolver for the followers field.
func (r *fileResolver) Followers(ctx context.Context, obj *model.File) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, input model.NewFile) (*model.File, error) {
	panic(fmt.Errorf("not implemented: CreateFile - createFile"))
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, id string, input model.UpdateFile) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UpdateFile - updateFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteFile - deleteFile"))
}

// DeleteFiles is the resolver for the deleteFiles field.
func (r *mutationResolver) DeleteFiles(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteFiles - deleteFiles"))
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, args map[string]interface{}) (*model.Files, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// File returns FileResolver implementation.
func (r *Resolver) File() FileResolver { return &fileResolver{r} }

type fileResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *fileResolver) Owner(ctx context.Context, obj *model.File) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}
