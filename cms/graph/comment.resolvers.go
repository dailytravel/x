package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/auth"
	"github.com/dailytravel/x/cms/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *model.Comment) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (string, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Body is the resolver for the body field.
func (r *commentResolver) Body(ctx context.Context, obj *model.Comment) (string, error) {
	locale := auth.Locale(ctx)
	if body, ok := obj.Body[locale].(string); ok {
		return body, nil
	}

	return obj.Body[obj.Locale].(string), nil
}

// Metadata is the resolver for the metadata field.
func (r *commentResolver) Metadata(ctx context.Context, obj *model.Comment) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *commentResolver) CreatedAt(ctx context.Context, obj *model.Comment) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *commentResolver) UpdatedAt(ctx context.Context, obj *model.Comment) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Parent is the resolver for the parent field.
func (r *commentResolver) Parent(ctx context.Context, obj *model.Comment) (*model.Comment, error) {
	var item *model.Comment

	filter := bson.M{"parent": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment) ([]*model.Comment, error) {
	var items []*model.Comment
	filter := bson.M{"parent": obj.ID}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	cursor, err := r.db.Collection(obj.Collection()).Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Commentable is the resolver for the commentable field.
func (r *commentResolver) Commentable(ctx context.Context, obj *model.Comment) (map[string]interface{}, error) {
	var item map[string]interface{}

	err := r.db.Collection(obj.Commentable.Type).FindOne(ctx, bson.M{"_id": obj.Commentable.ID}).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Reaction is the resolver for the reaction field.
func (r *commentResolver) Reaction(ctx context.Context, obj *model.Comment) ([]*model.Reaction, error) {
	panic(fmt.Errorf("not implemented: Reaction - reaction"))
}

// CreatedBy is the resolver for the created_by field.
func (r *commentResolver) CreatedBy(ctx context.Context, obj *model.Comment) (*model.User, error) {
	return &model.User{
		Model: model.Model{
			ID: obj.CreatedBy,
		},
	}, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *commentResolver) UpdatedBy(ctx context.Context, obj *model.Comment) (*model.User, error) {
	return &model.User{
		Model: model.Model{
			ID: obj.UpdatedBy,
		},
	}, nil
}

// Attachments is the resolver for the attachments field.
func (r *commentResolver) Attachments(ctx context.Context, obj *model.Comment) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: Attachments - attachments"))
}

// Reactions is the resolver for the reactions field.
func (r *commentResolver) Reactions(ctx context.Context, obj *model.Comment) ([]*model.Reaction, error) {
	panic(fmt.Errorf("not implemented: Reactions - reactions"))
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, input model.UpdateComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// DeleteComments is the resolver for the deleteComments field.
func (r *mutationResolver) DeleteComments(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteComments - deleteComments"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, args map[string]interface{}) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
