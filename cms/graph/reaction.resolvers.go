package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// CreateReaction is the resolver for the createReaction field.
func (r *mutationResolver) CreateReaction(ctx context.Context, input model.NewReaction) (*model.Reaction, error) {
	panic(fmt.Errorf("not implemented: CreateReaction - createReaction"))
}

// UpdateReaction is the resolver for the updateReaction field.
func (r *mutationResolver) UpdateReaction(ctx context.Context, id string, input model.UpdateReaction) (*model.Reaction, error) {
	panic(fmt.Errorf("not implemented: UpdateReaction - updateReaction"))
}

// Reaction is the resolver for the reaction field.
func (r *queryResolver) Reaction(ctx context.Context, reactable map[string]interface{}) (*model.Reaction, error) {
	var item *model.Reaction
	col := r.db.Collection(item.Collection())

	//convert reactable to primitive.ObjectID and set it to reactable.ID
	reactableID, err := primitive.ObjectIDFromHex(reactable["id"].(string))

	filter := bson.M{"reactable": bson.M{
		"_id":  reactableID,
		"type": reactable["type"].(string),
	}}

	err = col.FindOne(ctx, filter).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, fmt.Errorf("no document found for filter %v", filter)
		}
		return nil, err
	}

	return item, nil
}

// Reactions is the resolver for the reactions field.
func (r *queryResolver) Reactions(ctx context.Context, args map[string]interface{}) (*model.Reactions, error) {
	panic(fmt.Errorf("not implemented: Reactions - reactions"))
}

// ID is the resolver for the id field.
func (r *reactionResolver) ID(ctx context.Context, obj *model.Reaction) (string, error) {
	return obj.ID.Hex(), nil
}

// User is the resolver for the user field.
func (r *reactionResolver) User(ctx context.Context, obj *model.Reaction) (string, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Reactable is the resolver for the reactable field.
func (r *reactionResolver) Reactable(ctx context.Context, obj *model.Reaction) (map[string]interface{}, error) {
	var item map[string]interface{}

	err := r.db.Collection(obj.Reactable.Type).FindOne(ctx, bson.M{"_id": obj.Reactable.ID}).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *reactionResolver) CreatedAt(ctx context.Context, obj *model.Reaction) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *reactionResolver) UpdatedAt(ctx context.Context, obj *model.Reaction) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// Reaction returns ReactionResolver implementation.
func (r *Resolver) Reaction() ReactionResolver { return &reactionResolver{r} }

type reactionResolver struct{ *Resolver }
