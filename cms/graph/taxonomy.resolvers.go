package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/graph/model"
)

// CreateTaxonomy is the resolver for the createTaxonomy field.
func (r *mutationResolver) CreateTaxonomy(ctx context.Context, input model.NewTaxonomy) (*model.Taxonomy, error) {
	panic(fmt.Errorf("not implemented: CreateTaxonomy - createTaxonomy"))
}

// UpdateTaxonomy is the resolver for the updateTaxonomy field.
func (r *mutationResolver) UpdateTaxonomy(ctx context.Context, input model.UpdateTaxonomy) (*model.Taxonomy, error) {
	panic(fmt.Errorf("not implemented: UpdateTaxonomy - updateTaxonomy"))
}

// DeleteTaxonomy is the resolver for the deleteTaxonomy field.
func (r *mutationResolver) DeleteTaxonomy(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTaxonomy - deleteTaxonomy"))
}

// DeleteTaxonomies is the resolver for the deleteTaxonomies field.
func (r *mutationResolver) DeleteTaxonomies(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteTaxonomies - deleteTaxonomies"))
}

// Taxonomies is the resolver for the taxonomies field.
func (r *queryResolver) Taxonomies(ctx context.Context, ids []string) ([]*model.Taxonomy, error) {
	panic(fmt.Errorf("not implemented: Taxonomies - taxonomies"))
}

// Taxonomy is the resolver for the taxonomy field.
func (r *queryResolver) Taxonomy(ctx context.Context, id string) (*model.Taxonomy, error) {
	panic(fmt.Errorf("not implemented: Taxonomy - taxonomy"))
}

// ID is the resolver for the id field.
func (r *taxonomyResolver) ID(ctx context.Context, obj *model.Taxonomy) (string, error) {
	return obj.ID.Hex(), nil
}

// Category is the resolver for the category field.
func (r *taxonomyResolver) Category(ctx context.Context, obj *model.Taxonomy) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Taxonomizable is the resolver for the Taxonomizable field.
func (r *taxonomyResolver) Taxonomizable(ctx context.Context, obj *model.Taxonomy) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Taxonomizable - Taxonomizable"))
}

// CreatedAt is the resolver for the created_at field.
func (r *taxonomyResolver) CreatedAt(ctx context.Context, obj *model.Taxonomy) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// Taxonomy returns TaxonomyResolver implementation.
func (r *Resolver) Taxonomy() TaxonomyResolver { return &taxonomyResolver{r} }

type taxonomyResolver struct{ *Resolver }
