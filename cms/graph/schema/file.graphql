type File @key(fields: "id") {
  id: ID!
  uid: ID!
  locale: String!
  name: String!
  description: String
  type: String!
  size: Int!
  provider: String!
  url: String!
  metadata: Map
  starred: Boolean!
  status: String!
  created: String!
  updated: String!
}

type Files {
  count: Int!
  data: [File]
}

input NewFile {
  locale: String!
  name: String!
  description: String
  type: String!
  size: Int!
  provider: String!
  url: String!
  metadata: Map
  starred: Boolean
  status: String
  categories: [ID!]
}

input UpdateFile {
  locale: String!
  name: String
  description: String
  metadata: Map
  starred: Boolean
  status: String
  categories: [ID!]
}

extend type Query {
  files(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Files
  file(id: ID!): File @auth
}

extend type Mutation {
  createFile(input: NewFile!): File @auth
  updateFile(id: ID!, input: UpdateFile!): File @auth
  deleteFile(id: ID!): Map @auth
  deleteFiles(ids: [ID!]!): Map @auth
}
