package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/cms/graph/model"
)

// CreateCountry is the resolver for the createCountry field.
func (r *mutationResolver) CreateCountry(ctx context.Context, input model.NewCountry) (*model.Country, error) {
	panic(fmt.Errorf("not implemented: CreateCountry - createCountry"))
}

// UpdateCountry is the resolver for the updateCountry field.
func (r *mutationResolver) UpdateCountry(ctx context.Context, id string, input model.UpdateCountry) (*model.Country, error) {
	panic(fmt.Errorf("not implemented: UpdateCountry - updateCountry"))
}

// DeleteCountry is the resolver for the deleteCountry field.
func (r *mutationResolver) DeleteCountry(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteCountry - deleteCountry"))
}

// DeleteCountries is the resolver for the deleteCountries field.
func (r *mutationResolver) DeleteCountries(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteCountries - deleteCountries"))
}

// Country is the resolver for the country field.
func (r *queryResolver) Country(ctx context.Context, id string) (*model.Country, error) {
	panic(fmt.Errorf("not implemented: Country - country"))
}

// Countries is the resolver for the countries field.
func (r *queryResolver) Countries(ctx context.Context, args map[string]interface{}) (*model.Countries, error) {
	panic(fmt.Errorf("not implemented: Countries - countries"))
}
