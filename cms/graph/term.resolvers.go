package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dailytravel/x/cms/graph/model"
	"github.com/dailytravel/x/cms/internal/utils"
	"github.com/dailytravel/x/cms/pkg/auth"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// CreateTerm is the resolver for the createTerm field.
func (r *mutationResolver) CreateTerm(ctx context.Context, input model.NewTerm) (*model.Term, error) {
	item := &model.Term{
		Locale: input.Locale,
		Name:   map[string]interface{}{input.Locale: input.Name},
		Slug:   input.Slug,
	}

	if input.Description != nil {
		item.Description = map[string]interface{}{input.Locale: *input.Description}
	}

	res, err := r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	item.ID = res.InsertedID.(primitive.ObjectID)

	return item, nil
}

// UpdateTerm is the resolver for the updateTerm field.
func (r *mutationResolver) UpdateTerm(ctx context.Context, id string, input model.UpdateTerm) (*model.Term, error) {
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Fetch the existing taxonomy entry
	filter := bson.M{"_id": _id}
	item := &model.Term{}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Update fields based on input
	if input.Name != nil {
		item.Name[input.Locale] = *input.Name
	}
	if input.Slug != nil {
		item.Slug = input.Slug
	}
	if input.Description != nil {
		item.Description[input.Locale] = *input.Description
	}
	if input.Metadata != nil {
		item.Metadata = input.Metadata
	}

	// Perform the update in the database
	update := bson.M{
		"$set": item,
	}
	_, err = r.db.Collection(item.Collection()).UpdateOne(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteTerm is the resolver for the deleteTerm field.
func (r *mutationResolver) DeleteTerm(ctx context.Context, id string) (map[string]interface{}, error) {
	var item *model.Term

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": _id}

	if err := r.db.Collection("terms").FindOneAndDelete(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return map[string]interface{}{"id": id}, nil
}

// DeleteTerms is the resolver for the deleteTerms field.
func (r *mutationResolver) DeleteTerms(ctx context.Context, ids []string) (map[string]interface{}, error) {
	_ids := make([]primitive.ObjectID, len(ids))
	for i, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		_ids[i] = _id
	}

	filter := bson.M{"_id": bson.M{"$in": _ids}}
	res, err := r.db.Collection("terms").DeleteMany(ctx, filter)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"success": true,
		"message": fmt.Sprintf("%d terms deleted", res.DeletedCount),
	}, nil
}

// Term is the resolver for the term field.
func (r *queryResolver) Term(ctx context.Context, id string) (*model.Term, error) {
	var item *model.Term

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	filter := bson.M{"_id": _id}

	if err := r.db.Collection("terms").FindOne(ctx, filter).Decode(&item); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Terms is the resolver for the terms field.
func (r *queryResolver) Terms(ctx context.Context, args map[string]interface{}) (map[string]interface{}, error) {
	res, err := r.ts.Collection("terms").Documents().Search(utils.Params(args))
	if err != nil {
		return nil, err
	}

	// Convert struct to map
	results, err := utils.StructToMap(res)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// ID is the resolver for the id field.
func (r *termResolver) ID(ctx context.Context, obj *model.Term) (string, error) {
	return obj.ID.Hex(), nil
}

// Parent is the resolver for the parent field.
func (r *termResolver) Parent(ctx context.Context, obj *model.Term) (*model.Term, error) {
	var item *model.Term

	filter := bson.M{"parent": obj.Parent}
	options := options.FindOne().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	err := r.db.Collection(item.Collection()).FindOne(ctx, filter, options).Decode(&item)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, nil
		}
		return nil, err
	}

	return item, nil
}

// Children is the resolver for the children field.
func (r *termResolver) Children(ctx context.Context, obj *model.Term) ([]*model.Term, error) {
	var items []*model.Term
	filter := bson.M{"parent": obj.ID}
	options := options.Find().SetProjection(bson.M{"_id": 1, "name": 1, "description": 1})

	cursor, err := r.db.Collection(obj.Collection()).Find(ctx, filter, options)
	if err != nil {
		return nil, err
	}

	if err := cursor.All(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// Name is the resolver for the name field.
func (r *termResolver) Name(ctx context.Context, obj *model.Term) (string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	// Try to retrieve the name for the requested locale
	if name, ok := obj.Name[*locale].(string); ok {
		return name, nil
	}

	return obj.Name[obj.Locale].(string), nil
}

// Description is the resolver for the description field.
func (r *termResolver) Description(ctx context.Context, obj *model.Term) (*string, error) {
	// Get the locale from the context
	locale := auth.Locale(ctx)
	if locale == nil {
		locale = &obj.Locale
	}

	// Try to retrieve the description for the requested locale
	if description, ok := obj.Description[*locale].(string); ok {
		return &description, nil
	}

	return obj.Description[obj.Locale].(*string), nil
}

// Metadata is the resolver for the metadata field.
func (r *termResolver) Metadata(ctx context.Context, obj *model.Term) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// Created is the resolver for the created field.
func (r *termResolver) Created(ctx context.Context, obj *model.Term) (string, error) {
	return time.Unix(int64(obj.Created.T), 0).Format(time.RFC3339), nil
}

// Updated is the resolver for the updated field.
func (r *termResolver) Updated(ctx context.Context, obj *model.Term) (string, error) {
	return time.Unix(int64(obj.Updated.T), 0).Format(time.RFC3339), nil
}

// Term returns TermResolver implementation.
func (r *Resolver) Term() TermResolver { return &termResolver{r} }

type termResolver struct{ *Resolver }
