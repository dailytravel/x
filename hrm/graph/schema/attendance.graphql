type Attendance {
  id: ID!
  timeIn: String!
  timeOut: String
  notes: String
  metadata: Map
  status: String # "present", "absent", "late", etc.
  createdAt: String!
  updatedAt: String!
  uid: ID!
  createdBy: ID
  updatedBy: ID
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

type Attendances {
  data: [Attendance]
  count: Int!
}

input NewAttendance {
  timeIn: String
  timeOut: String
  notes: String
  metadata: Map
  status: String
}

input UpdateAttendance {
  uid: ID
  timeIn: String
  timeOut: String
  notes: String
  metadata: Map
  status: String
}

extend type Query {
  attendance(id: ID!): Attendance @auth
  attendances(args: Map): Attendances @auth
}

extend type Mutation {
  checkIn: Attendance @auth
  checkOut: Attendance @auth
  createAttendance(input: NewAttendance!): Attendance @auth
  updateAttendance(id: ID!, input: UpdateAttendance!): Attendance @auth
  deleteAttendance(id: ID!): Map @auth
  deleteAttendances(ids: [ID!]!): Map @auth
}
