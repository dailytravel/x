type Job {
  id: ID!
  code: String!
  locale: String!
  title: String!
  description: String!
  requirements: String!
  skills: String
  benefits: String
  location: String!
  type: String!
  metadata: Map
  status: String!
  created: String!
  updated: String!
}

type Jobs {
  data: [Job]
  count: Int!
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
}

enum JobStatus {
  OPEN
  CLOSED
}

input NewJob {
  locale: String!
  title: String!
  description: String!
  requirements: String!
  skills: String
  benefits: String
  location: String!
  type: String!
  metadata: Map
  status: String!
}

input UpdateJob {
  locale: String
  title: String
  description: String
  requirements: String
  skills: String
  benefits: String
  location: String
  type: String
  metadata: Map
  status: String
}

extend type Query {
  job(id: ID!): Job
  jobs(
    filter: Map
    project: Map
    sort: Map
    collation: Map
    limit: Int
    skip: Int
  ): Jobs
}

extend type Mutation {
  createJob(input: NewJob!): Job @auth(roles: ["admin"])
  updateJob(id: ID!, input: UpdateJob!): Job @auth(roles: ["admin"])
  deleteJob(id: ID!): Map @auth(roles: ["admin"])
  deleteJobs(ids: [ID!]!): Map @auth(roles: ["admin"])
}
