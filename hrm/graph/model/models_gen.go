// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Applications struct {
	Data  []*Application `json:"data,omitempty"`
	Count int            `json:"count"`
}

type Attendances struct {
	Data  []*Attendance `json:"data,omitempty"`
	Count int           `json:"count"`
}

type Certification struct {
	Name      string `json:"name"`
	Authority string `json:"authority"`
	Date      string `json:"date"`
}

type CertificationInput struct {
	Name      string `json:"name"`
	Authority string `json:"authority"`
	Date      string `json:"date"`
}

type Education struct {
	Degree      string  `json:"degree"`
	University  string  `json:"university"`
	StartDate   string  `json:"start_date"`
	EndDate     *string `json:"end_date,omitempty"`
	Description *string `json:"description,omitempty"`
}

type EducationInput struct {
	Degree      string  `json:"degree"`
	University  string  `json:"university"`
	StartDate   string  `json:"start_date"`
	EndDate     *string `json:"end_date,omitempty"`
	Description *string `json:"description,omitempty"`
}

type Experience struct {
	Title       string  `json:"title"`
	Company     string  `json:"company"`
	StartDate   string  `json:"start_date"`
	EndDate     *string `json:"end_date,omitempty"`
	Description *string `json:"description,omitempty"`
}

type ExperienceInput struct {
	Title       string  `json:"title"`
	Company     string  `json:"company"`
	StartDate   string  `json:"start_date"`
	EndDate     *string `json:"end_date,omitempty"`
	Description *string `json:"description,omitempty"`
}

type Jobs struct {
	Data  []*Job `json:"data,omitempty"`
	Count *int   `json:"count,omitempty"`
}

type Language struct {
	Name        string      `json:"name"`
	Proficiency Proficiency `json:"proficiency"`
}

type LanguageInput struct {
	Name        string      `json:"name"`
	Proficiency Proficiency `json:"proficiency"`
}

type Leaves struct {
	Data  []*Leave `json:"data,omitempty"`
	Count int      `json:"count"`
}

type NewApplication struct {
	Job      string                 `json:"job"`
	Notes    *string                `json:"notes,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

type NewAttendance struct {
	TimeIn   *string                `json:"timeIn,omitempty"`
	TimeOut  *string                `json:"timeOut,omitempty"`
	Notes    *string                `json:"notes,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

type NewJob struct {
	Locale       string                 `json:"locale"`
	Title        string                 `json:"title"`
	Description  string                 `json:"description"`
	Requirements string                 `json:"requirements"`
	Skills       *string                `json:"skills,omitempty"`
	Benefits     *string                `json:"benefits,omitempty"`
	Location     string                 `json:"location"`
	Type         string                 `json:"type"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	Status       string                 `json:"status"`
}

type NewLeave struct {
	Type     string                 `json:"type"`
	Start    string                 `json:"start"`
	End      *string                `json:"end,omitempty"`
	Reason   string                 `json:"reason"`
	Status   *string                `json:"status,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type NewOrganization struct {
	UID         *string                `json:"uid,omitempty"`
	Parent      *string                `json:"parent,omitempty"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Status      *string                `json:"status,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type NewPayroll struct {
	UID      string                 `json:"uid"`
	Date     string                 `json:"date"`
	Amount   float64                `json:"amount"`
	Currency string                 `json:"currency"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Status   string                 `json:"status"`
}

type NewResume struct {
	Title          string                `json:"title"`
	Summary        string                `json:"summary"`
	Experience     []*ExperienceInput    `json:"experience"`
	Education      []*EducationInput     `json:"education"`
	Skills         []*SkillInput         `json:"skills"`
	Certifications []*CertificationInput `json:"certifications"`
	Languages      []*LanguageInput      `json:"languages"`
	References     []*ReferenceInput     `json:"references"`
}

type NewSalary struct {
	Amount   float64                `json:"amount"`
	Currency string                 `json:"currency"`
	Start    string                 `json:"start"`
	End      *string                `json:"end,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type Organizations struct {
	Data  []*Organization `json:"data,omitempty"`
	Count int             `json:"count"`
}

type Payrolls struct {
	Data  []*Payroll `json:"data,omitempty"`
	Count int        `json:"count"`
}

type Reference struct {
	Name         string  `json:"name"`
	Relationship string  `json:"relationship"`
	Email        string  `json:"email"`
	Phone        *string `json:"phone,omitempty"`
}

type ReferenceInput struct {
	Name         string  `json:"name"`
	Relationship string  `json:"relationship"`
	Email        string  `json:"email"`
	Phone        *string `json:"phone,omitempty"`
}

type Resumes struct {
	Data  []*Resume `json:"data"`
	Count int       `json:"count"`
}

type Salaries struct {
	Data  []*Salary `json:"data,omitempty"`
	Count int       `json:"count"`
}

type Skill struct {
	Name        string      `json:"name"`
	Proficiency Proficiency `json:"proficiency"`
	Description *string     `json:"description,omitempty"`
}

type SkillInput struct {
	Name        string      `json:"name"`
	Proficiency Proficiency `json:"proficiency"`
	Description *string     `json:"description,omitempty"`
}

type UpdateApplication struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Notes    *string                `json:"notes,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

type UpdateAttendance struct {
	UID      *string                `json:"uid,omitempty"`
	TimeIn   *string                `json:"timeIn,omitempty"`
	TimeOut  *string                `json:"timeOut,omitempty"`
	Notes    *string                `json:"notes,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

type UpdateJob struct {
	Locale       *string                `json:"locale,omitempty"`
	Title        *string                `json:"title,omitempty"`
	Description  *string                `json:"description,omitempty"`
	Requirements *string                `json:"requirements,omitempty"`
	Skills       *string                `json:"skills,omitempty"`
	Benefits     *string                `json:"benefits,omitempty"`
	Location     *string                `json:"location,omitempty"`
	Type         *string                `json:"type,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	Status       *string                `json:"status,omitempty"`
}

type UpdateLeave struct {
	Type     *string                `json:"type,omitempty"`
	Start    *string                `json:"start,omitempty"`
	End      *string                `json:"end,omitempty"`
	Reason   *string                `json:"reason,omitempty"`
	Status   *string                `json:"status,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type UpdateOrganization struct {
	UID         *string                `json:"uid,omitempty"`
	Parent      *string                `json:"parent,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Type        *string                `json:"type,omitempty"`
	Status      *string                `json:"status,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type UpdatePayroll struct {
	Date     *string                `json:"date,omitempty"`
	Amount   *float64               `json:"amount,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

type UpdateResume struct {
	Title          *string               `json:"title,omitempty"`
	Summary        *string               `json:"summary,omitempty"`
	Experience     []*ExperienceInput    `json:"experience,omitempty"`
	Education      []*EducationInput     `json:"education,omitempty"`
	Skills         []*SkillInput         `json:"skills,omitempty"`
	Certifications []*CertificationInput `json:"certifications,omitempty"`
	Languages      []*LanguageInput      `json:"languages,omitempty"`
	References     []*ReferenceInput     `json:"references,omitempty"`
}

type UpdateSalary struct {
	Amount   *float64               `json:"amount,omitempty"`
	Currency *string                `json:"currency,omitempty"`
	Start    *string                `json:"start,omitempty"`
	End      *string                `json:"end,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type AttendanceStatus string

const (
	AttendanceStatusPresent AttendanceStatus = "PRESENT"
	AttendanceStatusAbsent  AttendanceStatus = "ABSENT"
	AttendanceStatusLate    AttendanceStatus = "LATE"
	AttendanceStatusExcused AttendanceStatus = "EXCUSED"
)

var AllAttendanceStatus = []AttendanceStatus{
	AttendanceStatusPresent,
	AttendanceStatusAbsent,
	AttendanceStatusLate,
	AttendanceStatusExcused,
}

func (e AttendanceStatus) IsValid() bool {
	switch e {
	case AttendanceStatusPresent, AttendanceStatusAbsent, AttendanceStatusLate, AttendanceStatusExcused:
		return true
	}
	return false
}

func (e AttendanceStatus) String() string {
	return string(e)
}

func (e *AttendanceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttendanceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttendanceStatus", str)
	}
	return nil
}

func (e AttendanceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobStatus string

const (
	JobStatusOpen   JobStatus = "OPEN"
	JobStatusClosed JobStatus = "CLOSED"
)

var AllJobStatus = []JobStatus{
	JobStatusOpen,
	JobStatusClosed,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusOpen, JobStatusClosed:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobType string

const (
	JobTypeFullTime   JobType = "FULL_TIME"
	JobTypePartTime   JobType = "PART_TIME"
	JobTypeContract   JobType = "CONTRACT"
	JobTypeFreelance  JobType = "FREELANCE"
	JobTypeInternship JobType = "INTERNSHIP"
)

var AllJobType = []JobType{
	JobTypeFullTime,
	JobTypePartTime,
	JobTypeContract,
	JobTypeFreelance,
	JobTypeInternship,
}

func (e JobType) IsValid() bool {
	switch e {
	case JobTypeFullTime, JobTypePartTime, JobTypeContract, JobTypeFreelance, JobTypeInternship:
		return true
	}
	return false
}

func (e JobType) String() string {
	return string(e)
}

func (e *JobType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobType", str)
	}
	return nil
}

func (e JobType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeaveStatus string

const (
	LeaveStatusPending  LeaveStatus = "pending"
	LeaveStatusApproved LeaveStatus = "approved"
	LeaveStatusRejected LeaveStatus = "rejected"
)

var AllLeaveStatus = []LeaveStatus{
	LeaveStatusPending,
	LeaveStatusApproved,
	LeaveStatusRejected,
}

func (e LeaveStatus) IsValid() bool {
	switch e {
	case LeaveStatusPending, LeaveStatusApproved, LeaveStatusRejected:
		return true
	}
	return false
}

func (e LeaveStatus) String() string {
	return string(e)
}

func (e *LeaveStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeaveStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeaveStatus", str)
	}
	return nil
}

func (e LeaveStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeaveType string

const (
	LeaveTypeParental      LeaveType = "Parental"
	LeaveTypeSick          LeaveType = "Sick"
	LeaveTypeBereavement   LeaveType = "Bereavement"
	LeaveTypeSabbatical    LeaveType = "Sabbatical"
	LeaveTypeHoliday       LeaveType = "holiday"
	LeaveTypeLeave         LeaveType = "Leave"
	LeaveTypeAnnual        LeaveType = "Annual"
	LeaveTypeUnpaid        LeaveType = "Unpaid"
	LeaveTypeMilitary      LeaveType = "Military"
	LeaveTypeMarriage      LeaveType = "Marriage"
	LeaveTypeCompensatory  LeaveType = "Compensatory"
	LeaveTypeReligion      LeaveType = "Religion"
	LeaveTypeEarned        LeaveType = "Earned"
	LeaveTypeCompassionate LeaveType = "compassionate"
)

var AllLeaveType = []LeaveType{
	LeaveTypeParental,
	LeaveTypeSick,
	LeaveTypeBereavement,
	LeaveTypeSabbatical,
	LeaveTypeHoliday,
	LeaveTypeLeave,
	LeaveTypeAnnual,
	LeaveTypeUnpaid,
	LeaveTypeMilitary,
	LeaveTypeMarriage,
	LeaveTypeCompensatory,
	LeaveTypeReligion,
	LeaveTypeEarned,
	LeaveTypeCompassionate,
}

func (e LeaveType) IsValid() bool {
	switch e {
	case LeaveTypeParental, LeaveTypeSick, LeaveTypeBereavement, LeaveTypeSabbatical, LeaveTypeHoliday, LeaveTypeLeave, LeaveTypeAnnual, LeaveTypeUnpaid, LeaveTypeMilitary, LeaveTypeMarriage, LeaveTypeCompensatory, LeaveTypeReligion, LeaveTypeEarned, LeaveTypeCompassionate:
		return true
	}
	return false
}

func (e LeaveType) String() string {
	return string(e)
}

func (e *LeaveType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeaveType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeaveType", str)
	}
	return nil
}

func (e LeaveType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Proficiency string

const (
	ProficiencyBasic        Proficiency = "BASIC"
	ProficiencyIntermediate Proficiency = "INTERMEDIATE"
	ProficiencyAdvanced     Proficiency = "ADVANCED"
	ProficiencyNative       Proficiency = "NATIVE"
)

var AllProficiency = []Proficiency{
	ProficiencyBasic,
	ProficiencyIntermediate,
	ProficiencyAdvanced,
	ProficiencyNative,
}

func (e Proficiency) IsValid() bool {
	switch e {
	case ProficiencyBasic, ProficiencyIntermediate, ProficiencyAdvanced, ProficiencyNative:
		return true
	}
	return false
}

func (e Proficiency) String() string {
	return string(e)
}

func (e *Proficiency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Proficiency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Proficiency", str)
	}
	return nil
}

func (e Proficiency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
