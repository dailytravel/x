package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/hrm/graph/model"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input model.NewOrganization) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id string, input model.UpdateOrganization) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: UpdateOrganization - updateOrganization"))
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id string) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: DeleteOrganization - deleteOrganization"))
}

// ID is the resolver for the id field.
func (r *organizationResolver) ID(ctx context.Context, obj *model.Organization) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Parent is the resolver for the parent field.
func (r *organizationResolver) Parent(ctx context.Context, obj *model.Organization) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Metadata is the resolver for the metadata field.
func (r *organizationResolver) Metadata(ctx context.Context, obj *model.Organization) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *organizationResolver) CreatedAt(ctx context.Context, obj *model.Organization) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *organizationResolver) UpdatedAt(ctx context.Context, obj *model.Organization) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// UID is the resolver for the uid field.
func (r *organizationResolver) UID(ctx context.Context, obj *model.Organization) (string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// CreatedBy is the resolver for the created_by field.
func (r *organizationResolver) CreatedBy(ctx context.Context, obj *model.Organization) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *organizationResolver) UpdatedBy(ctx context.Context, obj *model.Organization) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, arg map[string]interface{}) (*model.Organizations, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Organization returns OrganizationResolver implementation.
func (r *Resolver) Organization() OrganizationResolver { return &organizationResolver{r} }

type organizationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *organizationResolver) Manager(ctx context.Context, obj *model.Organization) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Manager - manager"))
}
