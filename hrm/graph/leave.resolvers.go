package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/hrm/graph/model"
)

// ID is the resolver for the id field.
func (r *leaveResolver) ID(ctx context.Context, obj *model.Leave) (string, error) {
	return obj.ID.Hex(), nil
}

// Owner is the resolver for the owner field.
func (r *leaveResolver) Owner(ctx context.Context, obj *model.Leave) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// StartDate is the resolver for the start_date field.
func (r *leaveResolver) StartDate(ctx context.Context, obj *model.Leave) (string, error) {
	panic(fmt.Errorf("not implemented: StartDate - start_date"))
}

// EndDate is the resolver for the end_date field.
func (r *leaveResolver) EndDate(ctx context.Context, obj *model.Leave) (*string, error) {
	panic(fmt.Errorf("not implemented: EndDate - end_date"))
}

// Metadata is the resolver for the metadata field.
func (r *leaveResolver) Metadata(ctx context.Context, obj *model.Leave) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *leaveResolver) CreatedAt(ctx context.Context, obj *model.Leave) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *leaveResolver) UpdatedAt(ctx context.Context, obj *model.Leave) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *leaveResolver) CreatedBy(ctx context.Context, obj *model.Leave) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *leaveResolver) UpdatedBy(ctx context.Context, obj *model.Leave) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// CreateLeave is the resolver for the createLeave field.
func (r *mutationResolver) CreateLeave(ctx context.Context, input model.NewLeave) (*model.Leave, error) {
	panic(fmt.Errorf("not implemented: CreateLeave - createLeave"))
}

// UpdateLeave is the resolver for the updateLeave field.
func (r *mutationResolver) UpdateLeave(ctx context.Context, id string, input model.UpdateLeave) (*model.Leave, error) {
	panic(fmt.Errorf("not implemented: UpdateLeave - updateLeave"))
}

// DeleteLeave is the resolver for the deleteLeave field.
func (r *mutationResolver) DeleteLeave(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteLeave - deleteLeave"))
}

// Leaves is the resolver for the leaves field.
func (r *queryResolver) Leaves(ctx context.Context, args map[string]interface{}) (*model.Leaves, error) {
	panic(fmt.Errorf("not implemented: Leaves - leaves"))
}

// Leave is the resolver for the leave field.
func (r *queryResolver) Leave(ctx context.Context, id string) (*model.Leave, error) {
	panic(fmt.Errorf("not implemented: Leave - leave"))
}

// Leave returns LeaveResolver implementation.
func (r *Resolver) Leave() LeaveResolver { return &leaveResolver{r} }

type leaveResolver struct{ *Resolver }
