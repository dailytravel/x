package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/hrm/graph/model"
)

// ID is the resolver for the id field.
func (r *employeeResolver) ID(ctx context.Context, obj *model.Employee) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Reference is the resolver for the reference field.
func (r *employeeResolver) Reference(ctx context.Context, obj *model.Employee) (string, error) {
	panic(fmt.Errorf("not implemented: Reference - reference"))
}

// Birthday is the resolver for the birthday field.
func (r *employeeResolver) Birthday(ctx context.Context, obj *model.Employee) (*string, error) {
	panic(fmt.Errorf("not implemented: Birthday - birthday"))
}

// Metadata is the resolver for the metadata field.
func (r *employeeResolver) Metadata(ctx context.Context, obj *model.Employee) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// HireDate is the resolver for the hire_date field.
func (r *employeeResolver) HireDate(ctx context.Context, obj *model.Employee) (*string, error) {
	panic(fmt.Errorf("not implemented: HireDate - hire_date"))
}

// CreatedAt is the resolver for the created_at field.
func (r *employeeResolver) CreatedAt(ctx context.Context, obj *model.Employee) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *employeeResolver) UpdatedAt(ctx context.Context, obj *model.Employee) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// User is the resolver for the user field.
func (r *employeeResolver) User(ctx context.Context, obj *model.Employee) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Organization is the resolver for the organization field.
func (r *employeeResolver) Organization(ctx context.Context, obj *model.Employee) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Position is the resolver for the position field.
func (r *employeeResolver) Position(ctx context.Context, obj *model.Employee) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: Position - position"))
}

// UID is the resolver for the uid field.
func (r *employeeResolver) UID(ctx context.Context, obj *model.Employee) (string, error) {
	panic(fmt.Errorf("not implemented: UID - uid"))
}

// CreatedBy is the resolver for the created_by field.
func (r *employeeResolver) CreatedBy(ctx context.Context, obj *model.Employee) (*string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *employeeResolver) UpdatedBy(ctx context.Context, obj *model.Employee) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: CreateEmployee - createEmployee"))
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, input model.UpdateEmployee) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployee - updateEmployee"))
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEmployee - deleteEmployee"))
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: Employee - employee"))
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, args map[string]interface{}) (*model.Employees, error) {
	panic(fmt.Errorf("not implemented: Employees - employees"))
}

// Employee returns EmployeeResolver implementation.
func (r *Resolver) Employee() EmployeeResolver { return &employeeResolver{r} }

type employeeResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *employeeResolver) Reviews(ctx context.Context, obj *model.Employee) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Reviews - reviews"))
}
