package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dailytravel/x/hrm/auth"
	"github.com/dailytravel/x/hrm/graph/model"
	"github.com/dailytravel/x/hrm/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *employeeResolver) ID(ctx context.Context, obj *model.Employee) (string, error) {
	return obj.ID.Hex(), nil
}

// Birthday is the resolver for the birthday field.
func (r *employeeResolver) Birthday(ctx context.Context, obj *model.Employee) (string, error) {
	return obj.Birthday.Time().String(), nil
}

// Metadata is the resolver for the metadata field.
func (r *employeeResolver) Metadata(ctx context.Context, obj *model.Employee) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// HireDate is the resolver for the hire_date field.
func (r *employeeResolver) HireDate(ctx context.Context, obj *model.Employee) (string, error) {
	return obj.HireDate.Time().String(), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *employeeResolver) CreatedAt(ctx context.Context, obj *model.Employee) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *employeeResolver) UpdatedAt(ctx context.Context, obj *model.Employee) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// User is the resolver for the user field.
func (r *employeeResolver) User(ctx context.Context, obj *model.Employee) (*model.User, error) {
	var item *model.User

	if err := r.db.Collection("users").FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Organization is the resolver for the organization field.
func (r *employeeResolver) Organization(ctx context.Context, obj *model.Employee) (*model.Organization, error) {
	var item *model.Organization

	if err := r.db.Collection("organizations").FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Position is the resolver for the position field.
func (r *employeeResolver) Position(ctx context.Context, obj *model.Employee) (*model.Position, error) {
	var item *model.Position

	if err := r.db.Collection("positions").FindOne(ctx, bson.M{"_id": obj.UID}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// UID is the resolver for the uid field.
func (r *employeeResolver) UID(ctx context.Context, obj *model.Employee) (string, error) {
	return obj.UID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *employeeResolver) CreatedBy(ctx context.Context, obj *model.Employee) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	createdBy := obj.CreatedBy.Hex()

	return &createdBy, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *employeeResolver) UpdatedBy(ctx context.Context, obj *model.Employee) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	updatedBy := obj.UpdatedBy.Hex()

	return &updatedBy, nil
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	item := &model.Employee{
		UID:       *uid,
		Reference: input.Reference,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Phone:     input.Phone,
		Address:   input.Address,
		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, input model.UpdateEmployee) (*model.Employee, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the item by ID
	item := &model.Employee{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Update the employee
	if input.Reference != nil {
		item.Reference = *input.Reference
	}

	if input.FirstName != nil {
		item.FirstName = *input.FirstName
	}

	if input.LastName != nil {
		item.LastName = *input.LastName
	}

	if input.Email != nil {
		item.Email = *input.Email
	}

	if input.Phone != nil {
		item.Phone = *input.Phone
	}

	if input.Address != nil {
		item.Address = *input.Address
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	item.UpdatedBy = uid

	if err := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, item).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the employee by ID
	employee := &model.Employee{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(employee.Collection()).FindOne(ctx, filter).Decode(employee)
	if err != nil {
		return nil, err
	}

	// Mark the employee as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"updated_by": uid,
		},
	}
	opts := options.FindOneAndUpdate().SetReturnDocument(options.After)

	var deletedEmployee model.Employee
	err = r.db.Collection("employees").FindOneAndUpdate(ctx, filter, update, opts).Decode(&deletedEmployee)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// DeleteEmployees is the resolver for the deleteEmployees field.
func (r *mutationResolver) DeleteEmployees(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(auth.Auth(ctx))
	if err != nil {
		return nil, err
	}

	// Convert IDs to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match employees with the provided IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Update fields to mark employees as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"updated_by": uid,
		},
	}

	// Update multiple employees
	result, err := r.db.Collection("employees").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Return the number of deleted employees
	return map[string]interface{}{"deletedCount": result.ModifiedCount}, nil
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*model.Employee, error) {
	var item *model.Employee
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection("employees").FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, args map[string]interface{}) (*model.Employees, error) {
	var items []*model.Employee
	//find all items
	cur, err := r.db.Collection("employees").Find(ctx, utils.Query(args), utils.Options(args))
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Employee
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("employees").CountDocuments(ctx, utils.Query(args), nil)
	if err != nil {
		return nil, err
	}

	return &model.Employees{
		Count: int(count),
		Data:  items,
	}, nil
}

// Employee returns EmployeeResolver implementation.
func (r *Resolver) Employee() EmployeeResolver { return &employeeResolver{r} }

type employeeResolver struct{ *Resolver }
