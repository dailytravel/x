package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/dailytravel/x/hrm/graph/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *eventResolver) ID(ctx context.Context, obj *model.Event) (string, error) {
	return obj.ID.Hex(), nil
}

// Start is the resolver for the start field.
func (r *eventResolver) Start(ctx context.Context, obj *model.Event) (int, error) {
	panic(fmt.Errorf("not implemented: Start - start"))
}

// End is the resolver for the end field.
func (r *eventResolver) End(ctx context.Context, obj *model.Event) (int, error) {
	panic(fmt.Errorf("not implemented: End - end"))
}

// CreatedAt is the resolver for the created_at field.
func (r *eventResolver) CreatedAt(ctx context.Context, obj *model.Event) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *eventResolver) UpdatedAt(ctx context.Context, obj *model.Event) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *eventResolver) CreatedBy(ctx context.Context, obj *model.Event) (*model.User, error) {
	r.User()
	return &model.User{}, nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *eventResolver) UpdatedBy(ctx context.Context, obj *model.Event) (*model.User, error) {
	return &model.User{}, nil
}

// Owner is the resolver for the owner field.
func (r *eventResolver) Owner(ctx context.Context, obj *model.Event) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Followers is the resolver for the followers field.
func (r *eventResolver) Followers(ctx context.Context, obj *model.Event) ([]*model.Follow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Attendees is the resolver for the attendees field.
func (r *eventResolver) Attendees(ctx context.Context, obj *model.Event) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Attendees - attendees"))
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id string, input model.UpdateEvent) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (map[string]interface{}, error) {
	// user := auth.User(ctx)
	// if user == nil {
	// 	return nil, fmt.Errorf("unauthorized")
	// }

	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	filter := bson.M{"_id": _id}

	var deleted model.Event

	if err := r.db.Collection(deleted.Collection()).FindOneAndUpdate(ctx, filter, bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": "user.ID",
		},
	}).Decode(&deleted); err != nil {
		return nil, err
	}

	return map[string]interface{}{"id": id}, nil
}

// DeleteEvents is the resolver for the deleteEvents field.
func (r *mutationResolver) DeleteEvents(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteEvents - deleteEvents"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, args map[string]interface{}) (*model.Events, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// EndDate is the resolver for the end_date field.
func (r *recurrenceResolver) EndDate(ctx context.Context, obj *model.Recurrence) (*int, error) {
	panic(fmt.Errorf("not implemented: EndDate - end_date"))
}

// Exceptions is the resolver for the exceptions field.
func (r *recurrenceResolver) Exceptions(ctx context.Context, obj *model.Recurrence) ([]*int, error) {
	panic(fmt.Errorf("not implemented: Exceptions - exceptions"))
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// Recurrence returns RecurrenceResolver implementation.
func (r *Resolver) Recurrence() RecurrenceResolver { return &recurrenceResolver{r} }

type eventResolver struct{ *Resolver }
type recurrenceResolver struct{ *Resolver }
