package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/hrm/graph/model"
)

// ID is the resolver for the id field.
func (r *payrollResolver) ID(ctx context.Context, obj *model.Payroll) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// User is the resolver for the user field.
func (r *payrollResolver) User(ctx context.Context, obj *model.Payroll) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// PayDate is the resolver for the pay_date field.
func (r *payrollResolver) PayDate(ctx context.Context, obj *model.Payroll) (string, error) {
	panic(fmt.Errorf("not implemented: PayDate - pay_date"))
}

// Metadata is the resolver for the metadata field.
func (r *payrollResolver) Metadata(ctx context.Context, obj *model.Payroll) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *payrollResolver) CreatedAt(ctx context.Context, obj *model.Payroll) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *payrollResolver) UpdatedAt(ctx context.Context, obj *model.Payroll) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// Payroll returns PayrollResolver implementation.
func (r *Resolver) Payroll() PayrollResolver { return &payrollResolver{r} }

type payrollResolver struct{ *Resolver }
