package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/dailytravel/x/hrm/graph/model"
)

// ID is the resolver for the id field.
func (r *jobResolver) ID(ctx context.Context, obj *model.Job) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Organization is the resolver for the organization field.
func (r *jobResolver) Organization(ctx context.Context, obj *model.Job) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}

// Title is the resolver for the title field.
func (r *jobResolver) Title(ctx context.Context, obj *model.Job) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}

// Description is the resolver for the description field.
func (r *jobResolver) Description(ctx context.Context, obj *model.Job) (string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}

// Metadata is the resolver for the metadata field.
func (r *jobResolver) Metadata(ctx context.Context, obj *model.Job) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the created_at field.
func (r *jobResolver) CreatedAt(ctx context.Context, obj *model.Job) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// UpdatedAt is the resolver for the updated_at field.
func (r *jobResolver) UpdatedAt(ctx context.Context, obj *model.Job) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updated_at"))
}

// CreatedBy is the resolver for the created_by field.
func (r *jobResolver) CreatedBy(ctx context.Context, obj *model.Job) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - created_by"))
}

// UpdatedBy is the resolver for the updated_by field.
func (r *jobResolver) UpdatedBy(ctx context.Context, obj *model.Job) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdatedBy - updated_by"))
}

// CreateJob is the resolver for the createJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, input model.NewJob) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: CreateJob - createJob"))
}

// UpdateJob is the resolver for the updateJob field.
func (r *mutationResolver) UpdateJob(ctx context.Context, id string, input model.UpdateJob) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: UpdateJob - updateJob"))
}

// DeleteJob is the resolver for the deleteJob field.
func (r *mutationResolver) DeleteJob(ctx context.Context, id string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteJob - deleteJob"))
}

// DeleteJobs is the resolver for the deleteJobs field.
func (r *mutationResolver) DeleteJobs(ctx context.Context, ids []string) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: DeleteJobs - deleteJobs"))
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id string) (*model.Job, error) {
	panic(fmt.Errorf("not implemented: Job - job"))
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) (*model.Jobs, error) {
	panic(fmt.Errorf("not implemented: Jobs - jobs"))
}

// Job returns JobResolver implementation.
func (r *Resolver) Job() JobResolver { return &jobResolver{r} }

type jobResolver struct{ *Resolver }
