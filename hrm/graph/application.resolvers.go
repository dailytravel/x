package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/dailytravel/x/hrm/graph/model"
	"github.com/dailytravel/x/hrm/internal/utils"
	"github.com/typesense/typesense-go/typesense/api/pointer"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// ID is the resolver for the id field.
func (r *applicationResolver) ID(ctx context.Context, obj *model.Application) (string, error) {
	return obj.ID.Hex(), nil
}

// Job is the resolver for the job field.
func (r *applicationResolver) Job(ctx context.Context, obj *model.Application) (*model.Job, error) {
	var item *model.Job

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": obj.Job}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Metadata is the resolver for the metadata field.
func (r *applicationResolver) Metadata(ctx context.Context, obj *model.Application) (map[string]interface{}, error) {
	return obj.Metadata, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *applicationResolver) CreatedAt(ctx context.Context, obj *model.Application) (string, error) {
	return time.Unix(int64(obj.CreatedAt.T), 0).Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *applicationResolver) UpdatedAt(ctx context.Context, obj *model.Application) (string, error) {
	return time.Unix(int64(obj.UpdatedAt.T), 0).Format(time.RFC3339), nil
}

// UID is the resolver for the uid field.
func (r *applicationResolver) UID(ctx context.Context, obj *model.Application) (string, error) {
	return obj.UID.Hex(), nil
}

// CreatedBy is the resolver for the created_by field.
func (r *applicationResolver) CreatedBy(ctx context.Context, obj *model.Application) (*string, error) {
	if obj.CreatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.CreatedBy.Hex()), nil
}

// UpdatedBy is the resolver for the updated_by field.
func (r *applicationResolver) UpdatedBy(ctx context.Context, obj *model.Application) (*string, error) {
	if obj.UpdatedBy == nil {
		return nil, nil
	}

	return pointer.String(obj.UpdatedBy.Hex()), nil
}

// CreateApplication is the resolver for the createApplication field.
func (r *mutationResolver) CreateApplication(ctx context.Context, input model.NewApplication) (*model.Application, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	item := &model.Application{
		UID: *uid,

		Model: model.Model{
			CreatedBy: uid,
			UpdatedBy: uid,
		},
	}

	_, err = r.db.Collection(item.Collection()).InsertOne(ctx, item)
	if err != nil {
		return nil, err
	}

	return item, nil
}

// UpdateApplication is the resolver for the updateApplication field.
func (r *mutationResolver) UpdateApplication(ctx context.Context, id string, input model.UpdateApplication) (*model.Application, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the item by ID
	item := &model.Application{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	if input.Status != nil {
		item.Status = *input.Status
	}

	item.UpdatedBy = uid

	if err := r.db.Collection(item.Collection()).FindOneAndUpdate(ctx, filter, item).Decode(item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteApplication is the resolver for the deleteApplication field.
func (r *mutationResolver) DeleteApplication(ctx context.Context, id string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ID string to ObjectID
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	// Find the item by ID
	item := &model.Application{}
	filter := bson.M{"_id": _id}
	err = r.db.Collection(item.Collection()).FindOne(ctx, filter).Decode(item)
	if err != nil {
		return nil, err
	}

	// Mark the item as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"updated_by": uid,
		},
	}
	opts := options.FindOneAndUpdate().SetReturnDocument(options.After)

	var deleted model.Application
	err = r.db.Collection("applications").FindOneAndUpdate(ctx, filter, update, opts).Decode(&deleted)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"success": true,
	}, nil
}

// DeleteApplications is the resolver for the deleteApplications field.
func (r *mutationResolver) DeleteApplications(ctx context.Context, ids []string) (map[string]interface{}, error) {
	uid, err := utils.UID(ctx)
	if err != nil {
		return nil, err
	}

	// Convert IDs to ObjectIDs
	var objectIDs []primitive.ObjectID
	for _, id := range ids {
		_id, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return nil, err
		}
		objectIDs = append(objectIDs, _id)
	}

	// Define the filter to match items with the provided IDs
	filter := bson.M{"_id": bson.M{"$in": objectIDs}}

	// Update fields to mark items as deleted
	update := bson.M{
		"$set": bson.M{
			"deleted_at": primitive.Timestamp{T: uint32(time.Now().Unix())},
			"deleted_by": uid,
			"updated_by": uid,
		},
	}

	// Update multiple items
	result, err := r.db.Collection("applications").UpdateMany(ctx, filter, update)
	if err != nil {
		return nil, err
	}

	// Return the number of deleted items
	return map[string]interface{}{"deletedCount": result.ModifiedCount}, nil
}

// Application is the resolver for the application field.
func (r *queryResolver) Application(ctx context.Context, id string) (*model.Application, error) {
	var item *model.Application
	_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	if err := r.db.Collection(item.Collection()).FindOne(ctx, bson.M{"_id": _id}).Decode(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// Applications is the resolver for the applications field.
func (r *queryResolver) Applications(ctx context.Context, args map[string]interface{}) (*model.Applications, error) {
	var items []*model.Application
	//find all items
	cur, err := r.db.Collection("applications").Find(ctx, utils.Query(args), utils.Options(args))
	if err != nil {
		return nil, err
	}

	for cur.Next(ctx) {
		var item *model.Application
		if err := cur.Decode(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}

	//get total count
	count, err := r.db.Collection("applications").CountDocuments(ctx, utils.Query(args), nil)
	if err != nil {
		return nil, err
	}

	return &model.Applications{
		Count: int(count),
		Data:  items,
	}, nil
}

// Application returns ApplicationResolver implementation.
func (r *Resolver) Application() ApplicationResolver { return &applicationResolver{r} }

type applicationResolver struct{ *Resolver }
